//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#nullable enable

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 612 // Disable "CS0612 '...' is obsolete"
#pragma warning disable 649 // Disable "CS0649 Field is never assigned to, and will always have its default value null"
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"
#pragma warning disable 8603 // Disable "CS8603 Possible null reference return"
#pragma warning disable 8604 // Disable "CS8604 Possible null reference argument for parameter"
#pragma warning disable 8625 // Disable "CS8625 Cannot convert null literal to non-nullable reference type"
#pragma warning disable 8765 // Disable "CS8765 Nullability of type of parameter doesn't match overridden member (possibly because of nullability attributes)."

namespace AlfabankMerchant.NSwagGenClient
{
    using System = global::System;

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface IClient
    {

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Запрос на оплату через Apple Pay.
        /// </summary>
        /// <remarks>
        /// Для проведения платежа через Apple Pay используется запрос payment.do. &lt;br&gt;&lt;br&gt;Указывается в виде списка JSON-параметров типа: "имя1": "значение1", "имя2": "значение2". &lt;br&gt;&lt;br&gt;Обязательные параметры: &lt;br&gt;&lt;br&gt;&lt;b&gt;merchant&lt;/b&gt; - Имя входа продавца в системе платёжного шлюза. &lt;br&gt;Тип: AN..30 &lt;br&gt;&lt;br&gt;&lt;b&gt;orderNumber&lt;/b&gt; - Уникальный номер заказа на стороне продавца. &lt;br&gt;Тип: AN..32 &lt;br&gt;&lt;br&gt;&lt;b&gt;paymentToken&lt;/b&gt; - Параметр paymentToken должен содержать закодированное в Base64 значение свойства paymentData, полученного из объекта PKPaymentToken Object от системы Apple Pay (подробнее см. документацию Apple Pay). &lt;br&gt;Тип: AN..8192 &lt;br&gt;&lt;br&gt;&lt;br&gt;Дополнительные параметры: &lt;br&gt;&lt;br&gt;&lt;b&gt;description&lt;/b&gt; - Описание заказа. &lt;br&gt;Тип: AN..512 &lt;br&gt;&lt;br&gt;&lt;b&gt;language&lt;/b&gt; - Язык в кодировке ISO 639-1. Если не указан, будет использован язык, указанный в настройках магазина как язык по умолчанию. &lt;br&gt;Тип: A2 &lt;br&gt;&lt;br&gt;&lt;b&gt;additionalParameters&lt;/b&gt; - Дополнительные параметры заказа, которые сохраняются для просмотра из личного кабинета продавца. Их следует указывать в следующем формате: "имя1": "значение1", "имя2": "значение2". Каждую новую пару имени и значения параметра следует отделять запятой. &lt;br&gt;&lt;br&gt;&lt;b&gt;clientId&lt;/b&gt; - Номер клиента, для которого следует создать связку для проведения регулярных платежей. Следует указывать, только если проводится технический платёж для последующих регулярных платежей. &lt;br&gt;Тип: ANS..255 &lt;br&gt;&lt;br&gt;&lt;b&gt;preAuth&lt;/b&gt; - Параметр, определяющий необходимость предварительной авторизации (блокирования средств на счету клиента до их списания). &lt;br&gt;&lt;br&gt;Доступны следующие значения: &lt;br&gt;true (истина) - параметр включён, оплата происходит с предавторизацией (происходит блокирование средств клиента до списания); &lt;br&gt;false (ложь) - параметр выключен (списание происходит сразу). &lt;br&gt;&lt;br&gt;Если параметр не указан в запросе, списание происходит сразу. &lt;br&gt;&lt;br&gt;Тип: N3 &lt;br&gt;&lt;br&gt;&lt;b&gt;email&lt;/b&gt; - Адрес электронной почты. Обязателен, если у интернет-магазина настроена фискализация и не указан номер телефона. &lt;br&gt;Тип: ANS..* &lt;br&gt;&lt;br&gt;&lt;b&gt;phone&lt;/b&gt; - Номер телефона. Обязателен, если у интернет-магазина настроена фискализация и не указан адрес электронной почты. &lt;br&gt;Тип: ANS.12 &lt;br&gt;&lt;br&gt;&lt;b&gt;failUrl&lt;/b&gt; - Адрес, на который требуется перенаправить пользователя в случае неуспешной оплаты. Адрес должен быть указан полностью, включая используемый протокол (например, https://test.ru вместо test.ru). &lt;br&gt;Тип: AN..512 &lt;br&gt;&lt;br&gt;&lt;b&gt;postAddress&lt;/b&gt; - Адрес доставки товара. &lt;br&gt;Тип: AN..512
        /// </remarks>
        /// <param name="applePayPaymentRequest">applePayPaymentRequest</param>
        /// <returns>OK</returns>
        /// <exception cref="AlfabankException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ApplePayPaymentResponse> ApplePaymentAsync(ApplePayPaymentRequest applePayPaymentRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Запрос на оплату через Google Pay.
        /// </summary>
        /// <remarks>
        /// Для проведения платежа через Google Pay используется запрос payment.do. &lt;br&gt;&lt;br&gt;Указывается в виде списка JSON-параметров типа: "имя1": "значение1", "имя2": "значение2". &lt;br&gt;&lt;br&gt;Обязательные параметры: &lt;br&gt;&lt;br&gt;&lt;b&gt;merchant&lt;/b&gt; - Имя входа продавца в системе платёжного шлюза. &lt;br&gt;Тип: AN..30 &lt;br&gt;&lt;br&gt;&lt;b&gt;orderNumber&lt;/b&gt; - Уникальный номер заказа на стороне продавца. &lt;br&gt;Тип: AN..32 &lt;br&gt;&lt;br&gt;&lt;b&gt;paymentToken&lt;/b&gt; - Токен, полученный от Google Pay и закодированный в Base64. &lt;br&gt;Тип: AN..8192 &lt;br&gt;&lt;br&gt;&lt;b&gt;amount&lt;/b&gt; - Сумма платежа в минимальный единицах валюты (например, в копейках). &lt;br&gt;Тип: N..20 &lt;br&gt;&lt;br&gt;&lt;b&gt;ip&lt;/b&gt; - IP-адрес плательщика. &lt;br&gt;Тип: ANS..39 &lt;br&gt;&lt;br&gt;&lt;b&gt;returnUrl&lt;/b&gt; - Адрес, на который требуется перенаправить пользователя в случае успешной оплаты. Адрес должен быть указан полностью, включая используемый протокол (например, https://test.ru вместо test.ru). &lt;br&gt;Тип: AN..512 &lt;br&gt;&lt;br&gt;&lt;br&gt;Дополнительные параметры: &lt;br&gt;&lt;br&gt;&lt;b&gt;description&lt;/b&gt; - Описание заказа. &lt;br&gt;Тип: AN..512 &lt;br&gt;&lt;br&gt;&lt;b&gt;language&lt;/b&gt; - Язык в кодировке ISO 639-1. Если не указан, будет использован язык, указанный в настройках магазина как язык по умолчанию. &lt;br&gt;Тип: A2 &lt;br&gt;&lt;br&gt;&lt;b&gt;additionalParameters&lt;/b&gt; - Дополнительные параметры заказа, которые сохраняются для просмотра из личного кабинета продавца. Их следует указывать в следующем формате: "имя1": "значение1", "имя2": "значение2". Каждую новую пару имени и значения параметра следует отделять запятой. &lt;br&gt;&lt;br&gt;&lt;b&gt;clientId&lt;/b&gt; - Номер клиента, для которого следует создать связку для проведения регулярных платежей. Следует указывать, только если проводится технический платёж для последующих регулярных платежей. &lt;br&gt;Тип: ANS..255 &lt;br&gt;&lt;br&gt;&lt;b&gt;preAuth&lt;/b&gt; - Параметр, определяющий необходимость предварительной авторизации (блокирования средств на счету клиента до их списания). &lt;br&gt;&lt;br&gt;Доступны следующие значения: &lt;br&gt;&lt;br&gt;true (истина) - параметр включён, оплата происходит с предавторизацией (происходит блокирование средств клиента до списания); &lt;br&gt;false (ложь) - параметр выключен (списание происходит сразу). &lt;br&gt;&lt;br&gt;Если параметр не указан в запросе, списание происходит сразу. &lt;br&gt;&lt;br&gt;&lt;b&gt;currencyCode&lt;/b&gt; - Цифровой код валюты платежа ISO 4217. Если не указан, считается равным 643 (российский рубль). &lt;br&gt;Тип: N3 &lt;br&gt;&lt;br&gt;&lt;b&gt;email&lt;/b&gt; - Адрес электронной почты. Обязателен, если у интернет-магазина настроена фискализация и не указан номер телефона. &lt;br&gt;Тип: ANS..40 &lt;br&gt;&lt;br&gt;&lt;b&gt;phone&lt;/b&gt; - Номер телефона. Обязателен, если у интернет-магазина настроена фискализация и не указан адрес электронной почты. &lt;br&gt;Тип: ANS.12 &lt;br&gt;&lt;br&gt;&lt;b&gt;failUrl&lt;/b&gt; - Адрес, на который требуется перенаправить пользователя в случае неуспешной оплаты. Адрес должен быть указан полностью, включая используемый протокол (например, https://test.ru вместо test.ru). &lt;br&gt;Тип: AN..512 &lt;br&gt;&lt;br&gt;&lt;b&gt;postAddress&lt;/b&gt; - Адрес доставки товара. &lt;br&gt;Тип: AN..512
        /// </remarks>
        /// <param name="request">request</param>
        /// <returns>OK</returns>
        /// <exception cref="AlfabankException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GooglePayResponse> GooglePaymentAsync(GooglePayRequest request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// ${mirPay.description}
        /// </summary>
        /// <remarks>
        /// ${mirPay.notes}
        /// </remarks>
        /// <param name="paymentRequest">paymentRequest</param>
        /// <returns>OK</returns>
        /// <exception cref="AlfabankException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<MirPayResponse> MirPayAsync(MirPayPaymentRequest paymentRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// ${mirPayDirect.description}
        /// </summary>
        /// <remarks>
        /// ${mirPayDirect.notes}
        /// </remarks>
        /// <param name="paymentRequest">paymentRequest</param>
        /// <returns>OK</returns>
        /// <exception cref="AlfabankException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<MirPayResponse> MirPayDirectAsync(MirPayPaymentRequest paymentRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// ${mirPayTokenCallback.description}
        /// </summary>
        /// <remarks>
        /// ${mirPayTokenCallback.notes}
        /// </remarks>
        /// <param name="request">request</param>
        /// <param name="merchantId">merchantId</param>
        /// <param name="orderId">orderId</param>
        /// <returns>OK</returns>
        /// <exception cref="AlfabankException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<MirPayResponse> MirPayTokenCallbackAsync(MirPayTokenCallbackRequest request, string merchantId, string orderId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// ${mirPayTokenCertificate.description}
        /// </summary>
        /// <remarks>
        /// ${mirPayTokenCertificate.notes}
        /// </remarks>
        /// <param name="request">request</param>
        /// <param name="merchantId">merchantId</param>
        /// <param name="orderId">orderId</param>
        /// <returns>OK</returns>
        /// <exception cref="AlfabankException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<MirPayResponse> MirPayTokenCertificateAsync(MirPayTokenCallbackRequest request, string merchantId, string orderId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns the payment schedule from PODELI service
        /// </summary>
        /// <remarks>
        /// The merchant must have permission to pay with "Podeli" service
        /// </remarks>
        /// <param name="request">request</param>
        /// <returns>OK</returns>
        /// <exception cref="AlfabankException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PodeliPaymentScheduleApiResponse> GetPaymentScheduleUsingPOSTAsync(PodeliPaymentScheduleApiRequest request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Registers the order in the "Podeli" service and returns a link to the payment in the service
        /// </summary>
        /// <remarks>
        /// The merchant must have permission to pay with "Podeli" service
        /// </remarks>
        /// <param name="request">request</param>
        /// <returns>OK</returns>
        /// <exception cref="AlfabankException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PodeliMerchantApiInitResponse> InitPaymentUsingPOSTAsync(PodeliMerchantApiInitRequest request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Запрос на проведения рекуррентного платежа.
        /// </summary>
        /// <remarks>
        /// Для проведения рекуррентного платежа используется запрос recurrentPayment.do. &lt;br&gt;&lt;br&gt;Указывается в виде списка JSON-параметров типа: "имя1": "значение1", "имя2": "значение2". &lt;br&gt;&lt;br&gt;Обязательные параметры: &lt;br&gt;&lt;br&gt;&lt;b&gt;userName&lt;/b&gt; - Имя пользователя с доступом к API платёжного шлюза. &lt;br&gt;Тип: AN..30 &lt;br&gt;&lt;br&gt;&lt;b&gt;password&lt;/b&gt; - Пароль пользователя с доступом к API платёжного шлюза. &lt;br&gt;Тип: AN..30 &lt;br&gt;&lt;br&gt;&lt;b&gt;orderNumber&lt;/b&gt; - Номер заказа. &lt;br&gt;Тип: AN..32 &lt;br&gt;&lt;br&gt;&lt;b&gt;amount&lt;/b&gt; - Сумма заказа в минимальных единицах валюты (например, в копейках). &lt;br&gt;Тип: N..20 &lt;br&gt;&lt;br&gt;&lt;b&gt;bindingId&lt;/b&gt; - Идентификатор связки. &lt;br&gt;Тип: AN..255 &lt;br&gt;&lt;br&gt;&lt;br&gt;Дополнительные параметры: &lt;br&gt;&lt;br&gt;&lt;b&gt;description&lt;/b&gt; - Описание заказа. &lt;br&gt;Тип: AN..512 &lt;br&gt;&lt;br&gt;&lt;b&gt;language&lt;/b&gt; - Язык в кодировке ISO 639-1. Если не указан, будет использован язык, указанный в настройках магазина как язык по умолчанию. &lt;br&gt;Тип: A2 &lt;br&gt;&lt;br&gt;&lt;b&gt;additionalParameters&lt;/b&gt; - Дополнительные параметры заказа, которые сохраняются для просмотра из личного кабинета продавца. Их следует указывать в следующем формате: "имя1": "значение1", "имя2": "значение2". Каждую новую пару имени и значения параметра следует отделять запятой. &lt;br&gt;&lt;br&gt;&lt;b&gt;clientId&lt;/b&gt; - Номер клиента, для которого следует создать связку для проведения регулярных платежей. Следует указывать, только если проводится технический платёж для последующих регулярных платежей. &lt;br&gt;Тип: ANS..255 &lt;br&gt;&lt;br&gt;&lt;b&gt;preAuth&lt;/b&gt; - Параметр, определяющий необходимость предварительной авторизации (блокирования средств на счету клиента до их списания). &lt;br&gt;&lt;br&gt;Доступны следующие значения: &lt;br&gt;true (истина) - параметр включён, оплата происходит с предавторизацией (происходит блокирование средств клиента до списания); &lt;br&gt;false (ложь) - параметр выключен (списание происходит сразу). &lt;br&gt;&lt;br&gt;Если параметр не указан в запросе, списание происходит сразу. &lt;br&gt;&lt;br&gt;&lt;b&gt;currency&lt;/b&gt; - Цифровой код валюты ISO 4217. &lt;br&gt;Тип: N3
        /// </remarks>
        /// <param name="recurrentPaymentRequest">recurrentPaymentRequest</param>
        /// <returns>OK</returns>
        /// <exception cref="AlfabankException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<RecurrentPaymentResponse> RecurrentPaymentAsync(RecurrentPaymentRequest recurrentPaymentRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Запрос добавления дополнительных параметров к заказу.
        /// </summary>
        /// <remarks>
        /// Для добавления дополнительных параметров к заказу используется запрос addParams.do.
        /// </remarks>
        /// <param name="userName">Логин магазина, полученный при подключении. &lt;br&gt;Тип: AN..30</param>
        /// <param name="password">Пароль магазина, полученный при подключении. &lt;br&gt;Тип: AN..30</param>
        /// <param name="orderId">Номер заказа в платежной системе. Уникален в пределах системы. &lt;br&gt;Тип: ANS36</param>
        /// <param name="params">Поля для передачи дополнительных параметров вида {"param":"value","param2":"value2"}.</param>
        /// <param name="language">Язык в кодировке ISO 639-1. Если не указан, будет использован язык, указанный в настройках магазина как язык по умолчанию (default language). &lt;br&gt;Тип: A2</param>
        /// <returns>OK</returns>
        /// <exception cref="AlfabankException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<OrderResult> AddParamsAsync(string userName, string password, string orderId, string @params, string? language = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Запрос активации связки.
        /// </summary>
        /// <remarks>
        /// Для активации связки используется запрос bindCard.do.
        /// </remarks>
        /// <param name="userName">Логин магазина, полученный при подключении. &lt;br&gt;Тип: AN..30</param>
        /// <param name="password">Пароль магазина, полученный при подключении. &lt;br&gt;Тип: AN..30</param>
        /// <param name="bindingId">Идентификатор связки созданной при оплате заказа или использованной для оплаты. Присутствует только если магазину разрешено создание связок. &lt;br&gt;Тип: AN..255</param>
        /// <param name="phone">Телефон клиента. Параметр обязателен для некоторых внешних хранилищ связок.</param>
        /// <param name="externalBindingId">Идентификатор связки во внешнем хранилище связок.</param>
        /// <param name="externalBindingSystem">Тип внешнего хранилища связок.</param>
        /// <param name="fingerprint">Данные об устройстве клиента. Параметр обязателен для некоторых внешних хранилищ связок.</param>
        /// <param name="language">Язык в кодировке ISO 639-1. Если не указан, будет использован язык, указанный в настройках магазина как язык по умолчанию. &lt;br&gt;Тип: A2</param>
        /// <returns>OK</returns>
        /// <exception cref="AlfabankException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<OrderResult> BindCardAsync(string userName, string password, string bindingId, string? phone = null, string? externalBindingId = null, string? externalBindingSystem = null, string? fingerprint = null, string? language = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Запрос отмены неоплаченного заказа.
        /// </summary>
        /// <remarks>
        /// Для отмены заказа используется запрос decline.do.
        /// </remarks>
        /// <param name="userName">Логин Api пользователя.</param>
        /// <param name="password">Пароль Api пользователя</param>
        /// <param name="language">Язык в кодировке ISO 639-1. Если не указан, будет использован язык, указанный в настройках магазина как язык по умолчанию.</param>
        /// <param name="merchantLogin">Логин магазина, полученный при подключении.</param>
        /// <param name="orderId">ID заказа. Уникален в пределах системы RBS.</param>
        /// <param name="orderNumber">Номер заказа. Уникален в пределах магазина.</param>
        /// <returns>OK</returns>
        /// <exception cref="AlfabankException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<OrderResult> DeclineOrderAsync(string userName, string password, string? language = null, string? merchantLogin = null, string? orderId = null, string? orderNumber = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Запрос отмены неоплаченного заказа.
        /// </summary>
        /// <remarks>
        /// Для отмены заказа используется запрос decline.do.
        /// </remarks>
        /// <param name="mdOrder">ID заказа. Уникален в пределах системы RBS.</param>
        /// <returns>OK</returns>
        /// <exception cref="AlfabankException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<OrderResult> DeclineOrderByClientAsync(string? mdOrder = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Запрос оплаты заказа.
        /// </summary>
        /// <remarks>
        /// Для оплаты заказа используется запрос deposit.do.
        /// </remarks>
        /// <param name="userName">Логин магазина, полученный при подключении. &lt;br&gt;Тип: AN..30</param>
        /// <param name="password">Пароль магазина, полученный при подключении. &lt;br&gt;Тип: AN..30</param>
        /// <param name="orderId">Номер заказа в платежной системе. Уникален в пределах системы. &lt;br&gt;Тип: ANS36</param>
        /// <param name="amount">Сумма списания в валюте заказа. Может быть меньше или равна сумме предавторизации. Не может быть меньше 1 рубля. &lt;br&gt;Тип: N..12</param>
        /// <param name="language">Язык в кодировке ISO 639-1. Если не указан, будет использован язык, указанный в настройках магазина как язык по умолчанию (default language). &lt;br&gt;Тип: A2</param>
        /// <param name="jsonParams">Блок с атрибутами дополнительных параметров мерчанта. &lt;br&gt;Формат вида: {"Имя1": "Значение1", "Имя2": "Значение2"}.</param>
        /// <param name="depositItems">Блок для передачи товарных позиций корзины для оплаты. &lt;br&gt;Пример: [{"positionId":1,"name":"Билет на 07.09.2017 17:30 Ряд 7 Место 7","quantity":{"value":1,"measure":"шт."},"itemCode":"14259","itemAmount":90000,"itemPrice":90000,"tax":{"taxType":0}}]</param>
        /// <param name="agent">Блок для передачи данных об агенте. &lt;br&gt;Формат вида: {"Имя1": "Значение1", "Имя2": "Значение2"}.</param>
        /// <param name="supplierPhones">Массив телефонов поставщика в формате +N. &lt;br&gt;Тип: массив ANS..19</param>
        /// <param name="depositType">Тип завершения, допустимые значения: &lt;br&gt;0 (или не указан) - обычный вариант завершения &lt;br&gt;1 - Частичное промежуточное завершение &lt;br&gt;2 - Финальное частичное завершение &lt;br&gt;</param>
        /// <param name="currency">Код валюты платежа ISO 4217.</param>
        /// <param name="multipleCompletionOrderDescription">Комментарий к промежуточному завершению (будет сохранен в доп. параметры).</param>
        /// <returns>OK</returns>
        /// <exception cref="AlfabankException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<OrderResult> DepositAsync(string userName, string password, string orderId, long amount, string? language = null, string? jsonParams = null, string? depositItems = null, string? agent = null, string? supplierPhones = null, long? depositType = null, string? currency = null, string? multipleCompletionOrderDescription = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Запрос изменения срока действия связки.
        /// </summary>
        /// <remarks>
        /// Для изменения срока действия связки используется запрос extendBinding.do.
        /// </remarks>
        /// <param name="userName">Логин магазина, полученный при подключении. &lt;br&gt;Тип: AN..30</param>
        /// <param name="password">Пароль магазина, полученный при подключении. &lt;br&gt;Тип: AN..30</param>
        /// <param name="bindingId">Идентификатор связки созданной при оплате заказа или использованной для оплаты. Присутствует только если магазину разрешено создание связок. &lt;br&gt;Тип: ANS36</param>
        /// <param name="newExpiry">Новая дата (год и месяц) окончания срока действия связки в формате YYYYMM. &lt;br&gt;Тип: N6</param>
        /// <param name="language">Язык в кодировке ISO 639-1. Если не указан, будет использован язык, указанный в настройках магазина как язык по умолчанию. &lt;br&gt;Тип: A2</param>
        /// <returns>OK</returns>
        /// <exception cref="AlfabankException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ExtendBindingResponse> ExtendBindingAsync(string userName, string password, string bindingId, string newExpiry, string? language = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Запрос передачи PARes от ACS
        /// </summary>
        /// <remarks>
        /// Для передачи PARes от ACS используется запрос finish3dsPayment.do.
        /// </remarks>
        /// <param name="userName">Логин магазина, полученный при подключении. &lt;br&gt;Тип: AN..30</param>
        /// <param name="password">Пароль магазина, полученный при подключении. &lt;br&gt;Тип: AN..30</param>
        /// <param name="mdOrder">Номер заказа, полученный при регистрации. &lt;br&gt;Тип: ANS36</param>
        /// <param name="paRes">Payer Authentication Response - ответ на идентификацию плательщика.</param>
        /// <returns>OK</returns>
        /// <exception cref="AlfabankException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PaymentFormResult> Finish3dsPaymentAsync(string userName, string password, string mdOrder, string paRes, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Запрос передачи PARes от ACS
        /// </summary>
        /// <remarks>
        /// Для передачи PARes от ACS используется запрос finish3dsPayment.do.
        /// </remarks>
        /// <param name="userName">Логин магазина, полученный при подключении. &lt;br&gt;Тип: AN..30</param>
        /// <param name="password">Пароль магазина, полученный при подключении. &lt;br&gt;Тип: AN..30</param>
        /// <param name="threeDSServerTransId">Идентификатор транзакции созданный на сервере 3DS. &lt;br&gt;Тип: ANS36</param>
        /// <param name="threeDSVer2MdOrder">Только для Google Pay платежей. Номер заказа, который был зарегистрирован в первой части запроса в рамках 3DS 2.0 операции. &lt;br&gt;Тип: ANS</param>
        /// <param name="threeDSVer2FinishUrl">Адрес finish3DSVer2, который переопределяет стандартный REST метод шлюза. &lt;br&gt;Тип: ANS</param>
        /// <param name="threeDSSDK">Признак, отражающий. используется ли SDK. True/False. &lt;br&gt;Тип: ANS</param>
        /// <param name="threeDSSDKEncData">Обязателен для SDK. Зашифрованные данные о мобильном устройстве. &lt;br&gt;Тип: ANS</param>
        /// <param name="threeDSSDKEphemPubKey">Обязателен для SDK. Публичная составляющая эфемерного ключа для установления сессии взаимодействия в ACS. &lt;br&gt;Тип: ANS</param>
        /// <param name="threeDSSDKAppId">Обязателен для SDK. Уникальный идентификатор SDK. &lt;br&gt;Тип: ANS</param>
        /// <param name="threeDSSDKTransId">Обязателен для SDK. Уникальный идентификатор транзакции внутри SDK. &lt;br&gt;Тип: ANS</param>
        /// <returns>OK</returns>
        /// <exception cref="AlfabankException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PaymentFormResult> Finish3dsVer2PaymentAsync(string userName, string password, string threeDSServerTransId, string? threeDSVer2MdOrder = null, string? threeDSVer2FinishUrl = null, string? threeDSSDK = null, string? threeDSSDKEncData = null, string? threeDSSDKEphemPubKey = null, string? threeDSSDKAppId = null, string? threeDSSDKTransId = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Запрос списка связок клиента с дубликатами.
        /// </summary>
        /// <remarks>
        /// Для получения списка всех связок клиента используется запрос getAllBindings.do.
        /// </remarks>
        /// <param name="userName">Логин магазина, полученный при подключении. &lt;br&gt;Тип: AN..30</param>
        /// <param name="password">Пароль магазина, полученный при подключении. &lt;br&gt;Тип: AN..30</param>
        /// <param name="clientId">Номер (идентификатор) клиента в системе магазина, переданный при регистрации заказа. Присутствует только если магазину разрешено создание связок. &lt;br&gt;Тип: ANS..255</param>
        /// <param name="bindingId">Идентификатор связки созданной при оплате заказа или использованной для оплаты. Присутствует только если магазину разрешено создание связок. &lt;br&gt;Тип: AN..255</param>
        /// <param name="bindingType">Тип связки для связок версии 2 и выше. При включенной опции мерчанта, разрешающей использовать связки V2 - обязателен. Возможные значения: C, I, R, где С - обычная связка, I - связка для рассрочки, R - для рекуррентов.</param>
        /// <param name="showExpired">Отображать ли связки с истёкшим сроком действия карты. &lt;br&gt;Возможные значения: true, false. По умолчанию параметр принимает значение false.</param>
        /// <param name="language">Язык в кодировке ISO 639-1. Если не указан, будет использован язык, указанный в настройках магазина как язык по умолчанию (default language). &lt;br&gt;Тип: A2</param>
        /// <param name="merchantLogin">Логин мерчанта, чьи связки необходимо получить в ответе</param>
        /// <returns>OK</returns>
        /// <exception cref="AlfabankException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetBindingsResponse> GetAllBindingsAsync(string userName, string password, string clientId, string? bindingId = null, string? bindingType = null, string? showExpired = null, string? language = null, string? merchantLogin = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Запрос списка связок клиента.
        /// </summary>
        /// <remarks>
        /// Для получения списка связок клиента используется запрос getBindings.do.
        /// </remarks>
        /// <param name="userName">Логин магазина, полученный при подключении. &lt;br&gt;Тип: AN..30</param>
        /// <param name="password">Пароль магазина, полученный при подключении. &lt;br&gt;Тип: AN..30</param>
        /// <param name="clientId">Номер (идентификатор) клиента в системе магазина, переданный при регистрации заказа. Присутствует только если магазину разрешено создание связок. &lt;br&gt;Тип: ANS..255</param>
        /// <param name="bindingId">Идентификатор связки созданной при оплате заказа или использованной для оплаты. Присутствует только если магазину разрешено создание связок. &lt;br&gt;Тип: AN..255</param>
        /// <param name="bindingType">Тип связки для связок версии 2 и выше. При включенной опции мерчанта, разрешающей использовать связки V2 - обязателен. Возможные значения: C, I, R, где С - обычная связка, I - связка для рассрочки, R - для рекуррентов.</param>
        /// <param name="showExpired">Отображать ли связки с истёкшим сроком действия карты. &lt;br&gt;Возможные значения: true, false. По умолчанию параметр принимает значение false.</param>
        /// <param name="language">Язык в кодировке ISO 639-1. Если не указан, будет использован язык, указанный в настройках магазина как язык по умолчанию (default language). &lt;br&gt;Тип: A2</param>
        /// <param name="merchantLogin">Логин мерчанта, чьи связки необходимо получить в ответе</param>
        /// <returns>OK</returns>
        /// <exception cref="AlfabankException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetBindingsResponse> GetBindingsAsync(string userName, string password, string clientId, string? bindingId = null, string? bindingType = null, string? showExpired = null, string? language = null, string? merchantLogin = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Запрос списка связок банковской карты.
        /// </summary>
        /// <remarks>
        /// Для получения списка связок банковской карты используется запрос getBindingsByCardOrId.do. Параметры pan и bindingId для выполнения запроса взаимозаменяемы, обязательно наличие одного из них.
        /// </remarks>
        /// <param name="userName">Логин магазина, полученный при подключении. &lt;br&gt;Тип: AN..30</param>
        /// <param name="password">Пароль магазина, полученный при подключении. &lt;br&gt;Тип: AN..30</param>
        /// <param name="pan">Номер карты. Обязательно, если не указан bindingId. Поиск по полному номеру карты доступен магазинам только при наличии соответствующего разрешения. &lt;br&gt;Тип: N..19</param>
        /// <param name="bindingId">Идентификатор связки. Обязательно, если не указан pan. Если в запросе передаётся pan, то значение bindingId игнорируется. &lt;br&gt;Тип: AN..255</param>
        /// <param name="showExpired">Параметр определяет необходимость отображать связки с истёкшим сроком действия карты. &lt;br&gt;Возможные значения: true, false. По умолчанию параметр принимает значение false.</param>
        /// <param name="language">Язык в кодировке ISO 639-1. Если не указан, будет использован язык, указанный в настройках магазина как язык по умолчанию. &lt;br&gt;Тип: A2</param>
        /// <param name="bindingType">Тип связки для связок версии 2 и выше. При включенной опции мерчанта, разрешающей использовать связки V2 - обязателен. Возможные значения: C, I, R, где С - обычная связка, I - связка для рассрочки, R - для рекуррентов.</param>
        /// <returns>OK</returns>
        /// <exception cref="AlfabankException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetBindingsResponse> GetBindingsByCardOrIdAsync(string userName, string password, string? pan = null, string? bindingId = null, string? showExpired = null, string? language = null, string? bindingType = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Запрос статистики по платежам за период.
        /// </summary>
        /// <remarks>
        /// Для запроса статистики по платежам за период используется запрос getLastOrdersForMerchants.do.
        /// </remarks>
        /// <param name="userName">Логин магазина, полученный при подключении. &lt;br&gt;Тип: AN..30</param>
        /// <param name="password">Пароль магазина, полученный при подключении. &lt;br&gt;Тип: AN..30</param>
        /// <param name="size">Количество элементов на странице (максимальное значение = 200). &lt;br&gt;Тип: N..3</param>
        /// <param name="from">Дата и время начала периода для выборки заказов в формате yyyyMMddHHmmss. &lt;br&gt;Тип: ANS</param>
        /// <param name="to">Дата и время окончания периода для выборки заказов в формате yyyyMMddHHmmss. &lt;br&gt;Тип: ANS</param>
        /// <param name="transactionStates">В этом блоке необходимо перечислить требуемые состояния заказов. Только заказы, находящиеся в одном из указанных состояний, попадут в отчёт. &lt;br&gt;Возможные значения: CREATED, APPROVED, DEPOSITED, DECLINED, REVERSED, REFUNDED. &lt;br&gt;Тип: A..9</param>
        /// <param name="merchants">Список Логинов мерчантов, чьи транзакции должны попасть в отчёт. Оставьте этот блок пустым, чтобы получить список отчётов по всем доступным мерчантам (дочерним мерчантам и мерчантам, указанным в настройках пользователя). &lt;br&gt;Тип: ANS</param>
        /// <param name="page">При обработке запроса будет сформирован список, разбитый на страницы (с количеством записей size на одной странице). В ответе возвращается страница под номером, указанным в параметре page. Нумерация страниц начинается с 0. Если параметр не указан, будет возвращена страница под номером 0. &lt;br&gt;Тип: N</param>
        /// <param name="searchByCreatedDate">Возможные значения: &lt;br&gt;true – поиск заказов, дата создания которых попадает в заданный период. &lt;br&gt;false – поиск заказов, дата оплаты которых попадает в заданный период (таким образом, в отчёте не могут присутствовать заказы в статусе CREATED и DECLINED). &lt;br&gt;Значение по умолчанию – false.</param>
        /// <param name="language">Язык в кодировке ISO 639-1. Если не указан, считается, что язык – русский. Сообщение ошибке будет возвращено именно на этом языке. &lt;br&gt;Тип: A2</param>
        /// <returns>OK</returns>
        /// <exception cref="AlfabankException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetLastOrdersForMerchantsResponse> GetLastOrdersForMerchantsAsync(string userName, string password, string size, string from, string to, string transactionStates, string merchants, string? page = null, string? searchByCreatedDate = null, string? language = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Запрос состояния зарегистрированного заказа.
        /// </summary>
        /// <remarks>
        /// Запрос состояния зарегистрированного заказа. Параметры orderId и orderNumber для выполнения запроса взаимозаменяемы, обязательно наличие одного из них.
        /// </remarks>
        /// <param name="userName">Логин магазина, полученный при подключении. &lt;br&gt;Тип: AN..30</param>
        /// <param name="password">Пароль магазина, полученный при подключении. &lt;br&gt;Тип: AN..30</param>
        /// <param name="orderId">Номер заказа в платежной системе. Уникален в пределах системы. &lt;br&gt;Тип: ANS36</param>
        /// <param name="orderNumber">Номер (идентификатор) заказа в системе магазина. &lt;br&gt;Тип: AN..32</param>
        /// <param name="token">Авторизационный токен. Если представлен, то необходимо указать orderId. &lt;br&gt;Тип: AN..32</param>
        /// <param name="language">Язык в кодировке ISO 639-1. Если не указан, считается, что язык – русский. Сообщение ошибке будет возвращено именно на этом языке. &lt;br&gt;Тип: A2</param>
        /// <param name="merchantLogin">Логин продавца. &lt;br&gt;Тип: AN..100</param>
        /// <returns>OK</returns>
        /// <exception cref="AlfabankException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetOrderStatusExtendedResponse> GetOrderStatusExtendedAsync(string userName, string password, string? orderId = null, string? orderNumber = null, string? token = null, string? language = null, string? merchantLogin = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Запрос проведения регистрации и оплаты заказа.
        /// </summary>
        /// <remarks>
        /// Используется для совершения регистрации заказа и его последующей оплаты в рамках одно запроса.
        /// </remarks>
        /// <param name="amount">Сумма списания в валюте заказа. &lt;br&gt;Тип: N..12</param>
        /// <param name="userName">Логин магазина, полученный при подключении. Если вместо аутентификации по логину и паролю используется открытый токен (параметр token), параметр userName передавать не нужно. &lt;br&gt;Тип: AN..30</param>
        /// <param name="password">Пароль магазина, полученный при подключении. Если для аутентификации при регистрации вместо логина и пароля используется открытый токен (параметр token), параметр password передавать не нужно. &lt;br&gt;Тип: AN..30</param>
        /// <param name="token">Открытый ключ, который можно использовать для регистрации заказа. Если для аутентификации при регистрации заказа используются логин и пароль, параметр token передавать не нужно. &lt;br&gt;Тип: AN..30</param>
        /// <param name="currency">Код валюты платежа ISO 4217. Если не указан, считается равным коду валюты по умолчанию. &lt;br&gt;Тип: N3</param>
        /// <param name="clientId">Номер (идентификатор) клиента в системе магазина, переданный при регистрации заказа. Присутствует только если магазину разрешено создание связок. &lt;br&gt;Тип: ANS..255</param>
        /// <param name="ip">ip-адрес плательщика. &lt;br&gt;Тип: ANS..39</param>
        /// <param name="email">Адрес электронной почты плательщика. &lt;br&gt;Тип: ANS..40</param>
        /// <param name="phone">Телефон плательщика</param>
        /// <param name="bindingNotNeeded">Запрет на создание связки после платежа (идентификатор клиента, переданный при регистрации заказа, после совершения платежа будет удалён из деталей заказа). &lt;br&gt;Тип: boolean</param>
        /// <param name="orderNumber">Номер (идентификатор) заказа в системе магазина, уникален для каждого магазина в пределах системы. &lt;br&gt;Тип: AN..32</param>
        /// <param name="description">Описание заказа в свободной форме. &lt;br&gt;Тип: ANS..598</param>
        /// <param name="language">Язык в кодировке ISO 639-1. Если не указан, будет использован язык, указанный в настройках магазина как язык по умолчанию. &lt;br&gt;Тип: A2</param>
        /// <param name="preAuth">Параметр, определяющий необходимость предварительной авторизации (блокирования средств на счету клиента до их списания). &lt;br&gt;Тип: boolean</param>
        /// <param name="seToken">Параметр должен содержать шифрованное значение платежных данных введенных клиентом на стороне ТСП.</param>
        /// <param name="bindingId">Идентификатор связки созданной при оплате заказа или использованной для оплаты. Присутствует только если магазину разрешено создание связок. &lt;br&gt;Тип: AN..255</param>
        /// <param name="pan">Номер карты. &lt;br&gt;Тип: N12...19</param>
        /// <param name="cvc">CVC код. Этот параметр обязателен, если для мерчанта не выбрано разрешение "Может проводить оплату без подтверждения CVC". &lt;br&gt;Тип: N..3</param>
        /// <param name="expiry">Дата (год и месяц) окончания срока действия связки в формате YYYYMM. &lt;br&gt;Тип: N6</param>
        /// <param name="cardHolderName">Имя держателя карты. Указан только после оплаты заказа.</param>
        /// <param name="merchantLogin">Чтобы зарегистрировать заказ от имени дочернего мерчанта, укажите его логин в этом параметре. &lt;br&gt;Тип: AN..255</param>
        /// <param name="sessionTimeoutSecs">Максимальная Продолжительность сессии (сек.)</param>
        /// <param name="expirationDate">Дата и время окончания жизни заказа. Формат: yyyy-MM-dd'T'HH:mm:ss. &lt;br&gt;Если этот параметр не передаётся в запросе, то для определения времени окончания жизни заказа используется sessionTimeoutSecs. &lt;br&gt;Тип: ANS</param>
        /// <param name="backUrl">Адрес, на который требуется перенаправить пользователя в случае успешной оплаты. &lt;br&gt;Должен быть указан полностью, включая используемый протокол (например, https://test.ru вместо test.ru). &lt;br&gt;В противном случае пользователь будет перенаправлен по адресу следующего вида: http://&lt;адрес_платёжного_шлюза&gt;/&lt;адрес_продавца&gt;. &lt;br&gt;Тип: AN..512</param>
        /// <param name="failUrl">Адрес, на который требуется перенаправить пользователя в случае неуспешной оплаты. &lt;br&gt;Должен быть указан полностью, включая используемый протокол (например, https://test.ru вместо test.ru). &lt;br&gt;В противном случае пользователь будет перенаправлен по адресу следующего вида: http://&lt;адрес_платёжного_шлюза&gt;/&lt;адрес_продавца&gt;. &lt;br&gt;Тип: AN..512</param>
        /// <param name="jsonParams">Блок для передачи дополнительных параметров. &lt;br&gt;Формат вида: {"Имя1": "Значение1", "Имя2": "Значение2"}. &lt;br&gt;Тип: имя - ANS..255 байт, значение - ANS..1024 байт</param>
        /// <param name="features">Возможно использование, например таких значений, как: &lt;br&gt;AUTO_PAYMENT - Если запрос на регистрацию заказа инициирует проведение автоплатежей. &lt;br&gt;VERIFY - Если указать это значение после запроса на регистрацию заказа произойдёт верификация держателя карты без списания средств с его счёта.</param>
        /// <param name="orderBundle">Корзина товаров заказа. &lt;br&gt;&lt;br&gt;</param>
        /// <param name="additionalOfdParams">Блок дополнительных параметров для ОФД. &lt;br&gt;Пример: &lt;br&gt;{ &lt;br&gt;"agent_info.type": "7", &lt;br&gt;"agent_info.paying.operation": "Наименование операции ма", &lt;br&gt;"agent_info.paying.phones": "+71111111111", &lt;br&gt;"agent_info.paymentsOperator.phones": "+72222222222", &lt;br&gt;"agent_info.MTOperator.address": "Адрес оператора перевода", &lt;br&gt;"agent_info.MTOperator.inn": "169910020020", &lt;br&gt;"agent_info.MTOperator.name": "Наименование оператора перевода", &lt;br&gt;"agent_info.MTOperator.phones": "+73333333333", &lt;br&gt;"supplier_info.phones": "+74444444444", &lt;br&gt;"cashier": "ФИО кассира" &lt;br&gt;"additional_check_props": "09090909", &lt;br&gt;"additional_user_props.name": "Наименование дополнительного реквизита пользователя", &lt;br&gt;"additional_user_props.value": "Значение дополнительного реквизита пользователя", &lt;br&gt;}</param>
        /// <param name="dynamicCallbackUrl">Адрес для callback вызовов (необходима дополнительная настройка мерчанта).</param>
        /// <param name="threeDSServerTransId">Параметр указывающий идентификатор заказа в рамках 3DS 2.0 операции.</param>
        /// <param name="threeDSVer2FinishUrl">Адрес, на который требуется перенаправить пользователя перед finish3dsVer2.do в рамках 3DS 2.0 операции.</param>
        /// <param name="threeDSMethodNotificationUrl">Адрес для отправки уведомления о прохождении проверки 3D Secure.</param>
        /// <param name="threeDSVer2MdOrder">Номер заказа, который был зарегистрирован в первой части запроса в рамках 3DS 2.0 операции.</param>
        /// <param name="billingPayerData">Регистрационный адрес клиента, заданный при регистрации карты в Банке Эмитенте.</param>
        /// <param name="shippingPayerData">Данные доставки клиента.</param>
        /// <param name="preOrderPayerData">Данные предзаказа.</param>
        /// <param name="orderPayerData">Данные заказа.</param>
        /// <param name="billingAndShippingAddressMatchIndicator">Индикатор совпадения адреса держателя карты для выставления счета и адреса доставки.</param>
        /// <param name="tii">Тип проводимой операции со стороны инициатора (Transaction Initiator Indicator).</param>
        /// <param name="originalPaymentNetRefNum">Идентификатор оригинальной или предыдущей успешной транзакции в платежной системе по отношению к выполняемой операции по связке.</param>
        /// <param name="originalPaymentDate">Дата/время совершения оригинальной операции (в миллисекундах).</param>
        /// <param name="externalScaExemptionIndicator">Значение PSD Exemption.</param>
        /// <param name="autoReverseDate">Дата автоотмены. &lt;br&gt;</param>
        /// <param name="autocompletionDate">Дата автозавершения. &lt;br&gt;</param>
        /// <param name="sbpTemplateId">Идентификатор шаблона для оплаты через кассовые ссылки СБП.</param>
        /// <param name="dccData">${instantPayment.req.param.dccData.description}</param>
        /// <param name="clientBrowserInfo">Объект с инофрмацией о браузере клиентаПример: &lt;br&gt;{ &lt;br&gt;"userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/111.0.0.0 Safari/537.36 Edg/111.0.1661.41", &lt;br&gt;"fingerprint":850891523, &lt;br&gt;"OS":"Windows", &lt;br&gt;"OSVersion":"10", &lt;br&gt;"isMobile":false, &lt;br&gt;"screenPrint":"Current Resolution: 1536x864, Available Resolution: 1536x824, Color Depth: 24, Device XDPI: undefined, Device YDPI: undefined", &lt;br&gt;"colorDepth":24, &lt;br&gt;"screenHeight":"864", &lt;br&gt;"screenWidth":"1536", &lt;br&gt;"plugins":"PDF Viewer, Chrome PDF Viewer, Chromium PDF Viewer, Microsoft Edge PDF Viewer, WebKit built-in PDF", &lt;br&gt;"javaEnabled":false, &lt;br&gt;"javascriptEnabled":true, &lt;br&gt;"browserLanguage":"en-US", &lt;br&gt;"browserTimeZone":"Europe/Moscow", &lt;br&gt;"browserTimeZoneOffset":-180, &lt;br&gt;"browserAcceptHeader":"*/*", &lt;br&gt;"device":"device", &lt;br&gt;"deviceType":"type", &lt;br&gt;"browserIpAddress":"10.99.50.37" &lt;br&gt;}</param>
        /// <returns>OK</returns>
        /// <exception cref="AlfabankException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PaymentFormResult> InstantPaymentAsync(string amount, string? userName = null, string? password = null, string? token = null, string? currency = null, string? clientId = null, string? ip = null, string? email = null, string? phone = null, string? bindingNotNeeded = null, string? orderNumber = null, string? description = null, string? language = null, string? preAuth = null, string? seToken = null, string? bindingId = null, string? pan = null, string? cvc = null, string? expiry = null, string? cardHolderName = null, string? merchantLogin = null, string? sessionTimeoutSecs = null, string? expirationDate = null, string? backUrl = null, string? failUrl = null, string? jsonParams = null, string? features = null, string? orderBundle = null, string? additionalOfdParams = null, string? dynamicCallbackUrl = null, string? threeDSServerTransId = null, string? threeDSVer2FinishUrl = null, string? threeDSMethodNotificationUrl = null, string? threeDSVer2MdOrder = null, string? billingPayerData = null, string? shippingPayerData = null, string? preOrderPayerData = null, string? orderPayerData = null, string? billingAndShippingAddressMatchIndicator = null, string? tii = null, string? originalPaymentNetRefNum = null, string? originalPaymentDate = null, string? externalScaExemptionIndicator = null, string? autoReverseDate = null, string? autocompletionDate = null, string? sbpTemplateId = null, string? dccData = null, string? clientBrowserInfo = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Запрос возврата по устаревшему заказу более 2 лет.
        /// </summary>
        /// <remarks>
        /// Может содержать или bindingid, или параметры карты, или SEToken, параметр currency циферный, orderNumber может не передаваться при опции генерации его у мерчанта, метод требует пермиссии мерчанта.
        /// </remarks>
        /// <param name="password">Пароль магазина, полученный при подключении. Если для аутентификации при регистрации вместо логина и пароля используется открытый токен (параметр token), параметр password передавать не нужно. &lt;br&gt;Тип: AN..30</param>
        /// <param name="amount">Сумма списания в валюте заказа. &lt;br&gt;Тип: N..12</param>
        /// <param name="userName">Логин магазина, полученный при подключении. Если вместо аутентификации по логину и паролю используется открытый токен (параметр token), параметр userName передавать не нужно. &lt;br&gt;Тип: AN..30</param>
        /// <param name="seToken">Параметр должен содержать шифрованное значение платежных данных введенных клиентом на стороне ТСП.</param>
        /// <param name="bindingId">Идентификатор связки созданной при оплате заказа или использованной для оплаты. Присутствует только если магазину разрешено создание связок. &lt;br&gt;Тип: AN..255</param>
        /// <param name="pan">Номер карты. &lt;br&gt;Тип: N12...19</param>
        /// <param name="cvc">CVC код. Этот параметр обязателен, если для мерчанта не выбрано разрешение "Может проводить оплату без подтверждения CVC". &lt;br&gt;Тип: N..3</param>
        /// <param name="expiry">Дата (год и месяц) окончания срока действия связки в формате YYYYMM. &lt;br&gt;Тип: N6</param>
        /// <param name="cardHolderName">Имя держателя карты. Указан только после оплаты заказа.</param>
        /// <param name="currency">Код валюты платежа ISO 4217. Если не указан, считается равным коду валюты по умолчанию. &lt;br&gt;Тип: N3</param>
        /// <param name="jsonParams">Блок для передачи дополнительных параметров. &lt;br&gt;Формат вида: {"Имя1": "Значение1", "Имя2": "Значение2"}. &lt;br&gt;Тип: имя - ANS..255 байт, значение - ANS..1024 байт</param>
        /// <param name="language">Язык в кодировке ISO 639-1. Если не указан, будет использован язык, указанный в настройках магазина как язык по умолчанию. &lt;br&gt;Тип: A2</param>
        /// <param name="orderNumber">Номер (идентификатор) заказа в системе магазина, уникален для каждого магазина в пределах системы. &lt;br&gt;Тип: AN..32</param>
        /// <returns>OK</returns>
        /// <exception cref="AlfabankException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<OrderResult> InstantRefundAsync(string password, string amount, string userName, string? seToken = null, string? bindingId = null, string? pan = null, string? cvc = null, string? expiry = null, string? cardHolderName = null, string? currency = null, string? jsonParams = null, string? language = null, string? orderNumber = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Мото платеж.
        /// </summary>
        /// <remarks>
        /// Регистрация заказа и его оплата. без 3DS - всегда SSL.
        /// </remarks>
        /// <param name="amount">Сумма платежа в копейках (или центах). &lt;br&gt;Тип: N..12</param>
        /// <param name="returnUrl">Адрес, на который требуется перенаправить пользователя в случае успешной оплаты. &lt;br&gt;Должен быть указан полностью, включая используемый протокол (например, https://test.ru вместо test.ru). &lt;br&gt;В противном случае пользователь будет перенаправлен по адресу следующего вида: http://&lt;адрес_платёжного_шлюза&gt;/&lt;адрес_продавца&gt;. &lt;br&gt;Тип: AN..512</param>
        /// <param name="pan">Номер карты. &lt;br&gt;Тип: N12...19</param>
        /// <param name="expiry">Дата (год и месяц) окончания срока действия карты. &lt;br&gt;Тип: N6</param>
        /// <param name="cardholder">Имя держателя карты.</param>
        /// <param name="autoReverseDate">autoReverseDate</param>
        /// <param name="autocompletionDate">autocompletionDate</param>
        /// <param name="userName">Логин магазина, полученный при подключении. Если вместо аутентификации по логину и паролю используется открытый токен (параметр token), параметр userName передавать не нужно. &lt;br&gt;Тип: AN..30</param>
        /// <param name="password">Пароль магазина, полученный при подключении. Если для аутентификации при регистрации вместо логина и пароля используется открытый токен (параметр token), параметр password передавать не нужно. &lt;br&gt;Тип: AN..30</param>
        /// <param name="token">Открытый ключ, который можно использовать для регистрации заказа. Если для аутентификации при регистрации заказа используются логин и пароль, параметр token передавать не нужно. &lt;br&gt;Тип: AN..30</param>
        /// <param name="orderNumber">Номер (идентификатор) заказа в системе магазина, уникален для каждого магазина в пределах системы. &lt;br&gt;Тип: AN..32</param>
        /// <param name="currency">Код валюты платежа ISO 4217. Если не указан, считается равным коду валюты по умолчанию. &lt;br&gt;Тип: N3</param>
        /// <param name="failUrl">Адрес, на который требуется перенаправить пользователя в случае неуспешной оплаты. &lt;br&gt;Должен быть указан полностью, включая используемый протокол (например, https://test.ru вместо test.ru). &lt;br&gt;В противном случае пользователь будет перенаправлен по адресу следующего вида: http://&lt;адрес_платёжного_шлюза&gt;/&lt;адрес_продавца&gt;. &lt;br&gt;Тип: AN..512</param>
        /// <param name="description">Описание заказа в свободной форме. &lt;br&gt;Тип: ANS..598</param>
        /// <param name="language">Язык в кодировке ISO 639-1. Если не указан, будет использован язык, указанный в настройках магазина как язык по умолчанию (default language). &lt;br&gt;Тип: ANS..39</param>
        /// <param name="clientId">Номер (идентификатор) клиента в системе магазина. Используется для реализации функционала связок. Может присутствовать, если магазину разрешено создание связок. &lt;br&gt;Тип: ANS..255</param>
        /// <param name="merchantLogin">Чтобы зарегистрировать заказ от имени дочернего мерчанта, укажите его логин в этом параметре. &lt;br&gt;Тип: AN..255</param>
        /// <param name="email">Адрес электронной почты покупателя. &lt;br&gt;Тип: ANS..40</param>
        /// <param name="postAddress">Адрес доставки. &lt;br&gt;Тип: ANS..598</param>
        /// <param name="jsonParams">Блок для передачи дополнительных параметров мерчанта. &lt;br&gt;Формат вида: {"Имя1": "Значение1", "Имя2": "Значение2"}. &lt;br&gt;Тип: имя - ANS..255 байт, значение - ANS..1024 байт</param>
        /// <param name="features">Возможно использование следующих значений: &lt;br&gt;AUTO_PAYMENT - Если запрос на регистрацию заказа инициирует проведение автоплатежей. &lt;br&gt;VERIFY - Если указать это значение после запроса на регистрацию заказа произойдёт верификация держателя карты без списания средств с его счёта, поэтому в запросе можно передавать нулевую сумму.</param>
        /// <param name="dynamicCallbackUrl">Адрес для callback вызовов (необходима дополнительная настройка мерчанта).</param>
        /// <param name="billingPayerData">Регистрационный адрес клиента, заданный при регистрации карты в Банке Эмитенте.</param>
        /// <param name="shippingPayerData">Данные доставки клиента.</param>
        /// <param name="preOrderPayerData">Данные предзаказа.</param>
        /// <param name="orderPayerData">Данные заказа.</param>
        /// <param name="billingAndShippingAddressMatchIndicator">Индикатор совпадения адреса держателя карты для выставления счета и адреса доставки.</param>
        /// <param name="ip">IP-адрес покупателя. &lt;br&gt;Тип: ANS..39</param>
        /// <param name="preAuth">Параметр, определяющий необходимость предварительной авторизации (блокирования средств на счету клиента до их списания). &lt;br&gt;Тип: boolean</param>
        /// <param name="cvc">CVC код. &lt;br&gt;Тип: N..3</param>
        /// <returns>OK</returns>
        /// <exception cref="AlfabankException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<MotoPaymentResponse> MotoPaymentAsync(long amount, string returnUrl, string pan, string expiry, string cardholder, string? autoReverseDate = null, string? autocompletionDate = null, string? userName = null, string? password = null, string? token = null, string? orderNumber = null, long? currency = null, string? failUrl = null, string? description = null, string? language = null, string? clientId = null, string? merchantLogin = null, string? email = null, string? postAddress = null, string? jsonParams = null, Features? features = null, string? dynamicCallbackUrl = null, string? billingPayerData = null, string? shippingPayerData = null, string? preOrderPayerData = null, string? orderPayerData = null, string? billingAndShippingAddressMatchIndicator = null, string? ip = null, string? preAuth = null, string? cvc = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Запрос проведения платежа по связке.
        /// </summary>
        /// <remarks>
        /// Для проведения платежа по связке используется запрос paymentOrderBinding.do.
        /// </remarks>
        /// <param name="userName">Логин магазина, полученный при подключении. &lt;br&gt;Тип: AN..30</param>
        /// <param name="password">Пароль магазина, полученный при подключении. &lt;br&gt;Тип: AN..30</param>
        /// <param name="mdOrder">Номер заказа в платежной системе. Уникален в пределах системы. &lt;br&gt;Тип: ANS36</param>
        /// <param name="bindingId">Идентификатор связки созданной при оплате заказа или использованной для оплаты. Присутствует только если магазину разрешено создание связок. &lt;br&gt;Тип: AN..255</param>
        /// <param name="ip">ip-адрес плательщика. &lt;br&gt;Тип: ANS..39</param>
        /// <param name="language">Язык в кодировке ISO 639-1. Если не указан, будет использован язык, указанный в настройках магазина как язык по умолчанию. &lt;br&gt;Тип: A2</param>
        /// <param name="cvc">CVC код. Этот параметр обязателен, если для мерчанта не выбрано разрешение "Может проводить оплату без подтверждения CVC". &lt;br&gt;Тип: N..3</param>
        /// <param name="email">Адрес электронной почты плательщика. &lt;br&gt;Тип: ANS..40</param>
        /// <param name="seToken">SeToken, Параметр должен содержать шифрованное значение платежных данных введенных клиентом на стороне ТСП.</param>
        /// <returns>OK</returns>
        /// <exception cref="AlfabankException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PaymentFormResult> PaymentOrderBindingAsync(string userName, string password, string mdOrder, string bindingId, string ip, string? language = null, string? cvc = null, string? email = null, string? seToken = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Запрос оплаты с авторизацией
        /// </summary>
        /// <remarks>
        /// Для оплаты с авторизацией используется запрос paymentOrder.do.
        /// </remarks>
        /// <param name="userName">Логин магазина, полученный при подключении. &lt;br&gt;Тип: AN..30</param>
        /// <param name="password">Пароль магазина, полученный при подключении. &lt;br&gt;Тип: AN..30</param>
        /// <param name="mDORDER">Номер заказа, полученный при регистрации. &lt;br&gt;Тип: ANS36</param>
        /// <param name="tEXT">Cardholder. &lt;br&gt;Тип: A..512</param>
        /// <param name="language">Язык ответа. &lt;br&gt;Тип: A..2</param>
        /// <param name="ip">IP-адрес пользователя, который оплачивал заказ (IPv6 поддерживается во всех запросах). &lt;br&gt;Тип: ANS..39</param>
        /// <param name="pAN">Номер платёжной карты. Этот параметр не обязателен, если оплата внешней связкой СБП. &lt;br&gt;Тип: N..19</param>
        /// <param name="cVC">CVC. Этот параметр не обязателен, если оплата внешней связкой СБП. &lt;br&gt;Тип: N..3</param>
        /// <param name="yYYY">Год. Этот параметр не обязателен, если оплата внешней связкой СБП. &lt;br&gt;Тип: N..4</param>
        /// <param name="mM">Месяц. Этот параметр не обязателен, если оплата внешней связкой СБП. &lt;br&gt;Тип: N..2</param>
        /// <param name="email">Адрес электронной почты плательщика. Если в настройках мерчанта предусмотрена отправка клиентам уведомлений об операциях с заказом, то этот параметр должен присутствовать. &lt;br&gt;Тип: ANS..*</param>
        /// <param name="bindingNotNeeded">Возможные значения: &lt;br&gt;true – запрет на создание связки после платежа (идентификатор клиента, переданный при регистрации заказа, после совершения платежа будет удалён из деталей заказа); &lt;br&gt;false – в результате успешной оплаты может быть создана связка (при выполнении соответствующих условий). Это значение является значением по умолчанию. &lt;br&gt;Тип: boolean</param>
        /// <param name="jsonParams">Поля дополнительной информации для последующего хранения, вида {"param":"value","param2":"value2"}. Данные поля могут быть переданы в процессинг банка для последующего отображения в реестрах. &lt;br&gt;По умолчанию в процессинг банка передаются поля номер заказа orderNumber и его описание description (не более 99 символов, запрещены к использованию %, +, конец строки  и перенос строки 
        /// <br/>). &lt;br&gt;Включение данного функционала возможно по согласованию с банком в период интеграции. &lt;br&gt;Если вы хотите принимать оплату рассрочкой, и выполняли запрос get для получения сведений о доступных вариантах рассрочки, в качестве дополнительный параметров следует передать содержимое блока installmentsProposals из того запроса. &lt;br&gt;Тип: AN..1024</param>
        /// <param name="threeDSSDK">Флаг прохождения платежа через 3DS SDK. Допустимые значения: true или false. &lt;br&gt;Тип: boolean</param>
        /// <param name="billingPayerData">Блок c регистрационными данными клиента (адрес, почтовый индекс), необходимыми для прохождения проверки адреса в рамках сервисов AVS/AVV. &lt;br&gt;Тип: object</param>
        /// <param name="sbpSubscriptionToken">Уникальный идентификатор привязки счета Плательщика в другом эквайере. Этот параметр обязателен, если оплата внешней связкой СБП. &lt;br&gt;Тип: ANS..32</param>
        /// <param name="sbpMemberId">Идентификатор Банка эквайера. Этот параметр обязателен, если оплата внешней связкой СБП. &lt;br&gt;Тип: ANS..12</param>
        /// <returns>OK</returns>
        /// <exception cref="AlfabankException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PaymentFormResult> PaymentOrderAsync(string userName, string password, string mDORDER, string tEXT, string language, string ip, string? pAN = null, string? cVC = null, string? yYYY = null, string? mM = null, string? email = null, string? bindingNotNeeded = null, string? jsonParams = null, string? threeDSSDK = null, string? billingPayerData = null, string? sbpSubscriptionToken = null, string? sbpMemberId = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Запрос оплаты через внешнюю платёжную систему.
        /// </summary>
        /// <remarks>
        /// Для оплаты через внешнюю платёжную систему используется запрос paymentOtherWay.do.
        /// </remarks>
        /// <param name="userName">Логин магазина, полученный при подключении. &lt;br&gt;Тип: AN..30</param>
        /// <param name="password">Пароль магазина, полученный при подключении. &lt;br&gt;Тип: AN..30</param>
        /// <param name="paymentWay">В этом параметре передаётся способ оплаты. &lt;br&gt;Тип: ANS..14</param>
        /// <param name="mDORDER">Номер заказа, полученный при регистрации. &lt;br&gt;Тип: ANS36</param>
        /// <returns>OK</returns>
        /// <exception cref="AlfabankException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PaymentFormResult> PaymentOtherWayAsync(string userName, string password, string paymentWay, string mDORDER, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Запрос возврата средств.
        /// </summary>
        /// <remarks>
        /// Для возврата средств используется запрос refund.do.
        /// </remarks>
        /// <param name="userName">Логин магазина, полученный при подключении. &lt;br&gt;Тип: AN..30</param>
        /// <param name="password">Пароль магазина, полученный при подключении. &lt;br&gt;Тип: AN..30</param>
        /// <param name="orderId">Номер заказа в платежной системе. Уникален в пределах системы. &lt;br&gt;Тип: ANS36</param>
        /// <param name="amount">Сумма возврата в валюте заказа. Может быть меньше или равна остатку в заказе. &lt;br&gt;Тип: N..12</param>
        /// <param name="expectedDepositedAmount">Опциональный параметр, содержит сумму, равную amount. Служит индикатором того, что один и тот же запрос на возврат средств не будет обработан несколько раз. &lt;br&gt;Тип: N..20</param>
        /// <param name="language">Язык в кодировке ISO 639-1. Если не указан, будет использован язык, указанный в настройках магазина как язык по умолчанию (default language). &lt;br&gt;Тип: A2</param>
        /// <param name="jsonParams">Блок с атрибутами дополнительных параметров мерчанта. &lt;br&gt;Поля дополнительной информации для последующего хранения, передаются в виде: {"Имя1": "Значение1", "Имя2": "Значение2"}</param>
        /// <param name="refundItems">Блок для передачи товарных позиций корзины для оплаты. &lt;br&gt;&lt;br&gt;Пример: [{"positionId":1,"name":"Билет на 07.09.2017 17:30 Ряд 7 Место 7","quantity":{"value":1,"measure":"шт."},"itemCode":"14259","itemAmount":90000,"itemPrice":90000,"tax":{"taxType":0}}]</param>
        /// <param name="additionalOfdParams">Блок дополнительных параметров для ОФД. &lt;br&gt;Пример: &lt;br&gt;{ &lt;br&gt;"agent_info.type": "7", &lt;br&gt;"agent_info.paying.operation": "Наименование операции ма", &lt;br&gt;"agent_info.paying.phones": "+71111111111", &lt;br&gt;"agent_info.paymentsOperator.phones": "+72222222222", &lt;br&gt;"agent_info.MTOperator.address": "Адрес оператора перевода", &lt;br&gt;"agent_info.MTOperator.inn": "169910020020", &lt;br&gt;"agent_info.MTOperator.name": "Наименование оператора перевода", &lt;br&gt;"agent_info.MTOperator.phones": "+73333333333", &lt;br&gt;"supplier_info.phones": "+74444444444", &lt;br&gt;"cashier": "ФИО кассира" &lt;br&gt;"additional_check_props": "09090909", &lt;br&gt;"additional_user_props.name": "Наименование дополнительного реквизита пользователя", &lt;br&gt;"additional_user_props.value": "Значение дополнительного реквизита пользователя", &lt;br&gt;}</param>
        /// <returns>OK</returns>
        /// <exception cref="AlfabankException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<OrderResult> RefundOrderAsync(string userName, string password, string orderId, long amount, long? expectedDepositedAmount = null, string? language = null, string? jsonParams = null, string? refundItems = null, string? additionalOfdParams = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Запрос регистрации заказа.
        /// </summary>
        /// <remarks>
        /// Для регистрации заказа используется запрос register.do.
        /// </remarks>
        /// <param name="orderNumber">Номер (идентификатор) заказа в системе магазина, уникален для каждого магазина в пределах системы. &lt;br&gt;Тип: AN..32</param>
        /// <param name="amount">Сумма платежа в копейках (или центах). &lt;br&gt;Тип: N..12</param>
        /// <param name="returnUrl">Адрес, на который требуется перенаправить пользователя в случае успешной оплаты. &lt;br&gt;Должен быть указан полностью, включая используемый протокол (например, https://test.ru вместо test.ru). &lt;br&gt;В противном случае пользователь будет перенаправлен по адресу следующего вида: http://&lt;адрес_платёжного_шлюза&gt;/&lt;адрес_продавца&gt;. &lt;br&gt;Тип: AN..512</param>
        /// <param name="userName">Логин магазина, полученный при подключении. Если вместо аутентификации по логину и паролю используется открытый токен (параметр token), параметр userName передавать не нужно. &lt;br&gt;Тип: AN..30</param>
        /// <param name="password">Пароль магазина, полученный при подключении. Если для аутентификации при регистрации вместо логина и пароля используется открытый токен (параметр token), параметр password передавать не нужно. &lt;br&gt;Тип: AN..30</param>
        /// <param name="token">Открытый ключ, который можно использовать для регистрации заказа. Если для аутентификации при регистрации заказа используются логин и пароль, параметр token передавать не нужно. &lt;br&gt;Тип: AN..30</param>
        /// <param name="currency">Код валюты платежа ISO 4217. Если не указан, считается равным коду валюты по умолчанию. &lt;br&gt;Тип: N3</param>
        /// <param name="failUrl">Адрес, на который требуется перенаправить пользователя в случае неуспешной оплаты. &lt;br&gt;Должен быть указан полностью, включая используемый протокол (например, https://test.ru вместо test.ru). &lt;br&gt;В противном случае пользователь будет перенаправлен по адресу следующего вида: http://&lt;адрес_платёжного_шлюза&gt;/&lt;адрес_продавца&gt;. &lt;br&gt;Тип: AN..512</param>
        /// <param name="description">Описание заказа в свободной форме. &lt;br&gt;Тип: ANS..598</param>
        /// <param name="ip">IP-адрес покупателя. &lt;br&gt;Тип: ANS..39</param>
        /// <param name="language">Язык в кодировке ISO 639-1. Если не указан, будет использован язык, указанный в настройках магазина как язык по умолчанию (default language). &lt;br&gt;Тип: ANS..39</param>
        /// <param name="pageView">По значению данного параметра определяется, какие страницы платёжного интерфейса должны загружаться для клиента. &lt;br&gt;Если параметр отсутствует, либо не соответствует формату, то по умолчанию считается pageView=DESKTOP. &lt;br&gt;Тип: ANS..20</param>
        /// <param name="clientId">Номер (идентификатор) клиента в системе магазина. Используется для реализации функционала связок. Может присутствовать, если магазину разрешено создание связок. &lt;br&gt;Тип: ANS..255</param>
        /// <param name="merchantLogin">Чтобы зарегистрировать заказ от имени дочернего мерчанта, укажите его логин в этом параметре. &lt;br&gt;Тип: AN..255</param>
        /// <param name="email">Адрес электронной почты покупателя. &lt;br&gt;Тип: ANS..40</param>
        /// <param name="postAddress">Адрес доставки. &lt;br&gt;Тип: ANS..598</param>
        /// <param name="jsonParams">Блок для передачи дополнительных параметров мерчанта. &lt;br&gt;Формат вида: {"Имя1": "Значение1", "Имя2": "Значение2"}. &lt;br&gt;Тип: имя - ANS..255 байт, значение - ANS..1024 байт</param>
        /// <param name="additionalOfdParams">Блок дополнительных параметров для ОФД. &lt;br&gt;Пример: &lt;br&gt;{ &lt;br&gt;"agent_info.type": "7", &lt;br&gt;"agent_info.paying.operation": "Наименование операции ма", &lt;br&gt;"agent_info.paying.phones": "+71111111111", &lt;br&gt;"agent_info.paymentsOperator.phones": "+72222222222", &lt;br&gt;"agent_info.MTOperator.address": "Адрес оператора перевода", &lt;br&gt;"agent_info.MTOperator.inn": "169910020020", &lt;br&gt;"agent_info.MTOperator.name": "Наименование оператора перевода", &lt;br&gt;"agent_info.MTOperator.phones": "+73333333333", &lt;br&gt;"supplier_info.phones": "+74444444444", &lt;br&gt;"cashier": "ФИО кассира" &lt;br&gt;"additional_check_props": "09090909", &lt;br&gt;"additional_user_props.name": "Наименование дополнительного реквизита пользователя", &lt;br&gt;"additional_user_props.value": "Значение дополнительного реквизита пользователя", &lt;br&gt;}</param>
        /// <param name="sessionTimeoutSecs">Продолжительность жизни заказа в секундах. &lt;br&gt;В случае если параметр не задан, будет использовано значение, указанное в настройках мерчанта или время по умолчанию (1200 секунд = 20 минут). &lt;br&gt;Если в запросе присутствует параметр expirationDate, то значение параметра sessionTimeoutSecs не учитывается. &lt;br&gt;Тип: N...9</param>
        /// <param name="expirationDate">Дата и время окончания жизни заказа. Формат: yyyy-MM-dd'T'HH:mm:ss. &lt;br&gt;Если этот параметр не передаётся в запросе, то для определения времени окончания жизни заказа используется sessionTimeoutSecs. &lt;br&gt;Тип: ANS</param>
        /// <param name="autocompletionDate">Время автозавершения заказа. Если заказ не был завершен ко времени указанному в autocompletionDate, то он завершится автоматически. &lt;br&gt;Тип: ANS. Формат параметра: yyyy-MM-dd'T'HH:mm:ss. Пример: "2017-12-29T13:02:51"</param>
        /// <param name="bindingId">Идентификатор связки, созданной ранее. Может использоваться, только если у магазина есть разрешение на работу со связками. &lt;br&gt;Если этот параметр передаётся в данном запросе, то это означает: &lt;br&gt;1. Данный заказ может быть оплачен только с помощью связки;&lt;br&gt;2. Плательщик будет перенаправлен на платёжную страницу, где требуется только ввод CVC. &lt;br&gt;Тип: AN..255</param>
        /// <param name="orderBundle">Корзина товаров заказа &lt;br&gt;&lt;br&gt;Пример: &lt;br&gt;"{"cartItems": &lt;br&gt;{"items": &lt;br&gt;[{"positionId":"1",&lt;br&gt;"name":"TEST",&lt;br&gt;"quantity":{"value":1.0,"measure":"psc"},&lt;br&gt;"itemAmount":500000,&lt;br&gt;"itemCode":"code1",&lt;br&gt;"itemPrice":"500000",&lt;br&gt;"itemAttributes":&lt;br&gt;{"attributes":&lt;br&gt;[{"name":"agent_info.paying.operation","value":"Test operation"},&lt;br&gt;{"name":"supplier_info.phones","value":"+79161234567"},&lt;br&gt;{"name":"agent_info.MTOperator.name","value":"Test MT Operator"},&lt;br&gt;{"name":"agent_info.paymentsOperator.phones","value":"+79161234567,"},&lt;br&gt;{"name":"nomenclature","value":"dGVzdCBkZXBvc2l0"},&lt;br&gt;{"name":"agent_info.MTOperator.address","value":"Moscow"},&lt;br&gt;{"name":"supplier_info.name","value":"Test Supplier"},&lt;br&gt;{"name":"paymentMethod","value":"1"},&lt;br&gt;{"name":"paymentObject","value":"3"},&lt;br&gt;{"name":"agent_info.MTOperator.phones","value":"+79161234567"},&lt;br&gt;{"name":"agent_info.MTOperator.inn","value":"9715225506"},&lt;br&gt;{"name":"supplier_info.inn","value":"9715225506"},&lt;br&gt;{"name":"agent_info.type","value":"7"},&lt;br&gt;{"name":"agent_info.paying.phones","value":"+79161234567"}]}}]},&lt;br&gt;"agent":&lt;br&gt;{"agentType":1,&lt;br&gt;"payingOperation":"Test agent operation",&lt;br&gt;"payingPhones":"+79161234567,",&lt;br&gt;"paymentsOperatorPhones":"+79161234567",&lt;br&gt;"mtOperatorPhones":"+79169876543",&lt;br&gt;"mtOperatorName":"Agent MT Operator",&lt;br&gt;"mtOperatorAddress":"New York",&lt;br&gt;"mtOperatorInn":"9715225506"}}]"</param>
        /// <param name="billingPayerData">Регистрационный адрес клиента, заданный при регистрации карты в Банке Эмитенте.</param>
        /// <param name="shippingPayerData">Данные доставки клиента.</param>
        /// <param name="preOrderPayerData">Данные предзаказа.</param>
        /// <param name="orderPayerData">Данные заказа.</param>
        /// <param name="billingAndShippingAddressMatchIndicator">Индикатор совпадения адреса держателя карты для выставления счета и адреса доставки.</param>
        /// <param name="features">Возможно использование следующих значений: &lt;br&gt;AUTO_PAYMENT - Если запрос на регистрацию заказа инициирует проведение автоплатежей. &lt;br&gt;VERIFY - Если указать это значение после запроса на регистрацию заказа произойдёт верификация держателя карты без списания средств с его счёта, поэтому в запросе можно передавать нулевую сумму.</param>
        /// <param name="prepaymentMdOrder">mdOrder заказа с типом расчета Предоплата или Аванс.</param>
        /// <param name="dynamicCallbackUrl">Адрес для callback вызовов (необходима дополнительная настройка мерчанта).</param>
        /// <param name="feeInput">Размер комиссии мерчанта в минимальных единицах валюты.</param>
        /// <param name="cardholderName">Имя владельца карты.</param>
        /// <returns>OK</returns>
        /// <exception cref="AlfabankException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<RegisterOrderResponse> RegisterOrderAsync(string orderNumber, long amount, string returnUrl, string? userName = null, string? password = null, string? token = null, long? currency = null, string? failUrl = null, string? description = null, string? ip = null, string? language = null, PageView? pageView = null, string? clientId = null, string? merchantLogin = null, string? email = null, string? postAddress = null, string? jsonParams = null, string? additionalOfdParams = null, long? sessionTimeoutSecs = null, string? expirationDate = null, string? autocompletionDate = null, string? bindingId = null, string? orderBundle = null, string? billingPayerData = null, string? shippingPayerData = null, string? preOrderPayerData = null, string? orderPayerData = null, string? billingAndShippingAddressMatchIndicator = null, string? features = null, string? prepaymentMdOrder = null, string? dynamicCallbackUrl = null, string? feeInput = null, string? cardholderName = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Запрос регистрации заказа с предавторизацией.
        /// </summary>
        /// <remarks>
        /// Запрос предавторизации заказа называется registerOrderPreAuth. Он используется для регистрации заказа в случае двухстадийной схемы оплаты.
        /// </remarks>
        /// <param name="orderNumber">Номер (идентификатор) заказа в системе магазина, уникален для каждого магазина в пределах системы. &lt;br&gt;Тип: AN..32</param>
        /// <param name="amount">Сумма платежа в копейках (или центах). &lt;br&gt;Тип: N..12</param>
        /// <param name="returnUrl">Адрес, на который требуется перенаправить пользователя в случае успешной оплаты. &lt;br&gt;Должен быть указан полностью, включая используемый протокол (например, https://test.ru вместо test.ru). &lt;br&gt;В противном случае пользователь будет перенаправлен по адресу следующего вида: http://&lt;адрес_платёжного_шлюза&gt;/&lt;адрес_продавца&gt;. &lt;br&gt;Тип: AN..512</param>
        /// <param name="userName">Логин магазина, полученный при подключении. Если вместо аутентификации по логину и паролю используется открытый токен (параметр token), параметр userName передавать не нужно. &lt;br&gt;Тип: AN..30</param>
        /// <param name="password">Пароль магазина, полученный при подключении. Если для аутентификации при регистрации вместо логина и пароля используется открытый токен (параметр token), параметр password передавать не нужно. &lt;br&gt;Тип: AN..30</param>
        /// <param name="token">Открытый ключ, который можно использовать для регистрации заказа. Если для аутентификации при регистрации заказа используются логин и пароль, параметр token передавать не нужно. &lt;br&gt;Тип: AN..30</param>
        /// <param name="currency">Код валюты платежа ISO 4217. Если не указан, считается равным коду валюты по умолчанию. &lt;br&gt;Тип: N3</param>
        /// <param name="failUrl">Адрес, на который требуется перенаправить пользователя в случае неуспешной оплаты. &lt;br&gt;Должен быть указан полностью, включая используемый протокол (например, https://test.ru вместо test.ru). &lt;br&gt;В противном случае пользователь будет перенаправлен по адресу следующего вида: http://&lt;адрес_платёжного_шлюза&gt;/&lt;адрес_продавца&gt;. &lt;br&gt;Тип: AN..512</param>
        /// <param name="description">Описание заказа в свободной форме. &lt;br&gt;Тип: ANS..598</param>
        /// <param name="ip">IP-адрес покупателя. &lt;br&gt;Тип: ANS..39</param>
        /// <param name="language">Язык в кодировке ISO 639-1. Если не указан, будет использован язык, указанный в настройках магазина как язык по умолчанию (default language). &lt;br&gt;Тип: ANS..39</param>
        /// <param name="pageView">По значению данного параметра определяется, какие страницы платёжного интерфейса должны загружаться для клиента. &lt;br&gt;Если параметр отсутствует, либо не соответствует формату, то по умолчанию считается pageView=DESKTOP. &lt;br&gt;Тип: ANS..20</param>
        /// <param name="clientId">Номер (идентификатор) клиента в системе магазина. Используется для реализации функционала связок. Может присутствовать, если магазину разрешено создание связок. &lt;br&gt;Тип: ANS..255</param>
        /// <param name="merchantLogin">Чтобы зарегистрировать заказ от имени дочернего мерчанта, укажите его логин в этом параметре. &lt;br&gt;Тип: AN..255</param>
        /// <param name="email">Адрес электронной почты покупателя. &lt;br&gt;Тип: ANS..40</param>
        /// <param name="postAddress">Адрес доставки. &lt;br&gt;Тип: ANS..598</param>
        /// <param name="jsonParams">Блок для передачи дополнительных параметров мерчанта. &lt;br&gt;Формат вида: {"Имя1": "Значение1", "Имя2": "Значение2"}. &lt;br&gt;Тип: имя - ANS..255 байт, значение - ANS..1024 байт</param>
        /// <param name="additionalOfdParams">Блок дополнительных параметров для ОФД. &lt;br&gt;Пример: &lt;br&gt;{ &lt;br&gt;"agent_info.type": "7", &lt;br&gt;"agent_info.paying.operation": "Наименование операции ма", &lt;br&gt;"agent_info.paying.phones": "+71111111111", &lt;br&gt;"agent_info.paymentsOperator.phones": "+72222222222", &lt;br&gt;"agent_info.MTOperator.address": "Адрес оператора перевода", &lt;br&gt;"agent_info.MTOperator.inn": "169910020020", &lt;br&gt;"agent_info.MTOperator.name": "Наименование оператора перевода", &lt;br&gt;"agent_info.MTOperator.phones": "+73333333333", &lt;br&gt;"supplier_info.phones": "+74444444444", &lt;br&gt;"cashier": "ФИО кассира" &lt;br&gt;"additional_check_props": "09090909", &lt;br&gt;"additional_user_props.name": "Наименование дополнительного реквизита пользователя", &lt;br&gt;"additional_user_props.value": "Значение дополнительного реквизита пользователя", &lt;br&gt;}</param>
        /// <param name="sessionTimeoutSecs">Продолжительность жизни заказа в секундах. &lt;br&gt;В случае если параметр не задан, будет использовано значение, указанное в настройках мерчанта или время по умолчанию (1200 секунд = 20 минут). &lt;br&gt;Если в запросе присутствует параметр expirationDate, то значение параметра sessionTimeoutSecs не учитывается. &lt;br&gt;Тип: N...9</param>
        /// <param name="expirationDate">Дата и время окончания жизни заказа. Формат: yyyy-MM-dd'T'HH:mm:ss. &lt;br&gt;Если этот параметр не передаётся в запросе, то для определения времени окончания жизни заказа используется sessionTimeoutSecs. &lt;br&gt;Тип: ANS</param>
        /// <param name="autocompletionDate">Время автозавершения заказа. Если заказ не был завершен ко времени указанному в autocompletionDate, то он завершится автоматически. &lt;br&gt;Тип: ANS. Формат параметра: yyyy-MM-dd'T'HH:mm:ss. Пример: "2017-12-29T13:02:51"</param>
        /// <param name="bindingId">Идентификатор связки, созданной ранее. Может использоваться, только если у магазина есть разрешение на работу со связками. &lt;br&gt;Если этот параметр передаётся в данном запросе, то это означает: &lt;br&gt;1. Данный заказ может быть оплачен только с помощью связки;&lt;br&gt;2. Плательщик будет перенаправлен на платёжную страницу, где требуется только ввод CVC. &lt;br&gt;Тип: AN..255</param>
        /// <param name="orderBundle">Корзина товаров заказа &lt;br&gt;&lt;br&gt;Пример: &lt;br&gt;"{"cartItems": &lt;br&gt;{"items": &lt;br&gt;[{"positionId":"1",&lt;br&gt;"name":"TEST",&lt;br&gt;"quantity":{"value":1.0,"measure":"psc"},&lt;br&gt;"itemAmount":500000,&lt;br&gt;"itemCode":"code1",&lt;br&gt;"itemPrice":"500000",&lt;br&gt;"itemAttributes":&lt;br&gt;{"attributes":&lt;br&gt;[{"name":"agent_info.paying.operation","value":"Test operation"},&lt;br&gt;{"name":"supplier_info.phones","value":"+79161234567"},&lt;br&gt;{"name":"agent_info.MTOperator.name","value":"Test MT Operator"},&lt;br&gt;{"name":"agent_info.paymentsOperator.phones","value":"+79161234567,"},&lt;br&gt;{"name":"nomenclature","value":"dGVzdCBkZXBvc2l0"},&lt;br&gt;{"name":"agent_info.MTOperator.address","value":"Moscow"},&lt;br&gt;{"name":"supplier_info.name","value":"Test Supplier"},&lt;br&gt;{"name":"paymentMethod","value":"1"},&lt;br&gt;{"name":"paymentObject","value":"3"},&lt;br&gt;{"name":"agent_info.MTOperator.phones","value":"+79161234567"},&lt;br&gt;{"name":"agent_info.MTOperator.inn","value":"9715225506"},&lt;br&gt;{"name":"supplier_info.inn","value":"9715225506"},&lt;br&gt;{"name":"agent_info.type","value":"7"},&lt;br&gt;{"name":"agent_info.paying.phones","value":"+79161234567"}]}}]},&lt;br&gt;"agent":&lt;br&gt;{"agentType":1,&lt;br&gt;"payingOperation":"Test agent operation",&lt;br&gt;"payingPhones":"+79161234567,",&lt;br&gt;"paymentsOperatorPhones":"+79161234567",&lt;br&gt;"mtOperatorPhones":"+79169876543",&lt;br&gt;"mtOperatorName":"Agent MT Operator",&lt;br&gt;"mtOperatorAddress":"New York",&lt;br&gt;"mtOperatorInn":"9715225506"}}]"</param>
        /// <param name="billingPayerData">Регистрационный адрес клиента, заданный при регистрации карты в Банке Эмитенте.</param>
        /// <param name="shippingPayerData">Данные доставки клиента.</param>
        /// <param name="preOrderPayerData">Данные предзаказа.</param>
        /// <param name="orderPayerData">Данные заказа.</param>
        /// <param name="billingAndShippingAddressMatchIndicator">Индикатор совпадения адреса держателя карты для выставления счета и адреса доставки.</param>
        /// <param name="features">Возможно использование следующих значений: &lt;br&gt;AUTO_PAYMENT - Если запрос на регистрацию заказа инициирует проведение автоплатежей. &lt;br&gt;VERIFY - Если указать это значение после запроса на регистрацию заказа произойдёт верификация держателя карты без списания средств с его счёта, поэтому в запросе можно передавать нулевую сумму.</param>
        /// <param name="prepaymentMdOrder">mdOrder заказа с типом расчета Предоплата или Аванс.</param>
        /// <param name="dynamicCallbackUrl">Адрес для callback вызовов (необходима дополнительная настройка мерчанта).</param>
        /// <param name="feeInput">Размер комиссии мерчанта в минимальных единицах валюты.</param>
        /// <param name="cardholderName">Имя владельца карты.</param>
        /// <returns>OK</returns>
        /// <exception cref="AlfabankException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<RegisterOrderResponse> RegisterOrderPreAuthAsync(string orderNumber, long amount, string returnUrl, string? userName = null, string? password = null, string? token = null, long? currency = null, string? failUrl = null, string? description = null, string? ip = null, string? language = null, PageView2? pageView = null, string? clientId = null, string? merchantLogin = null, string? email = null, string? postAddress = null, string? jsonParams = null, string? additionalOfdParams = null, long? sessionTimeoutSecs = null, string? expirationDate = null, string? autocompletionDate = null, string? bindingId = null, string? orderBundle = null, string? billingPayerData = null, string? shippingPayerData = null, string? preOrderPayerData = null, string? orderPayerData = null, string? billingAndShippingAddressMatchIndicator = null, string? features = null, string? prepaymentMdOrder = null, string? dynamicCallbackUrl = null, string? feeInput = null, string? cardholderName = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Запрос отмены заказа.
        /// </summary>
        /// <remarks>
        /// Для отмены оплаты заказа используется запрос reverse.do. Параметры orderId и orderNumber для выполнения запроса взаимозаменяемы, обязательно наличие одного из них.
        /// </remarks>
        /// <param name="userName">Логин магазина, полученный при подключении. &lt;br&gt;Тип: AN..30</param>
        /// <param name="password">Пароль магазина, полученный при подключении. &lt;br&gt;Тип: AN..30</param>
        /// <param name="orderId">Номер заказа в платежной системе. Уникален в пределах системы. &lt;br&gt;Тип: ANS36</param>
        /// <param name="orderNumber">Номер (идентификатор) заказа в системе магазина.  &lt;br&gt;Тип: AN..32</param>
        /// <param name="language">Язык в кодировке ISO 639-1. Если не указан, будет использован язык, указанный в настройках магазина как язык по умолчанию (default language). &lt;br&gt;Тип: A2</param>
        /// <param name="jsonParams">Блок с атрибутами дополнительных параметров мерчанта. &lt;br&gt;Формат вида: {"Имя1": "Значение1", "Имя2": "Значение2"}.</param>
        /// <param name="merchantLogin">Логин мерчанта. &lt;br&gt;Тип: AN..255</param>
        /// <param name="amount">Сумма проводимой операции.</param>
        /// <param name="currency">${reverse.req.param.currency.description}</param>
        /// <returns>OK</returns>
        /// <exception cref="AlfabankException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<OrderResult> ReverseOrderAsync(string userName, string password, string? orderId = null, string? orderNumber = null, string? language = null, string? jsonParams = null, string? merchantLogin = null, string? amount = null, string? currency = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Возвращает данные функциональной ссылки для B2B
        /// </summary>
        /// <remarks>
        /// Используется для получения данных по ранее зарегистрированной одноразовой или многоразовой функциональной ссылке
        /// </remarks>
        /// <param name="qrcId">qrcId</param>
        /// <param name="password">Пароль магазина, полученный при подключении</param>
        /// <param name="qrId">Идентификатор Функциональной ссылки СБП</param>
        /// <param name="userName">Логин магазина, полученный при подключении</param>
        /// <returns>OK</returns>
        /// <exception cref="AlfabankException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SbpB2bPayloadApiResponse> GetPayloadUsingPOSTAsync(string qrcId, string password, string qrId, string userName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Запрос выполнения B2B перевода
        /// </summary>
        /// <remarks>
        /// Метод доступен только для Мерчантов, с пермиссией: "Разрешена отправка B2B переводов через СБП"
        /// </remarks>
        /// <param name="request">request</param>
        /// <returns>OK</returns>
        /// <exception cref="AlfabankException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SbpB2bPerformApiResponse> PerformUsingPOSTAsync(SbpB2bPerformApiRequest request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Запрос получения одноразовой функциональной ссылки СБП для B2B
        /// </summary>
        /// <remarks>
        /// При необходимости отображения renderedQr нужно указать размеры QR-кода: qrHeight и qrWidth.
        /// </remarks>
        /// <param name="password">Пароль магазина, полученный при подключении.</param>
        /// <param name="userName">Логин магазина, полученный при подключении.</param>
        /// <param name="mdOrder">Номер заказа, полученный при регистрации.</param>
        /// <param name="account">Счет юридического лица.</param>
        /// <param name="memberId">Идентификатор банка-участника SBP.</param>
        /// <param name="tspMerchantId">Идентификатор ТСП.</param>
        /// <param name="paymentPurpose">Дополнительная информация от TSP. 
        /// <br/> Если не заполнена, то по умолчанию будет подставлено описание заказа, если оно присутствует. 
        /// <br/> Максимальная длина: 140 символов.</param>
        /// <param name="qrHeight">Высота QR-кода. Укажите, если требуется renderedQR. 
        /// <br/>Минимальное значение: 10. Максимальное значение: 1000.</param>
        /// <param name="qrWidth">Ширина QR-кода. Укажите, если требуется renderedQR. 
        /// <br/>Минимальное значение: 10. Максимальное значение: 1000.</param>
        /// <param name="qrFormat">Формат QR-кода. Указываем, если хотим адаптивно отображать код на платежной странице с логотипом под разные размеры страницы. Допустимые значения: 1) image - возвращает qr-код с логотипом как картинку, matrix - возвращает матрицу qr-кода как строка состоящая из 1 и 0.</param>
        /// <param name="redirectUrl">Ссылка для автоматического возврата из приложения банка в приложение или на сайт ТСП. 
        /// <br/> Максимальная длина: 1024 символов.</param>
        /// <param name="takeTax">Информация о взимании НДС (true –облагается НДС, false –не облагается НДС)</param>
        /// <param name="totalTaxAmount">Сумма НДС в копейках. Валюта НДС - рубли РФ</param>
        /// <returns>OK</returns>
        /// <exception cref="AlfabankException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SbpC2bGetQrApiResponse> GetDynamicQrUsingPOSTAsync(string password, string userName, string mdOrder, string? account = null, string? memberId = null, string? tspMerchantId = null, string? paymentPurpose = null, string? qrHeight = null, string? qrWidth = null, string? qrFormat = null, string? redirectUrl = null, string? takeTax = null, string? totalTaxAmount = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Запрос платежа по биометрии
        /// </summary>
        /// <remarks>
        /// В случае успешной обработки возвращает значения параметров, 
        /// <br/>полученных в ответе от ОПКЦ СБП: location (URL веб-формы ЕБС, 
        /// <br/>на который осуществляется перенаправление пользователя для снятия биометрических образцов) 
        /// <br/>и sessionId (Идентификатор сессии идентификации в ЕБС)
        /// </remarks>
        /// <param name="request">request</param>
        /// <returns>OK</returns>
        /// <exception cref="AlfabankException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SbpBioPaymentApiResponse> GetBioUrlUsingPOSTAsync(SbpBioPaymentApiRequest request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Возвращает список банков участников СБП.
        /// </summary>
        /// <remarks>
        /// Мерчант должен иметь разрешение API SBP C2B. Не более одного вызова в один момент времени. Не более 10 вызовов в час, не более 3 в минуту.
        /// </remarks>
        /// <param name="password">Пароль магазина, полученный при подключении.</param>
        /// <param name="userName">Логин магазина, полученный при подключении.</param>
        /// <param name="scenarioName">Название поддерживаемого сценария операции СБП.</param>
        /// <param name="scenarioRole">Роль в поддерживаемом сценарии операции СБП.</param>
        /// <returns>OK</returns>
        /// <exception cref="AlfabankException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SbpC2bBanksResponse> GetBankListSBPUsingPOSTAsync(string password, string userName, string? scenarioName = null, string? scenarioRole = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Запрос списка СБП подписок клиента.
        /// </summary>
        /// <remarks>
        /// Для получения списка СБП подписок клиента используется запрос getBindings.do.
        /// </remarks>
        /// <param name="password">Пароль магазина, полученный при подключении. &lt;br&gt;Тип: AN..30</param>
        /// <param name="userName">Логин магазина, полученный при подключении. &lt;br&gt;Тип: AN..30</param>
        /// <param name="clientId">Номер (идентификатор) клиента в системе магазина, переданный при регистрации заказа. Присутствует только если магазину разрешено создание связок. &lt;br&gt;Тип: ANS..255</param>
        /// <param name="bindingId">Идентификатор связки созданной при оплате заказа или использованной для оплаты. Присутствует только если магазину разрешено создание связок. &lt;br&gt;Тип: AN..255</param>
        /// <param name="showDisabled">Отображать ли не активные подписки. &lt;br&gt;getSbpBindings.clientId=Идентификатор клиента</param>
        /// <returns>OK</returns>
        /// <exception cref="AlfabankException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SbpC2bGetBindingsApiResponse> GetSbpBindingsAsync(string password, string userName, string clientId, string? bindingId = null, string? showDisabled = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Возвращает зарегистрированный в SBP QR-код.
        /// </summary>
        /// <remarks>
        /// Если вам нужен renderedQr, укажите размеры QR-кода (qrHeight и qrWidth). 
        /// <br/>Чтобы переопределить выбранный по умолчанию счет юридического лица укажите все его параметры одновременно (account и memberId). 
        /// <br/>Чтобы переопределить выранный по умолчанию ТСП укажите его параметры (tspMerchantId). 
        /// <br/>Мерчант должен иметь разрешение API SBP C2B.
        /// </remarks>
        /// <param name="mdOrder">Номер заказа, полученный при регистрации.</param>
        /// <param name="password">Пароль магазина, полученный при подключении.</param>
        /// <param name="token">Токен для аутентификации</param>
        /// <param name="userName">Логин магазина, полученный при подключении.</param>
        /// <param name="account">Счет юридического лица.</param>
        /// <param name="memberId">Идентификатор банка-участника SBP.</param>
        /// <param name="tspMerchantId">Идентификатор ТСП.</param>
        /// <param name="paymentPurpose">Дополнительная информация от TSP. 
        /// <br/> Если не заполнена, то по умолчанию будет подставлено описание заказа, если оно присутствует. 
        /// <br/> Максимальная длина: 140 символов.</param>
        /// <param name="qrHeight">Высота QR-кода. Укажите, если требуется renderedQR. 
        /// <br/>Минимальное значение: 10. Максимальное значение: 1000.</param>
        /// <param name="qrWidth">Ширина QR-кода. Укажите, если требуется renderedQR. 
        /// <br/>Минимальное значение: 10. Максимальное значение: 1000.</param>
        /// <param name="qrFormat">Формат QR-кода. Указываем, если хотим адаптивно отображать код на платежной странице с логотипом под разные размеры страницы. Допустимые значения: 1) image - возвращает qr-код с логотипом как картинку, matrix - возвращает матрицу qr-кода как строка состоящая из 1 и 0.</param>
        /// <param name="redirectUrl">Cсылка для автоматического возврата из приложения банка в приложение или на сайт ТСП. 
        /// <br/> Максимальная длина: 1024 символов.</param>
        /// <param name="createSubscription">Необходима привязка счета плательщика (сохранение связки). По умолчанию: false.</param>
        /// <param name="subscriptionServiceId">Идентификатор типа предоставляемой услуги для привязки счета.</param>
        /// <param name="subscriptionServiceName">Наименование типа предоставляемой услуги для привязки счета.</param>
        /// <returns>OK</returns>
        /// <exception cref="AlfabankException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SbpC2bGetQrApiResponse> GetDynamicQrUsingPOST2Async(string mdOrder, string? password = null, string? token = null, string? userName = null, string? account = null, string? memberId = null, string? tspMerchantId = null, string? paymentPurpose = null, string? qrHeight = null, string? qrWidth = null, string? qrFormat = null, string? redirectUrl = null, string? createSubscription = null, string? subscriptionServiceId = null, string? subscriptionServiceName = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Отклоняет QR-код, если он еще не в процессе оплаты.
        /// </summary>
        /// <remarks>
        /// Только для QR-кода в состоянии 'STARTED'. Мерчант должен иметь разрешение API SBP C2B.
        /// </remarks>
        /// <param name="password">Пароль магазина, полученный при подключении.</param>
        /// <param name="userName">Логин магазина, полученный при подключении.</param>
        /// <param name="mdOrder">Номер заказа, полученный при регистрации.</param>
        /// <param name="qrId">Идентификатор QR-кода.</param>
        /// <returns>OK</returns>
        /// <exception cref="AlfabankException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SbpC2bRejectQrApiResponse> RejectDynamicQrUsingPOSTAsync(string password, string userName, string mdOrder, string qrId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Возвращает статус QR-кода.
        /// </summary>
        /// <remarks>
        /// Только для зарегистрированных QR-кодов. Мерчант должен иметь разрешение API SBP C2B.
        /// </remarks>
        /// <param name="mdOrder">Номер заказа, полученный при регистрации.</param>
        /// <param name="qrId">Идентификатор QR-кода.</param>
        /// <param name="password">Пароль магазина, полученный при подключении.</param>
        /// <param name="token">Токен для аутентификации</param>
        /// <param name="userName">Логин магазина, полученный при подключении.</param>
        /// <returns>OK</returns>
        /// <exception cref="AlfabankException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SbpC2bQrStatusApiResponse> GetQrStatusUsingPOSTAsync(string mdOrder, string qrId, string? password = null, string? token = null, string? userName = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Запрос деактивации СБП подписки.
        /// </summary>
        /// <remarks>
        /// Для деактивации СБП подписки используется запрос unBind.do.
        /// </remarks>
        /// <param name="password">Пароль магазина, полученный при подключении. &lt;br&gt;Тип: AN..30</param>
        /// <param name="userName">Логин магазина, полученный при подключении. &lt;br&gt;Тип: AN..30</param>
        /// <param name="bindingId">Идентификатор связки созданной при оплате заказа или использованной для оплаты. Присутствует только если магазину разрешено создание связок. &lt;br&gt;Тип: AN..255</param>
        /// <returns>OK</returns>
        /// <exception cref="AlfabankException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SbpC2bUnBindApiResponse> UnBindSbpAsync(string password, string userName, string bindingId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Создание шаблона заказа.
        /// </summary>
        /// <param name="request">request</param>
        /// <returns>OK</returns>
        /// <exception cref="AlfabankException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SingleClickTemplateResponse_SingleClickCreateTemplateResponse> CreateUsingPOSTAsync(SingleClickTemplateRequest_SingleClickCreateTemplate request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Создание шаблона заказа.
        /// </summary>
        /// <param name="request">request</param>
        /// <returns>OK</returns>
        /// <exception cref="AlfabankException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SbpTemplateDetailsResponse> CreateTemplateUsingPOSTAsync(CreateSbpTemplateRequest request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Получение данных шаблона.
        /// </summary>
        /// <param name="request">request</param>
        /// <returns>OK</returns>
        /// <exception cref="AlfabankException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SingleClickTemplateResponse_SingleClickGetTemplateResponse> GetUsingPOSTAsync(SingleClickTemplateRequest_SingleClickGetTemplate request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Получение данных шаблона.
        /// </summary>
        /// <param name="request">request</param>
        /// <returns>OK</returns>
        /// <exception cref="AlfabankException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SingleClickGetListResponse> GetListUsingPOSTAsync(SingleClickGetListRequest request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Получение данных шаблона.
        /// </summary>
        /// <param name="userName">Имя пользователя.</param>
        /// <param name="password">Пароль.</param>
        /// <param name="templateId">id шаблона.</param>
        /// <returns>OK</returns>
        /// <exception cref="AlfabankException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SbpTemplateDetailsResponse> GetTemplateDetailsUsingGETAsync(string userName, string password, string templateId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Получение данных шаблона.
        /// </summary>
        /// <param name="userName">Имя пользователя.</param>
        /// <param name="password">Пароль.</param>
        /// <param name="templateId">id шаблона.</param>
        /// <returns>OK</returns>
        /// <exception cref="AlfabankException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SbpTemplateDetailsResponse> GetTemplateDetailsUsingPOSTAsync(string userName, string password, string templateId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Изменение данных шаблона.
        /// </summary>
        /// <param name="request">request</param>
        /// <returns>OK</returns>
        /// <exception cref="AlfabankException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SingleClickTemplateResponse> UpdateUsingPOSTAsync(SingleClickTemplateRequest_SingleClickUpdateTemplate request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Изменение данных шаблона.
        /// </summary>
        /// <remarks>
        /// Позволяет деактивировать шаблон или изменить даты начала и окончания действия.
        /// </remarks>
        /// <param name="request">request</param>
        /// <returns>OK</returns>
        /// <exception cref="AlfabankException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SbpTemplateDetailsResponse> UpdateTemplateUsingPOSTAsync(UpdateSbpTemplateRequest request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Запрос деактивации связки.
        /// </summary>
        /// <remarks>
        /// Для деактивации связки используется запрос unBindCard.do.
        /// </remarks>
        /// <param name="userName">Логин магазина, полученный при подключении. &lt;br&gt;Тип: AN..30</param>
        /// <param name="password">Пароль магазина, полученный при подключении. &lt;br&gt;Тип: AN..30</param>
        /// <param name="bindingId">Идентификатор связки созданной при оплате заказа или использованной для оплаты. Присутствует только если магазину разрешено создание связок. &lt;br&gt;Тип: AN..255</param>
        /// <param name="phone">Телефон клиента. Параметр обязателен для некоторых внешних хранилищ связок.</param>
        /// <param name="externalBindingId">Идентификатор связки во внешнем хранилище связок.</param>
        /// <param name="externalBindingSystem">Тип внешнего хранилища связок.</param>
        /// <param name="fingerprint">Данные об устройстве клиента. Параметр обязателен для некоторых внешних хранилищ связок.</param>
        /// <param name="language">Язык в кодировке ISO 639-1. Если не указан, будет использован язык, указанный в настройках магазина как язык по умолчанию. &lt;br&gt;Тип: A2</param>
        /// <returns>OK</returns>
        /// <exception cref="AlfabankException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<OrderResult> UnBindCardAsync(string userName, string password, string bindingId, string? phone = null, string? externalBindingId = null, string? externalBindingSystem = null, string? fingerprint = null, string? language = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Верификация карты.
        /// </summary>
        /// <remarks>
        /// Используется для совершения верификации карты.
        /// </remarks>
        /// <param name="pan">Номер карты. &lt;br&gt;Тип: N12...19</param>
        /// <param name="cvc">CVC код. &lt;br&gt;Тип: N..3</param>
        /// <param name="expiry">Дата (год и месяц) окончания срока действия связки в формате YYYYMM. &lt;br&gt;Тип: N6</param>
        /// <param name="userName">Логин магазина, полученный при подключении. Если вместо аутентификации по логину и паролю используется открытый токен (параметр token), параметр userName передавать не нужно. &lt;br&gt;Тип: AN..30</param>
        /// <param name="password">Пароль магазина, полученный при подключении. Если для аутентификации при регистрации вместо логина и пароля используется открытый токен (параметр token), параметр password передавать не нужно. &lt;br&gt;Тип: AN..30</param>
        /// <param name="token">Открытый ключ, который можно использовать для регистрации заказа. Если для аутентификации при регистрации заказа используются логин и пароль, параметр token передавать не нужно. &lt;br&gt;Тип: AN..30</param>
        /// <param name="amount">Сумма списания в валюте заказа. Максимальное значение для проверки карты 100. &lt;br&gt;Тип: N..3</param>
        /// <param name="currency">Код валюты платежа ISO 4217. Если не указан, считается равным коду валюты по умолчанию. &lt;br&gt;Тип: N3</param>
        /// <param name="cardHolderName">Имя держателя карты. Указан только после оплаты заказа.</param>
        /// <param name="backUrl">Адрес, на который требуется перенаправить пользователя в случае успешной оплаты. &lt;br&gt;Должен быть указан полностью, включая используемый протокол (например, https://test.ru вместо test.ru). &lt;br&gt;В противном случае пользователь будет перенаправлен по адресу следующего вида: http://&lt;адрес_платёжного_шлюза&gt;/&lt;адрес_продавца&gt;. &lt;br&gt;Тип: AN..512</param>
        /// <param name="failUrl">Адрес, на который требуется перенаправить пользователя в случае неуспешной оплаты. &lt;br&gt;Должен быть указан полностью, включая используемый протокол (например, https://test.ru вместо test.ru). &lt;br&gt;В противном случае пользователь будет перенаправлен по адресу следующего вида: http://&lt;адрес_платёжного_шлюза&gt;/&lt;адрес_продавца&gt;. &lt;br&gt;Тип: AN..512</param>
        /// <param name="description">Описание заказа в свободной форме. &lt;br&gt;Тип: ANS..598</param>
        /// <param name="email">Адрес электронной почты плательщика. &lt;br&gt;Тип: ANS..40</param>
        /// <param name="language">Язык в кодировке ISO 639-1. Если не указан, будет использован язык, указанный в настройках магазина как язык по умолчанию. &lt;br&gt;Тип: A2</param>
        /// <param name="dynamicCallbackUrl">Адрес для callback вызовов (необходима дополнительная настройка мерчанта).</param>
        /// <param name="threeDSServerTransId">Параметр указывающий идентификатор заказа в рамках 3DS 2.0 операции.</param>
        /// <param name="threeDSVer2FinishUrl">Адрес, на который требуется перенаправить пользователя перед finish3dsVer2.do в рамках 3DS 2.0 операции.</param>
        /// <param name="threeDSSDK">Признак (true/false) используется ли SDK. По умолчанию false.</param>
        /// <param name="threeDSSDKEncData">Зашифрованные данные об устройстве с 3DS2 SDK.</param>
        /// <param name="threeDSSDKReferenceNumber">SDK Reference Number (если используется SDK).</param>
        /// <param name="threeDSSDKEphemPubKey">Ключ для общения 3DS2 SDK с ACS.</param>
        /// <param name="threeDSSDKAppId">Идентификатор 3DS2 SDK.</param>
        /// <param name="threeDSSDKTransId">Идентификатор транзакции внутри 3DS2 SDK.</param>
        /// <param name="threeDSMethodNotificationUrl">Адрес для отправки уведомления о прохождении проверки 3D Secure.</param>
        /// <param name="threeDSVer2MdOrder">Номер заказа, который был зарегистрирован в первой части запроса в рамках 3DS 2.0 операции.</param>
        /// <param name="billingPayerData">Регистрационный адрес клиента, заданный при регистрации карты в Банке Эмитенте.</param>
        /// <param name="shippingPayerData">Данные доставки клиента.</param>
        /// <param name="preOrderPayerData">Данные предзаказа.</param>
        /// <param name="orderPayerData">Данные заказа.</param>
        /// <param name="billingAndShippingAddressMatchIndicator">Индикатор совпадения адреса держателя карты для выставления счета и адреса доставки.</param>
        /// <param name="externalScaExemptionIndicator">SCA Examption Indicator.</param>
        /// <returns>OK</returns>
        /// <exception cref="AlfabankException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<VerifyCardResponse> VerifyCardAsync(string pan, string cvc, string expiry, string? userName = null, string? password = null, string? token = null, string? amount = null, string? currency = null, string? cardHolderName = null, string? backUrl = null, string? failUrl = null, string? description = null, string? email = null, string? language = null, string? dynamicCallbackUrl = null, string? threeDSServerTransId = null, string? threeDSVer2FinishUrl = null, string? threeDSSDK = null, string? threeDSSDKEncData = null, string? threeDSSDKReferenceNumber = null, string? threeDSSDKEphemPubKey = null, string? threeDSSDKAppId = null, string? threeDSSDKTransId = null, string? threeDSMethodNotificationUrl = null, string? threeDSVer2MdOrder = null, string? billingPayerData = null, string? shippingPayerData = null, string? preOrderPayerData = null, string? orderPayerData = null, string? billingAndShippingAddressMatchIndicator = null, string? externalScaExemptionIndicator = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Запрос проверки вовлечённости карты в 3DS.
        /// </summary>
        /// <remarks>
        /// Для проверки вовлечённости карты в 3DS используется запрос verifyEnrollment.do.
        /// </remarks>
        /// <param name="userName">Логин пользователя (API). &lt;br&gt;Тип: AN..30</param>
        /// <param name="password">Пароль пользователя (API). &lt;br&gt;Тип: AN..30</param>
        /// <param name="pan">Номер карты. &lt;br&gt;Тип: N12...19</param>
        /// <param name="language">Язык в кодировке ISO 639-1. Если не указан, будет использован язык, указанный в настройках магазина как язык по умолчанию (default language). &lt;br&gt;Тип: A2</param>
        /// <returns>OK</returns>
        /// <exception cref="AlfabankException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<VerifyEnrollmentResult> VerifyEnrollmentAsync(string userName, string password, string pan, string? language = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Запрос на оплату через Samsung Pay.
        /// </summary>
        /// <remarks>
        /// Для проведения платежа через Samsung Pay используется запрос payment.do. &lt;br&gt;&lt;br&gt;Указывается в виде списка JSON-параметров типа: "имя1": "значение1", "имя2": "значение2". &lt;br&gt;&lt;br&gt;Обязательные параметры: &lt;br&gt;&lt;br&gt;&lt;b&gt;merchant&lt;/b&gt; - Имя входа продавца в системе платёжного шлюза. &lt;br&gt;Тип: AN..30 &lt;br&gt;&lt;br&gt;&lt;b&gt;orderNumber&lt;/b&gt; - Уникальный номер заказа на стороне продавца. &lt;br&gt;Тип: AN..32 &lt;br&gt;&lt;br&gt;&lt;b&gt;paymentToken&lt;/b&gt; - Токен, полученный от Google Pay и закодированный в Base64. &lt;br&gt;Тип: AN..8192 &lt;br&gt;&lt;br&gt;&lt;b&gt;ip&lt;/b&gt; - IP-адрес плательщика. &lt;br&gt;Тип: ANS..39 &lt;br&gt;&lt;br&gt;&lt;br&gt;Дополнительные параметры: &lt;br&gt;&lt;br&gt;&lt;b&gt;description&lt;/b&gt; - Описание заказа. &lt;br&gt;Тип: AN..512 &lt;br&gt;&lt;br&gt;&lt;b&gt;language&lt;/b&gt; - Язык в кодировке ISO 639-1. Если не указан, будет использован язык, указанный в настройках магазина как язык по умолчанию. &lt;br&gt;Тип: A2 &lt;br&gt;&lt;br&gt;&lt;b&gt;additionalParameters&lt;/b&gt; - Дополнительные параметры заказа, которые сохраняются для просмотра из личного кабинета продавца. Их следует указывать в следующем формате: "имя1": "значение1", "имя2": "значение2". Каждую новую пару имени и значения параметра следует отделять запятой. &lt;br&gt;&lt;br&gt;&lt;b&gt;clientId&lt;/b&gt; - Номер клиента, для которого следует создать связку для проведения регулярных платежей. Следует указывать, только если проводится технический платёж для последующих регулярных платежей. &lt;br&gt;Тип: ANS..255 &lt;br&gt;&lt;br&gt;&lt;b&gt;preAuth&lt;/b&gt; - Параметр, определяющий необходимость предварительной авторизации (блокирования средств на счету клиента до их списания). &lt;br&gt;&lt;br&gt;Доступны следующие значения: &lt;br&gt;&lt;br&gt;true (истина) - параметр включён, оплата происходит с предавторизацией (происходит блокирование средств клиента до списания); &lt;br&gt;false (ложь) - параметр выключен (списание происходит сразу). &lt;br&gt;&lt;br&gt;Если параметр не указан в запросе, списание происходит сразу. &lt;br&gt;&lt;br&gt;&lt;b&gt;currencyCode&lt;/b&gt; - Цифровой код валюты платежа ISO 4217. Если не указан, считается равным 643 (российский рубль). &lt;br&gt;Тип: N3
        /// </remarks>
        /// <param name="request">request</param>
        /// <returns>OK</returns>
        /// <exception cref="AlfabankException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SamsungPayPaymentResponse> SamsungPaymentAsync(SamsungPayPaymentRequest request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Запрос на оплату через Samsung Pay с расшифрованным токеном.
        /// </summary>
        /// <remarks>
        /// Для проведения платежа через Samsung Pay используется запрос payment.do. &lt;br&gt;&lt;br&gt;Указывается в виде списка JSON-параметров типа: "имя1": "значение1", "имя2": "значение2". &lt;br&gt;&lt;br&gt;Обязательные параметры: &lt;br&gt;&lt;br&gt;&lt;b&gt;merchant&lt;/b&gt; - Имя входа продавца в системе платёжного шлюза. &lt;br&gt;Тип: AN..30 &lt;br&gt;&lt;br&gt;&lt;b&gt;orderNumber&lt;/b&gt; - Уникальный номер заказа на стороне продавца. &lt;br&gt;Тип: AN..32 &lt;br&gt;&lt;br&gt;&lt;b&gt;paymentToken&lt;/b&gt; - Токен, полученный от Google Pay и закодированный в Base64. &lt;br&gt;Тип: AN..8192 &lt;br&gt;&lt;br&gt;&lt;b&gt;ip&lt;/b&gt; - IP-адрес плательщика. &lt;br&gt;Тип: ANS..39 &lt;br&gt;&lt;br&gt;&lt;br&gt;Дополнительные параметры: &lt;br&gt;&lt;br&gt;&lt;b&gt;description&lt;/b&gt; - Описание заказа. &lt;br&gt;Тип: AN..512 &lt;br&gt;&lt;br&gt;&lt;b&gt;language&lt;/b&gt; - Язык в кодировке ISO 639-1. Если не указан, будет использован язык, указанный в настройках магазина как язык по умолчанию. &lt;br&gt;Тип: A2 &lt;br&gt;&lt;br&gt;&lt;b&gt;additionalParameters&lt;/b&gt; - Дополнительные параметры заказа, которые сохраняются для просмотра из личного кабинета продавца. Их следует указывать в следующем формате: "имя1": "значение1", "имя2": "значение2". Каждую новую пару имени и значения параметра следует отделять запятой. &lt;br&gt;&lt;br&gt;&lt;b&gt;clientId&lt;/b&gt; - Номер клиента, для которого следует создать связку для проведения регулярных платежей. Следует указывать, только если проводится технический платёж для последующих регулярных платежей. &lt;br&gt;Тип: ANS..255 &lt;br&gt;&lt;br&gt;&lt;b&gt;preAuth&lt;/b&gt; - Параметр, определяющий необходимость предварительной авторизации (блокирования средств на счету клиента до их списания). &lt;br&gt;&lt;br&gt;Доступны следующие значения: &lt;br&gt;&lt;br&gt;true (истина) - параметр включён, оплата происходит с предавторизацией (происходит блокирование средств клиента до списания); &lt;br&gt;false (ложь) - параметр выключен (списание происходит сразу). &lt;br&gt;&lt;br&gt;Если параметр не указан в запросе, списание происходит сразу. &lt;br&gt;&lt;br&gt;&lt;b&gt;currencyCode&lt;/b&gt; - Цифровой код валюты платежа ISO 4217. Если не указан, считается равным 643 (российский рубль). &lt;br&gt;Тип: N3
        /// </remarks>
        /// <param name="request">request</param>
        /// <returns>OK</returns>
        /// <exception cref="AlfabankException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SamsungPayPaymentResponse> SamsungPaymentDirectAsync(SamsungPayDirectPaymentRequest request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// YandexPay без предварительной регистрации заказа
        /// </summary>
        /// <remarks>
        /// Перевести API для Мерчантов со своей платежной страницей на формат без предварительного создания заказа.
        /// </remarks>
        /// <param name="request">request</param>
        /// <returns>OK</returns>
        /// <exception cref="AlfabankException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<YandexPayResponse> YandexInstantPaymentAsync(YandexPayInstantPaymentRequestRest request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Запрос на оплату через Yandex Pay.
        /// </summary>
        /// <remarks>
        /// Для проведения платежа через Yandex Pay используется запрос payment.do.
        /// </remarks>
        /// <param name="yandexPayRequestRest">yandexPayRequestRest</param>
        /// <returns>OK</returns>
        /// <exception cref="AlfabankException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<YandexPayResponse> YandexPaymentAsync(YandexPayPaymentRequestRest yandexPayRequestRest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Запрос на оплату через Yandex Pay с расшифрованным токеном.
        /// </summary>
        /// <remarks>
        /// Для проведения платежа через Yandex Pay с расшифрованным токеном.
        /// </remarks>
        /// <param name="request">request</param>
        /// <returns>OK</returns>
        /// <exception cref="AlfabankException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<YandexPayResponse> YandexPaymentDirectAsync(YandexPayDirectRequestRest request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Client : IClient
    {
        #pragma warning disable 8618
        private string _baseUrl;
        #pragma warning restore 8618

        private static System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings, true);
        private Newtonsoft.Json.JsonSerializerSettings _instanceSettings;

    #pragma warning disable CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        public Client()
    #pragma warning restore CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        {
            BaseUrl = "https://alfa.rbsuat.com/payment";
            Initialize();
        }

        private static Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
        {
            var settings = new Newtonsoft.Json.JsonSerializerSettings();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public string BaseUrl
        {
            get { return _baseUrl; }
            set
            {
                _baseUrl = value;
                if (!string.IsNullOrEmpty(_baseUrl) && !_baseUrl.EndsWith("/"))
                    _baseUrl += '/';
            }
        }

        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _instanceSettings ?? _settings.Value; } }

        static partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);

        partial void Initialize();

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Запрос на оплату через Apple Pay.
        /// </summary>
        /// <remarks>
        /// Для проведения платежа через Apple Pay используется запрос payment.do. &lt;br&gt;&lt;br&gt;Указывается в виде списка JSON-параметров типа: "имя1": "значение1", "имя2": "значение2". &lt;br&gt;&lt;br&gt;Обязательные параметры: &lt;br&gt;&lt;br&gt;&lt;b&gt;merchant&lt;/b&gt; - Имя входа продавца в системе платёжного шлюза. &lt;br&gt;Тип: AN..30 &lt;br&gt;&lt;br&gt;&lt;b&gt;orderNumber&lt;/b&gt; - Уникальный номер заказа на стороне продавца. &lt;br&gt;Тип: AN..32 &lt;br&gt;&lt;br&gt;&lt;b&gt;paymentToken&lt;/b&gt; - Параметр paymentToken должен содержать закодированное в Base64 значение свойства paymentData, полученного из объекта PKPaymentToken Object от системы Apple Pay (подробнее см. документацию Apple Pay). &lt;br&gt;Тип: AN..8192 &lt;br&gt;&lt;br&gt;&lt;br&gt;Дополнительные параметры: &lt;br&gt;&lt;br&gt;&lt;b&gt;description&lt;/b&gt; - Описание заказа. &lt;br&gt;Тип: AN..512 &lt;br&gt;&lt;br&gt;&lt;b&gt;language&lt;/b&gt; - Язык в кодировке ISO 639-1. Если не указан, будет использован язык, указанный в настройках магазина как язык по умолчанию. &lt;br&gt;Тип: A2 &lt;br&gt;&lt;br&gt;&lt;b&gt;additionalParameters&lt;/b&gt; - Дополнительные параметры заказа, которые сохраняются для просмотра из личного кабинета продавца. Их следует указывать в следующем формате: "имя1": "значение1", "имя2": "значение2". Каждую новую пару имени и значения параметра следует отделять запятой. &lt;br&gt;&lt;br&gt;&lt;b&gt;clientId&lt;/b&gt; - Номер клиента, для которого следует создать связку для проведения регулярных платежей. Следует указывать, только если проводится технический платёж для последующих регулярных платежей. &lt;br&gt;Тип: ANS..255 &lt;br&gt;&lt;br&gt;&lt;b&gt;preAuth&lt;/b&gt; - Параметр, определяющий необходимость предварительной авторизации (блокирования средств на счету клиента до их списания). &lt;br&gt;&lt;br&gt;Доступны следующие значения: &lt;br&gt;true (истина) - параметр включён, оплата происходит с предавторизацией (происходит блокирование средств клиента до списания); &lt;br&gt;false (ложь) - параметр выключен (списание происходит сразу). &lt;br&gt;&lt;br&gt;Если параметр не указан в запросе, списание происходит сразу. &lt;br&gt;&lt;br&gt;Тип: N3 &lt;br&gt;&lt;br&gt;&lt;b&gt;email&lt;/b&gt; - Адрес электронной почты. Обязателен, если у интернет-магазина настроена фискализация и не указан номер телефона. &lt;br&gt;Тип: ANS..* &lt;br&gt;&lt;br&gt;&lt;b&gt;phone&lt;/b&gt; - Номер телефона. Обязателен, если у интернет-магазина настроена фискализация и не указан адрес электронной почты. &lt;br&gt;Тип: ANS.12 &lt;br&gt;&lt;br&gt;&lt;b&gt;failUrl&lt;/b&gt; - Адрес, на который требуется перенаправить пользователя в случае неуспешной оплаты. Адрес должен быть указан полностью, включая используемый протокол (например, https://test.ru вместо test.ru). &lt;br&gt;Тип: AN..512 &lt;br&gt;&lt;br&gt;&lt;b&gt;postAddress&lt;/b&gt; - Адрес доставки товара. &lt;br&gt;Тип: AN..512
        /// </remarks>
        /// <param name="applePayPaymentRequest">applePayPaymentRequest</param>
        /// <returns>OK</returns>
        /// <exception cref="AlfabankException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ApplePayPaymentResponse> ApplePaymentAsync(ApplePayPaymentRequest applePayPaymentRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (applePayPaymentRequest == null)
                throw new System.ArgumentNullException("applePayPaymentRequest");

            var client_ = new System.Net.Http.HttpClient();
            var disposeClient_ = true;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(applePayPaymentRequest, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "applepay/payment.do"
                    urlBuilder_.Append("applepay/payment.do");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ApplePayPaymentResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AlfabankException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 429)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AlfabankException("Too Many Requests", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AlfabankException("Internal Server Error", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 502)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AlfabankException("Bad Gateway", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AlfabankException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Запрос на оплату через Google Pay.
        /// </summary>
        /// <remarks>
        /// Для проведения платежа через Google Pay используется запрос payment.do. &lt;br&gt;&lt;br&gt;Указывается в виде списка JSON-параметров типа: "имя1": "значение1", "имя2": "значение2". &lt;br&gt;&lt;br&gt;Обязательные параметры: &lt;br&gt;&lt;br&gt;&lt;b&gt;merchant&lt;/b&gt; - Имя входа продавца в системе платёжного шлюза. &lt;br&gt;Тип: AN..30 &lt;br&gt;&lt;br&gt;&lt;b&gt;orderNumber&lt;/b&gt; - Уникальный номер заказа на стороне продавца. &lt;br&gt;Тип: AN..32 &lt;br&gt;&lt;br&gt;&lt;b&gt;paymentToken&lt;/b&gt; - Токен, полученный от Google Pay и закодированный в Base64. &lt;br&gt;Тип: AN..8192 &lt;br&gt;&lt;br&gt;&lt;b&gt;amount&lt;/b&gt; - Сумма платежа в минимальный единицах валюты (например, в копейках). &lt;br&gt;Тип: N..20 &lt;br&gt;&lt;br&gt;&lt;b&gt;ip&lt;/b&gt; - IP-адрес плательщика. &lt;br&gt;Тип: ANS..39 &lt;br&gt;&lt;br&gt;&lt;b&gt;returnUrl&lt;/b&gt; - Адрес, на который требуется перенаправить пользователя в случае успешной оплаты. Адрес должен быть указан полностью, включая используемый протокол (например, https://test.ru вместо test.ru). &lt;br&gt;Тип: AN..512 &lt;br&gt;&lt;br&gt;&lt;br&gt;Дополнительные параметры: &lt;br&gt;&lt;br&gt;&lt;b&gt;description&lt;/b&gt; - Описание заказа. &lt;br&gt;Тип: AN..512 &lt;br&gt;&lt;br&gt;&lt;b&gt;language&lt;/b&gt; - Язык в кодировке ISO 639-1. Если не указан, будет использован язык, указанный в настройках магазина как язык по умолчанию. &lt;br&gt;Тип: A2 &lt;br&gt;&lt;br&gt;&lt;b&gt;additionalParameters&lt;/b&gt; - Дополнительные параметры заказа, которые сохраняются для просмотра из личного кабинета продавца. Их следует указывать в следующем формате: "имя1": "значение1", "имя2": "значение2". Каждую новую пару имени и значения параметра следует отделять запятой. &lt;br&gt;&lt;br&gt;&lt;b&gt;clientId&lt;/b&gt; - Номер клиента, для которого следует создать связку для проведения регулярных платежей. Следует указывать, только если проводится технический платёж для последующих регулярных платежей. &lt;br&gt;Тип: ANS..255 &lt;br&gt;&lt;br&gt;&lt;b&gt;preAuth&lt;/b&gt; - Параметр, определяющий необходимость предварительной авторизации (блокирования средств на счету клиента до их списания). &lt;br&gt;&lt;br&gt;Доступны следующие значения: &lt;br&gt;&lt;br&gt;true (истина) - параметр включён, оплата происходит с предавторизацией (происходит блокирование средств клиента до списания); &lt;br&gt;false (ложь) - параметр выключен (списание происходит сразу). &lt;br&gt;&lt;br&gt;Если параметр не указан в запросе, списание происходит сразу. &lt;br&gt;&lt;br&gt;&lt;b&gt;currencyCode&lt;/b&gt; - Цифровой код валюты платежа ISO 4217. Если не указан, считается равным 643 (российский рубль). &lt;br&gt;Тип: N3 &lt;br&gt;&lt;br&gt;&lt;b&gt;email&lt;/b&gt; - Адрес электронной почты. Обязателен, если у интернет-магазина настроена фискализация и не указан номер телефона. &lt;br&gt;Тип: ANS..40 &lt;br&gt;&lt;br&gt;&lt;b&gt;phone&lt;/b&gt; - Номер телефона. Обязателен, если у интернет-магазина настроена фискализация и не указан адрес электронной почты. &lt;br&gt;Тип: ANS.12 &lt;br&gt;&lt;br&gt;&lt;b&gt;failUrl&lt;/b&gt; - Адрес, на который требуется перенаправить пользователя в случае неуспешной оплаты. Адрес должен быть указан полностью, включая используемый протокол (например, https://test.ru вместо test.ru). &lt;br&gt;Тип: AN..512 &lt;br&gt;&lt;br&gt;&lt;b&gt;postAddress&lt;/b&gt; - Адрес доставки товара. &lt;br&gt;Тип: AN..512
        /// </remarks>
        /// <param name="request">request</param>
        /// <returns>OK</returns>
        /// <exception cref="AlfabankException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<GooglePayResponse> GooglePaymentAsync(GooglePayRequest request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (request == null)
                throw new System.ArgumentNullException("request");

            var client_ = new System.Net.Http.HttpClient();
            var disposeClient_ = true;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(request, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "google/payment.do"
                    urlBuilder_.Append("google/payment.do");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GooglePayResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AlfabankException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 429)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AlfabankException("Too Many Requests", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AlfabankException("Internal Server Error", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 502)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AlfabankException("Bad Gateway", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AlfabankException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// ${mirPay.description}
        /// </summary>
        /// <remarks>
        /// ${mirPay.notes}
        /// </remarks>
        /// <param name="paymentRequest">paymentRequest</param>
        /// <returns>OK</returns>
        /// <exception cref="AlfabankException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<MirPayResponse> MirPayAsync(MirPayPaymentRequest paymentRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (paymentRequest == null)
                throw new System.ArgumentNullException("paymentRequest");

            var client_ = new System.Net.Http.HttpClient();
            var disposeClient_ = true;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(paymentRequest, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "mir/payment.do"
                    urlBuilder_.Append("mir/payment.do");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MirPayResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AlfabankException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 429)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AlfabankException("Too Many Requests", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AlfabankException("Internal Server Error", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 502)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AlfabankException("Bad Gateway", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AlfabankException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// ${mirPayDirect.description}
        /// </summary>
        /// <remarks>
        /// ${mirPayDirect.notes}
        /// </remarks>
        /// <param name="paymentRequest">paymentRequest</param>
        /// <returns>OK</returns>
        /// <exception cref="AlfabankException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<MirPayResponse> MirPayDirectAsync(MirPayPaymentRequest paymentRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (paymentRequest == null)
                throw new System.ArgumentNullException("paymentRequest");

            var client_ = new System.Net.Http.HttpClient();
            var disposeClient_ = true;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(paymentRequest, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "mir/paymentDirect.do"
                    urlBuilder_.Append("mir/paymentDirect.do");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MirPayResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AlfabankException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 429)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AlfabankException("Too Many Requests", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AlfabankException("Internal Server Error", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 502)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AlfabankException("Bad Gateway", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AlfabankException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// ${mirPayTokenCallback.description}
        /// </summary>
        /// <remarks>
        /// ${mirPayTokenCallback.notes}
        /// </remarks>
        /// <param name="request">request</param>
        /// <param name="merchantId">merchantId</param>
        /// <param name="orderId">orderId</param>
        /// <returns>OK</returns>
        /// <exception cref="AlfabankException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<MirPayResponse> MirPayTokenCallbackAsync(MirPayTokenCallbackRequest request, string merchantId, string orderId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (merchantId == null)
                throw new System.ArgumentNullException("merchantId");

            if (orderId == null)
                throw new System.ArgumentNullException("orderId");

            if (request == null)
                throw new System.ArgumentNullException("request");

            var client_ = new System.Net.Http.HttpClient();
            var disposeClient_ = true;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(request, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "mir/{merchantId}/{orderId}/callback.do"
                    urlBuilder_.Append("mir/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(merchantId, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('/');
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(orderId, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/callback.do");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MirPayResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AlfabankException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 202)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MirPayResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AlfabankException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AlfabankException("Bad request", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AlfabankException("Restricted", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AlfabankException("Resource not found", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AlfabankException("Too Many Requests", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AlfabankException("Internal Server Error", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AlfabankException("Service temporary unavailable", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AlfabankException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// ${mirPayTokenCertificate.description}
        /// </summary>
        /// <remarks>
        /// ${mirPayTokenCertificate.notes}
        /// </remarks>
        /// <param name="request">request</param>
        /// <param name="merchantId">merchantId</param>
        /// <param name="orderId">orderId</param>
        /// <returns>OK</returns>
        /// <exception cref="AlfabankException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<MirPayResponse> MirPayTokenCertificateAsync(MirPayTokenCallbackRequest request, string merchantId, string orderId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (merchantId == null)
                throw new System.ArgumentNullException("merchantId");

            if (orderId == null)
                throw new System.ArgumentNullException("orderId");

            if (request == null)
                throw new System.ArgumentNullException("request");

            var client_ = new System.Net.Http.HttpClient();
            var disposeClient_ = true;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(request, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "mir/{merchantId}/{orderId}/certificate.do"
                    urlBuilder_.Append("mir/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(merchantId, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('/');
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(orderId, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/certificate.do");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MirPayResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AlfabankException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 202)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MirPayResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AlfabankException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AlfabankException("Bad request", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AlfabankException("Restricted", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AlfabankException("Resource not found", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AlfabankException("Too Many Requests", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AlfabankException("Internal Server Error", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AlfabankException("Service temporary unavailable", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AlfabankException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns the payment schedule from PODELI service
        /// </summary>
        /// <remarks>
        /// The merchant must have permission to pay with "Podeli" service
        /// </remarks>
        /// <param name="request">request</param>
        /// <returns>OK</returns>
        /// <exception cref="AlfabankException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<PodeliPaymentScheduleApiResponse> GetPaymentScheduleUsingPOSTAsync(PodeliPaymentScheduleApiRequest request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (request == null)
                throw new System.ArgumentNullException("request");

            var client_ = new System.Net.Http.HttpClient();
            var disposeClient_ = true;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(request, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "podeli/api/calculate.do"
                    urlBuilder_.Append("podeli/api/calculate.do");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PodeliPaymentScheduleApiResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AlfabankException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 429)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AlfabankException("Too Many Requests", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AlfabankException("Internal Server Error", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 502)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AlfabankException("Bad Gateway", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AlfabankException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Registers the order in the "Podeli" service and returns a link to the payment in the service
        /// </summary>
        /// <remarks>
        /// The merchant must have permission to pay with "Podeli" service
        /// </remarks>
        /// <param name="request">request</param>
        /// <returns>OK</returns>
        /// <exception cref="AlfabankException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<PodeliMerchantApiInitResponse> InitPaymentUsingPOSTAsync(PodeliMerchantApiInitRequest request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (request == null)
                throw new System.ArgumentNullException("request");

            var client_ = new System.Net.Http.HttpClient();
            var disposeClient_ = true;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(request, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "podeli/api/init.do"
                    urlBuilder_.Append("podeli/api/init.do");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PodeliMerchantApiInitResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AlfabankException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 429)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AlfabankException("Too Many Requests", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AlfabankException("Internal Server Error", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 502)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AlfabankException("Bad Gateway", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AlfabankException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Запрос на проведения рекуррентного платежа.
        /// </summary>
        /// <remarks>
        /// Для проведения рекуррентного платежа используется запрос recurrentPayment.do. &lt;br&gt;&lt;br&gt;Указывается в виде списка JSON-параметров типа: "имя1": "значение1", "имя2": "значение2". &lt;br&gt;&lt;br&gt;Обязательные параметры: &lt;br&gt;&lt;br&gt;&lt;b&gt;userName&lt;/b&gt; - Имя пользователя с доступом к API платёжного шлюза. &lt;br&gt;Тип: AN..30 &lt;br&gt;&lt;br&gt;&lt;b&gt;password&lt;/b&gt; - Пароль пользователя с доступом к API платёжного шлюза. &lt;br&gt;Тип: AN..30 &lt;br&gt;&lt;br&gt;&lt;b&gt;orderNumber&lt;/b&gt; - Номер заказа. &lt;br&gt;Тип: AN..32 &lt;br&gt;&lt;br&gt;&lt;b&gt;amount&lt;/b&gt; - Сумма заказа в минимальных единицах валюты (например, в копейках). &lt;br&gt;Тип: N..20 &lt;br&gt;&lt;br&gt;&lt;b&gt;bindingId&lt;/b&gt; - Идентификатор связки. &lt;br&gt;Тип: AN..255 &lt;br&gt;&lt;br&gt;&lt;br&gt;Дополнительные параметры: &lt;br&gt;&lt;br&gt;&lt;b&gt;description&lt;/b&gt; - Описание заказа. &lt;br&gt;Тип: AN..512 &lt;br&gt;&lt;br&gt;&lt;b&gt;language&lt;/b&gt; - Язык в кодировке ISO 639-1. Если не указан, будет использован язык, указанный в настройках магазина как язык по умолчанию. &lt;br&gt;Тип: A2 &lt;br&gt;&lt;br&gt;&lt;b&gt;additionalParameters&lt;/b&gt; - Дополнительные параметры заказа, которые сохраняются для просмотра из личного кабинета продавца. Их следует указывать в следующем формате: "имя1": "значение1", "имя2": "значение2". Каждую новую пару имени и значения параметра следует отделять запятой. &lt;br&gt;&lt;br&gt;&lt;b&gt;clientId&lt;/b&gt; - Номер клиента, для которого следует создать связку для проведения регулярных платежей. Следует указывать, только если проводится технический платёж для последующих регулярных платежей. &lt;br&gt;Тип: ANS..255 &lt;br&gt;&lt;br&gt;&lt;b&gt;preAuth&lt;/b&gt; - Параметр, определяющий необходимость предварительной авторизации (блокирования средств на счету клиента до их списания). &lt;br&gt;&lt;br&gt;Доступны следующие значения: &lt;br&gt;true (истина) - параметр включён, оплата происходит с предавторизацией (происходит блокирование средств клиента до списания); &lt;br&gt;false (ложь) - параметр выключен (списание происходит сразу). &lt;br&gt;&lt;br&gt;Если параметр не указан в запросе, списание происходит сразу. &lt;br&gt;&lt;br&gt;&lt;b&gt;currency&lt;/b&gt; - Цифровой код валюты ISO 4217. &lt;br&gt;Тип: N3
        /// </remarks>
        /// <param name="recurrentPaymentRequest">recurrentPaymentRequest</param>
        /// <returns>OK</returns>
        /// <exception cref="AlfabankException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<RecurrentPaymentResponse> RecurrentPaymentAsync(RecurrentPaymentRequest recurrentPaymentRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (recurrentPaymentRequest == null)
                throw new System.ArgumentNullException("recurrentPaymentRequest");

            var client_ = new System.Net.Http.HttpClient();
            var disposeClient_ = true;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(recurrentPaymentRequest, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "recurrentPayment.do"
                    urlBuilder_.Append("recurrentPayment.do");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<RecurrentPaymentResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AlfabankException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 429)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AlfabankException("Too Many Requests", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AlfabankException("Internal Server Error", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 502)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AlfabankException("Bad Gateway", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AlfabankException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Запрос добавления дополнительных параметров к заказу.
        /// </summary>
        /// <remarks>
        /// Для добавления дополнительных параметров к заказу используется запрос addParams.do.
        /// </remarks>
        /// <param name="userName">Логин магазина, полученный при подключении. &lt;br&gt;Тип: AN..30</param>
        /// <param name="password">Пароль магазина, полученный при подключении. &lt;br&gt;Тип: AN..30</param>
        /// <param name="orderId">Номер заказа в платежной системе. Уникален в пределах системы. &lt;br&gt;Тип: ANS36</param>
        /// <param name="params">Поля для передачи дополнительных параметров вида {"param":"value","param2":"value2"}.</param>
        /// <param name="language">Язык в кодировке ISO 639-1. Если не указан, будет использован язык, указанный в настройках магазина как язык по умолчанию (default language). &lt;br&gt;Тип: A2</param>
        /// <returns>OK</returns>
        /// <exception cref="AlfabankException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<OrderResult> AddParamsAsync(string userName, string password, string orderId, string @params, string? language = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (userName == null)
                throw new System.ArgumentNullException("userName");

            if (password == null)
                throw new System.ArgumentNullException("password");

            if (orderId == null)
                throw new System.ArgumentNullException("orderId");

            if (@params == null)
                throw new System.ArgumentNullException("@params");

            var client_ = new System.Net.Http.HttpClient();
            var disposeClient_ = true;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "*/*");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "rest/addParams.do"
                    urlBuilder_.Append("rest/addParams.do");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("userName")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(userName, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Append(System.Uri.EscapeDataString("password")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(password, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Append(System.Uri.EscapeDataString("orderId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(orderId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Append(System.Uri.EscapeDataString("params")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(@params, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    if (language != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("language")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(language, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<OrderResult>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AlfabankException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 429)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AlfabankException("Too Many Requests", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AlfabankException("Internal Server Error", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 502)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AlfabankException("Bad Gateway", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AlfabankException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Запрос активации связки.
        /// </summary>
        /// <remarks>
        /// Для активации связки используется запрос bindCard.do.
        /// </remarks>
        /// <param name="userName">Логин магазина, полученный при подключении. &lt;br&gt;Тип: AN..30</param>
        /// <param name="password">Пароль магазина, полученный при подключении. &lt;br&gt;Тип: AN..30</param>
        /// <param name="bindingId">Идентификатор связки созданной при оплате заказа или использованной для оплаты. Присутствует только если магазину разрешено создание связок. &lt;br&gt;Тип: AN..255</param>
        /// <param name="phone">Телефон клиента. Параметр обязателен для некоторых внешних хранилищ связок.</param>
        /// <param name="externalBindingId">Идентификатор связки во внешнем хранилище связок.</param>
        /// <param name="externalBindingSystem">Тип внешнего хранилища связок.</param>
        /// <param name="fingerprint">Данные об устройстве клиента. Параметр обязателен для некоторых внешних хранилищ связок.</param>
        /// <param name="language">Язык в кодировке ISO 639-1. Если не указан, будет использован язык, указанный в настройках магазина как язык по умолчанию. &lt;br&gt;Тип: A2</param>
        /// <returns>OK</returns>
        /// <exception cref="AlfabankException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<OrderResult> BindCardAsync(string userName, string password, string bindingId, string? phone = null, string? externalBindingId = null, string? externalBindingSystem = null, string? fingerprint = null, string? language = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (userName == null)
                throw new System.ArgumentNullException("userName");

            if (password == null)
                throw new System.ArgumentNullException("password");

            if (bindingId == null)
                throw new System.ArgumentNullException("bindingId");

            var client_ = new System.Net.Http.HttpClient();
            var disposeClient_ = true;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "*/*");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "rest/bindCard.do"
                    urlBuilder_.Append("rest/bindCard.do");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("userName")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(userName, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Append(System.Uri.EscapeDataString("password")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(password, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Append(System.Uri.EscapeDataString("bindingId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(bindingId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    if (phone != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("phone")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(phone, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (externalBindingId != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("externalBindingId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(externalBindingId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (externalBindingSystem != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("externalBindingSystem")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(externalBindingSystem, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (fingerprint != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("fingerprint")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(fingerprint, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (language != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("language")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(language, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<OrderResult>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AlfabankException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 429)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AlfabankException("Too Many Requests", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AlfabankException("Internal Server Error", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 502)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AlfabankException("Bad Gateway", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AlfabankException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Запрос отмены неоплаченного заказа.
        /// </summary>
        /// <remarks>
        /// Для отмены заказа используется запрос decline.do.
        /// </remarks>
        /// <param name="userName">Логин Api пользователя.</param>
        /// <param name="password">Пароль Api пользователя</param>
        /// <param name="language">Язык в кодировке ISO 639-1. Если не указан, будет использован язык, указанный в настройках магазина как язык по умолчанию.</param>
        /// <param name="merchantLogin">Логин магазина, полученный при подключении.</param>
        /// <param name="orderId">ID заказа. Уникален в пределах системы RBS.</param>
        /// <param name="orderNumber">Номер заказа. Уникален в пределах магазина.</param>
        /// <returns>OK</returns>
        /// <exception cref="AlfabankException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<OrderResult> DeclineOrderAsync(string userName, string password, string? language = null, string? merchantLogin = null, string? orderId = null, string? orderNumber = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (userName == null)
                throw new System.ArgumentNullException("userName");

            if (password == null)
                throw new System.ArgumentNullException("password");

            var client_ = new System.Net.Http.HttpClient();
            var disposeClient_ = true;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "*/*");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "rest/decline.do"
                    urlBuilder_.Append("rest/decline.do");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("userName")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(userName, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Append(System.Uri.EscapeDataString("password")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(password, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    if (language != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("language")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(language, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (merchantLogin != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("merchantLogin")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(merchantLogin, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (orderId != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("orderId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(orderId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (orderNumber != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("orderNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(orderNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<OrderResult>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AlfabankException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 429)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AlfabankException("Too Many Requests", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AlfabankException("Internal Server Error", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 502)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AlfabankException("Bad Gateway", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AlfabankException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Запрос отмены неоплаченного заказа.
        /// </summary>
        /// <remarks>
        /// Для отмены заказа используется запрос decline.do.
        /// </remarks>
        /// <param name="mdOrder">ID заказа. Уникален в пределах системы RBS.</param>
        /// <returns>OK</returns>
        /// <exception cref="AlfabankException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<OrderResult> DeclineOrderByClientAsync(string? mdOrder = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var client_ = new System.Net.Http.HttpClient();
            var disposeClient_ = true;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "*/*");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "rest/declineByClient.do"
                    urlBuilder_.Append("rest/declineByClient.do");
                    urlBuilder_.Append('?');
                    if (mdOrder != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("mdOrder")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(mdOrder, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<OrderResult>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AlfabankException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 429)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AlfabankException("Too Many Requests", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AlfabankException("Internal Server Error", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 502)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AlfabankException("Bad Gateway", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AlfabankException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Запрос оплаты заказа.
        /// </summary>
        /// <remarks>
        /// Для оплаты заказа используется запрос deposit.do.
        /// </remarks>
        /// <param name="userName">Логин магазина, полученный при подключении. &lt;br&gt;Тип: AN..30</param>
        /// <param name="password">Пароль магазина, полученный при подключении. &lt;br&gt;Тип: AN..30</param>
        /// <param name="orderId">Номер заказа в платежной системе. Уникален в пределах системы. &lt;br&gt;Тип: ANS36</param>
        /// <param name="amount">Сумма списания в валюте заказа. Может быть меньше или равна сумме предавторизации. Не может быть меньше 1 рубля. &lt;br&gt;Тип: N..12</param>
        /// <param name="language">Язык в кодировке ISO 639-1. Если не указан, будет использован язык, указанный в настройках магазина как язык по умолчанию (default language). &lt;br&gt;Тип: A2</param>
        /// <param name="jsonParams">Блок с атрибутами дополнительных параметров мерчанта. &lt;br&gt;Формат вида: {"Имя1": "Значение1", "Имя2": "Значение2"}.</param>
        /// <param name="depositItems">Блок для передачи товарных позиций корзины для оплаты. &lt;br&gt;Пример: [{"positionId":1,"name":"Билет на 07.09.2017 17:30 Ряд 7 Место 7","quantity":{"value":1,"measure":"шт."},"itemCode":"14259","itemAmount":90000,"itemPrice":90000,"tax":{"taxType":0}}]</param>
        /// <param name="agent">Блок для передачи данных об агенте. &lt;br&gt;Формат вида: {"Имя1": "Значение1", "Имя2": "Значение2"}.</param>
        /// <param name="supplierPhones">Массив телефонов поставщика в формате +N. &lt;br&gt;Тип: массив ANS..19</param>
        /// <param name="depositType">Тип завершения, допустимые значения: &lt;br&gt;0 (или не указан) - обычный вариант завершения &lt;br&gt;1 - Частичное промежуточное завершение &lt;br&gt;2 - Финальное частичное завершение &lt;br&gt;</param>
        /// <param name="currency">Код валюты платежа ISO 4217.</param>
        /// <param name="multipleCompletionOrderDescription">Комментарий к промежуточному завершению (будет сохранен в доп. параметры).</param>
        /// <returns>OK</returns>
        /// <exception cref="AlfabankException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<OrderResult> DepositAsync(string userName, string password, string orderId, long amount, string? language = null, string? jsonParams = null, string? depositItems = null, string? agent = null, string? supplierPhones = null, long? depositType = null, string? currency = null, string? multipleCompletionOrderDescription = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (userName == null)
                throw new System.ArgumentNullException("userName");

            if (password == null)
                throw new System.ArgumentNullException("password");

            if (orderId == null)
                throw new System.ArgumentNullException("orderId");

            if (amount == null)
                throw new System.ArgumentNullException("amount");

            var client_ = new System.Net.Http.HttpClient();
            var disposeClient_ = true;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "*/*");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "rest/deposit.do"
                    urlBuilder_.Append("rest/deposit.do");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("userName")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(userName, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Append(System.Uri.EscapeDataString("password")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(password, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Append(System.Uri.EscapeDataString("orderId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(orderId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Append(System.Uri.EscapeDataString("amount")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(amount, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    if (language != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("language")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(language, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (jsonParams != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("jsonParams")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(jsonParams, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (depositItems != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("depositItems")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(depositItems, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (agent != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("agent")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(agent, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (supplierPhones != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("supplierPhones")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(supplierPhones, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (depositType != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("depositType")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(depositType, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (currency != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("currency")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(currency, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (multipleCompletionOrderDescription != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("multipleCompletionOrderDescription")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(multipleCompletionOrderDescription, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<OrderResult>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AlfabankException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 429)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AlfabankException("Too Many Requests", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AlfabankException("Internal Server Error", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 502)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AlfabankException("Bad Gateway", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AlfabankException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Запрос изменения срока действия связки.
        /// </summary>
        /// <remarks>
        /// Для изменения срока действия связки используется запрос extendBinding.do.
        /// </remarks>
        /// <param name="userName">Логин магазина, полученный при подключении. &lt;br&gt;Тип: AN..30</param>
        /// <param name="password">Пароль магазина, полученный при подключении. &lt;br&gt;Тип: AN..30</param>
        /// <param name="bindingId">Идентификатор связки созданной при оплате заказа или использованной для оплаты. Присутствует только если магазину разрешено создание связок. &lt;br&gt;Тип: ANS36</param>
        /// <param name="newExpiry">Новая дата (год и месяц) окончания срока действия связки в формате YYYYMM. &lt;br&gt;Тип: N6</param>
        /// <param name="language">Язык в кодировке ISO 639-1. Если не указан, будет использован язык, указанный в настройках магазина как язык по умолчанию. &lt;br&gt;Тип: A2</param>
        /// <returns>OK</returns>
        /// <exception cref="AlfabankException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ExtendBindingResponse> ExtendBindingAsync(string userName, string password, string bindingId, string newExpiry, string? language = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (userName == null)
                throw new System.ArgumentNullException("userName");

            if (password == null)
                throw new System.ArgumentNullException("password");

            if (bindingId == null)
                throw new System.ArgumentNullException("bindingId");

            if (newExpiry == null)
                throw new System.ArgumentNullException("newExpiry");

            var client_ = new System.Net.Http.HttpClient();
            var disposeClient_ = true;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "*/*");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "rest/extendBinding.do"
                    urlBuilder_.Append("rest/extendBinding.do");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("userName")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(userName, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Append(System.Uri.EscapeDataString("password")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(password, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Append(System.Uri.EscapeDataString("bindingId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(bindingId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Append(System.Uri.EscapeDataString("newExpiry")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(newExpiry, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    if (language != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("language")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(language, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ExtendBindingResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AlfabankException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 429)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AlfabankException("Too Many Requests", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AlfabankException("Internal Server Error", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 502)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AlfabankException("Bad Gateway", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AlfabankException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Запрос передачи PARes от ACS
        /// </summary>
        /// <remarks>
        /// Для передачи PARes от ACS используется запрос finish3dsPayment.do.
        /// </remarks>
        /// <param name="userName">Логин магазина, полученный при подключении. &lt;br&gt;Тип: AN..30</param>
        /// <param name="password">Пароль магазина, полученный при подключении. &lt;br&gt;Тип: AN..30</param>
        /// <param name="mdOrder">Номер заказа, полученный при регистрации. &lt;br&gt;Тип: ANS36</param>
        /// <param name="paRes">Payer Authentication Response - ответ на идентификацию плательщика.</param>
        /// <returns>OK</returns>
        /// <exception cref="AlfabankException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<PaymentFormResult> Finish3dsPaymentAsync(string userName, string password, string mdOrder, string paRes, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (userName == null)
                throw new System.ArgumentNullException("userName");

            if (password == null)
                throw new System.ArgumentNullException("password");

            if (mdOrder == null)
                throw new System.ArgumentNullException("mdOrder");

            if (paRes == null)
                throw new System.ArgumentNullException("paRes");

            var client_ = new System.Net.Http.HttpClient();
            var disposeClient_ = true;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "*/*");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "rest/finish3dsPayment.do"
                    urlBuilder_.Append("rest/finish3dsPayment.do");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("userName")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(userName, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Append(System.Uri.EscapeDataString("password")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(password, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Append(System.Uri.EscapeDataString("mdOrder")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(mdOrder, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Append(System.Uri.EscapeDataString("paRes")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(paRes, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PaymentFormResult>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AlfabankException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 429)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AlfabankException("Too Many Requests", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AlfabankException("Internal Server Error", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 502)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AlfabankException("Bad Gateway", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AlfabankException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Запрос передачи PARes от ACS
        /// </summary>
        /// <remarks>
        /// Для передачи PARes от ACS используется запрос finish3dsPayment.do.
        /// </remarks>
        /// <param name="userName">Логин магазина, полученный при подключении. &lt;br&gt;Тип: AN..30</param>
        /// <param name="password">Пароль магазина, полученный при подключении. &lt;br&gt;Тип: AN..30</param>
        /// <param name="threeDSServerTransId">Идентификатор транзакции созданный на сервере 3DS. &lt;br&gt;Тип: ANS36</param>
        /// <param name="threeDSVer2MdOrder">Только для Google Pay платежей. Номер заказа, который был зарегистрирован в первой части запроса в рамках 3DS 2.0 операции. &lt;br&gt;Тип: ANS</param>
        /// <param name="threeDSVer2FinishUrl">Адрес finish3DSVer2, который переопределяет стандартный REST метод шлюза. &lt;br&gt;Тип: ANS</param>
        /// <param name="threeDSSDK">Признак, отражающий. используется ли SDK. True/False. &lt;br&gt;Тип: ANS</param>
        /// <param name="threeDSSDKEncData">Обязателен для SDK. Зашифрованные данные о мобильном устройстве. &lt;br&gt;Тип: ANS</param>
        /// <param name="threeDSSDKEphemPubKey">Обязателен для SDK. Публичная составляющая эфемерного ключа для установления сессии взаимодействия в ACS. &lt;br&gt;Тип: ANS</param>
        /// <param name="threeDSSDKAppId">Обязателен для SDK. Уникальный идентификатор SDK. &lt;br&gt;Тип: ANS</param>
        /// <param name="threeDSSDKTransId">Обязателен для SDK. Уникальный идентификатор транзакции внутри SDK. &lt;br&gt;Тип: ANS</param>
        /// <returns>OK</returns>
        /// <exception cref="AlfabankException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<PaymentFormResult> Finish3dsVer2PaymentAsync(string userName, string password, string threeDSServerTransId, string? threeDSVer2MdOrder = null, string? threeDSVer2FinishUrl = null, string? threeDSSDK = null, string? threeDSSDKEncData = null, string? threeDSSDKEphemPubKey = null, string? threeDSSDKAppId = null, string? threeDSSDKTransId = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (userName == null)
                throw new System.ArgumentNullException("userName");

            if (password == null)
                throw new System.ArgumentNullException("password");

            if (threeDSServerTransId == null)
                throw new System.ArgumentNullException("threeDSServerTransId");

            var client_ = new System.Net.Http.HttpClient();
            var disposeClient_ = true;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "*/*");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "rest/finish3dsVer2Payment.do"
                    urlBuilder_.Append("rest/finish3dsVer2Payment.do");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("userName")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(userName, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Append(System.Uri.EscapeDataString("password")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(password, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Append(System.Uri.EscapeDataString("threeDSServerTransId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(threeDSServerTransId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    if (threeDSVer2MdOrder != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("threeDSVer2MdOrder")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(threeDSVer2MdOrder, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (threeDSVer2FinishUrl != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("threeDSVer2FinishUrl")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(threeDSVer2FinishUrl, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (threeDSSDK != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("threeDSSDK")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(threeDSSDK, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (threeDSSDKEncData != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("threeDSSDKEncData")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(threeDSSDKEncData, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (threeDSSDKEphemPubKey != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("threeDSSDKEphemPubKey")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(threeDSSDKEphemPubKey, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (threeDSSDKAppId != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("threeDSSDKAppId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(threeDSSDKAppId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (threeDSSDKTransId != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("threeDSSDKTransId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(threeDSSDKTransId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PaymentFormResult>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AlfabankException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 429)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AlfabankException("Too Many Requests", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AlfabankException("Internal Server Error", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 502)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AlfabankException("Bad Gateway", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AlfabankException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Запрос списка связок клиента с дубликатами.
        /// </summary>
        /// <remarks>
        /// Для получения списка всех связок клиента используется запрос getAllBindings.do.
        /// </remarks>
        /// <param name="userName">Логин магазина, полученный при подключении. &lt;br&gt;Тип: AN..30</param>
        /// <param name="password">Пароль магазина, полученный при подключении. &lt;br&gt;Тип: AN..30</param>
        /// <param name="clientId">Номер (идентификатор) клиента в системе магазина, переданный при регистрации заказа. Присутствует только если магазину разрешено создание связок. &lt;br&gt;Тип: ANS..255</param>
        /// <param name="bindingId">Идентификатор связки созданной при оплате заказа или использованной для оплаты. Присутствует только если магазину разрешено создание связок. &lt;br&gt;Тип: AN..255</param>
        /// <param name="bindingType">Тип связки для связок версии 2 и выше. При включенной опции мерчанта, разрешающей использовать связки V2 - обязателен. Возможные значения: C, I, R, где С - обычная связка, I - связка для рассрочки, R - для рекуррентов.</param>
        /// <param name="showExpired">Отображать ли связки с истёкшим сроком действия карты. &lt;br&gt;Возможные значения: true, false. По умолчанию параметр принимает значение false.</param>
        /// <param name="language">Язык в кодировке ISO 639-1. Если не указан, будет использован язык, указанный в настройках магазина как язык по умолчанию (default language). &lt;br&gt;Тип: A2</param>
        /// <param name="merchantLogin">Логин мерчанта, чьи связки необходимо получить в ответе</param>
        /// <returns>OK</returns>
        /// <exception cref="AlfabankException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<GetBindingsResponse> GetAllBindingsAsync(string userName, string password, string clientId, string? bindingId = null, string? bindingType = null, string? showExpired = null, string? language = null, string? merchantLogin = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (userName == null)
                throw new System.ArgumentNullException("userName");

            if (password == null)
                throw new System.ArgumentNullException("password");

            if (clientId == null)
                throw new System.ArgumentNullException("clientId");

            var client_ = new System.Net.Http.HttpClient();
            var disposeClient_ = true;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "*/*");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "rest/getAllBindings.do"
                    urlBuilder_.Append("rest/getAllBindings.do");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("userName")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(userName, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Append(System.Uri.EscapeDataString("password")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(password, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Append(System.Uri.EscapeDataString("clientId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(clientId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    if (bindingId != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("bindingId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(bindingId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (bindingType != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("bindingType")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(bindingType, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (showExpired != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("showExpired")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(showExpired, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (language != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("language")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(language, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (merchantLogin != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("merchantLogin")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(merchantLogin, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetBindingsResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AlfabankException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 429)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AlfabankException("Too Many Requests", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AlfabankException("Internal Server Error", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 502)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AlfabankException("Bad Gateway", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AlfabankException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Запрос списка связок клиента.
        /// </summary>
        /// <remarks>
        /// Для получения списка связок клиента используется запрос getBindings.do.
        /// </remarks>
        /// <param name="userName">Логин магазина, полученный при подключении. &lt;br&gt;Тип: AN..30</param>
        /// <param name="password">Пароль магазина, полученный при подключении. &lt;br&gt;Тип: AN..30</param>
        /// <param name="clientId">Номер (идентификатор) клиента в системе магазина, переданный при регистрации заказа. Присутствует только если магазину разрешено создание связок. &lt;br&gt;Тип: ANS..255</param>
        /// <param name="bindingId">Идентификатор связки созданной при оплате заказа или использованной для оплаты. Присутствует только если магазину разрешено создание связок. &lt;br&gt;Тип: AN..255</param>
        /// <param name="bindingType">Тип связки для связок версии 2 и выше. При включенной опции мерчанта, разрешающей использовать связки V2 - обязателен. Возможные значения: C, I, R, где С - обычная связка, I - связка для рассрочки, R - для рекуррентов.</param>
        /// <param name="showExpired">Отображать ли связки с истёкшим сроком действия карты. &lt;br&gt;Возможные значения: true, false. По умолчанию параметр принимает значение false.</param>
        /// <param name="language">Язык в кодировке ISO 639-1. Если не указан, будет использован язык, указанный в настройках магазина как язык по умолчанию (default language). &lt;br&gt;Тип: A2</param>
        /// <param name="merchantLogin">Логин мерчанта, чьи связки необходимо получить в ответе</param>
        /// <returns>OK</returns>
        /// <exception cref="AlfabankException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<GetBindingsResponse> GetBindingsAsync(string userName, string password, string clientId, string? bindingId = null, string? bindingType = null, string? showExpired = null, string? language = null, string? merchantLogin = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (userName == null)
                throw new System.ArgumentNullException("userName");

            if (password == null)
                throw new System.ArgumentNullException("password");

            if (clientId == null)
                throw new System.ArgumentNullException("clientId");

            var client_ = new System.Net.Http.HttpClient();
            var disposeClient_ = true;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "*/*");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "rest/getBindings.do"
                    urlBuilder_.Append("rest/getBindings.do");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("userName")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(userName, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Append(System.Uri.EscapeDataString("password")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(password, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Append(System.Uri.EscapeDataString("clientId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(clientId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    if (bindingId != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("bindingId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(bindingId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (bindingType != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("bindingType")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(bindingType, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (showExpired != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("showExpired")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(showExpired, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (language != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("language")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(language, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (merchantLogin != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("merchantLogin")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(merchantLogin, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetBindingsResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AlfabankException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 429)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AlfabankException("Too Many Requests", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AlfabankException("Internal Server Error", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 502)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AlfabankException("Bad Gateway", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AlfabankException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Запрос списка связок банковской карты.
        /// </summary>
        /// <remarks>
        /// Для получения списка связок банковской карты используется запрос getBindingsByCardOrId.do. Параметры pan и bindingId для выполнения запроса взаимозаменяемы, обязательно наличие одного из них.
        /// </remarks>
        /// <param name="userName">Логин магазина, полученный при подключении. &lt;br&gt;Тип: AN..30</param>
        /// <param name="password">Пароль магазина, полученный при подключении. &lt;br&gt;Тип: AN..30</param>
        /// <param name="pan">Номер карты. Обязательно, если не указан bindingId. Поиск по полному номеру карты доступен магазинам только при наличии соответствующего разрешения. &lt;br&gt;Тип: N..19</param>
        /// <param name="bindingId">Идентификатор связки. Обязательно, если не указан pan. Если в запросе передаётся pan, то значение bindingId игнорируется. &lt;br&gt;Тип: AN..255</param>
        /// <param name="showExpired">Параметр определяет необходимость отображать связки с истёкшим сроком действия карты. &lt;br&gt;Возможные значения: true, false. По умолчанию параметр принимает значение false.</param>
        /// <param name="language">Язык в кодировке ISO 639-1. Если не указан, будет использован язык, указанный в настройках магазина как язык по умолчанию. &lt;br&gt;Тип: A2</param>
        /// <param name="bindingType">Тип связки для связок версии 2 и выше. При включенной опции мерчанта, разрешающей использовать связки V2 - обязателен. Возможные значения: C, I, R, где С - обычная связка, I - связка для рассрочки, R - для рекуррентов.</param>
        /// <returns>OK</returns>
        /// <exception cref="AlfabankException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<GetBindingsResponse> GetBindingsByCardOrIdAsync(string userName, string password, string? pan = null, string? bindingId = null, string? showExpired = null, string? language = null, string? bindingType = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (userName == null)
                throw new System.ArgumentNullException("userName");

            if (password == null)
                throw new System.ArgumentNullException("password");

            var client_ = new System.Net.Http.HttpClient();
            var disposeClient_ = true;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "*/*");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "rest/getBindingsByCardOrId.do"
                    urlBuilder_.Append("rest/getBindingsByCardOrId.do");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("userName")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(userName, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Append(System.Uri.EscapeDataString("password")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(password, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    if (pan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("pan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (bindingId != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("bindingId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(bindingId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (showExpired != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("showExpired")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(showExpired, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (language != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("language")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(language, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (bindingType != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("bindingType")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(bindingType, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetBindingsResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AlfabankException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 429)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AlfabankException("Too Many Requests", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AlfabankException("Internal Server Error", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 502)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AlfabankException("Bad Gateway", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AlfabankException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Запрос статистики по платежам за период.
        /// </summary>
        /// <remarks>
        /// Для запроса статистики по платежам за период используется запрос getLastOrdersForMerchants.do.
        /// </remarks>
        /// <param name="userName">Логин магазина, полученный при подключении. &lt;br&gt;Тип: AN..30</param>
        /// <param name="password">Пароль магазина, полученный при подключении. &lt;br&gt;Тип: AN..30</param>
        /// <param name="size">Количество элементов на странице (максимальное значение = 200). &lt;br&gt;Тип: N..3</param>
        /// <param name="from">Дата и время начала периода для выборки заказов в формате yyyyMMddHHmmss. &lt;br&gt;Тип: ANS</param>
        /// <param name="to">Дата и время окончания периода для выборки заказов в формате yyyyMMddHHmmss. &lt;br&gt;Тип: ANS</param>
        /// <param name="transactionStates">В этом блоке необходимо перечислить требуемые состояния заказов. Только заказы, находящиеся в одном из указанных состояний, попадут в отчёт. &lt;br&gt;Возможные значения: CREATED, APPROVED, DEPOSITED, DECLINED, REVERSED, REFUNDED. &lt;br&gt;Тип: A..9</param>
        /// <param name="merchants">Список Логинов мерчантов, чьи транзакции должны попасть в отчёт. Оставьте этот блок пустым, чтобы получить список отчётов по всем доступным мерчантам (дочерним мерчантам и мерчантам, указанным в настройках пользователя). &lt;br&gt;Тип: ANS</param>
        /// <param name="page">При обработке запроса будет сформирован список, разбитый на страницы (с количеством записей size на одной странице). В ответе возвращается страница под номером, указанным в параметре page. Нумерация страниц начинается с 0. Если параметр не указан, будет возвращена страница под номером 0. &lt;br&gt;Тип: N</param>
        /// <param name="searchByCreatedDate">Возможные значения: &lt;br&gt;true – поиск заказов, дата создания которых попадает в заданный период. &lt;br&gt;false – поиск заказов, дата оплаты которых попадает в заданный период (таким образом, в отчёте не могут присутствовать заказы в статусе CREATED и DECLINED). &lt;br&gt;Значение по умолчанию – false.</param>
        /// <param name="language">Язык в кодировке ISO 639-1. Если не указан, считается, что язык – русский. Сообщение ошибке будет возвращено именно на этом языке. &lt;br&gt;Тип: A2</param>
        /// <returns>OK</returns>
        /// <exception cref="AlfabankException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<GetLastOrdersForMerchantsResponse> GetLastOrdersForMerchantsAsync(string userName, string password, string size, string from, string to, string transactionStates, string merchants, string? page = null, string? searchByCreatedDate = null, string? language = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (userName == null)
                throw new System.ArgumentNullException("userName");

            if (password == null)
                throw new System.ArgumentNullException("password");

            if (size == null)
                throw new System.ArgumentNullException("size");

            if (from == null)
                throw new System.ArgumentNullException("from");

            if (to == null)
                throw new System.ArgumentNullException("to");

            if (transactionStates == null)
                throw new System.ArgumentNullException("transactionStates");

            if (merchants == null)
                throw new System.ArgumentNullException("merchants");

            var client_ = new System.Net.Http.HttpClient();
            var disposeClient_ = true;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "*/*");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "rest/getLastOrdersForMerchants.do"
                    urlBuilder_.Append("rest/getLastOrdersForMerchants.do");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("userName")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(userName, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Append(System.Uri.EscapeDataString("password")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(password, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Append(System.Uri.EscapeDataString("size")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(size, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Append(System.Uri.EscapeDataString("from")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(from, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Append(System.Uri.EscapeDataString("to")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(to, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Append(System.Uri.EscapeDataString("transactionStates")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(transactionStates, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Append(System.Uri.EscapeDataString("merchants")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(merchants, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    if (page != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("page")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(page, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (searchByCreatedDate != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("searchByCreatedDate")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(searchByCreatedDate, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (language != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("language")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(language, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetLastOrdersForMerchantsResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AlfabankException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 429)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AlfabankException("Too Many Requests", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AlfabankException("Internal Server Error", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 502)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AlfabankException("Bad Gateway", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AlfabankException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Запрос состояния зарегистрированного заказа.
        /// </summary>
        /// <remarks>
        /// Запрос состояния зарегистрированного заказа. Параметры orderId и orderNumber для выполнения запроса взаимозаменяемы, обязательно наличие одного из них.
        /// </remarks>
        /// <param name="userName">Логин магазина, полученный при подключении. &lt;br&gt;Тип: AN..30</param>
        /// <param name="password">Пароль магазина, полученный при подключении. &lt;br&gt;Тип: AN..30</param>
        /// <param name="orderId">Номер заказа в платежной системе. Уникален в пределах системы. &lt;br&gt;Тип: ANS36</param>
        /// <param name="orderNumber">Номер (идентификатор) заказа в системе магазина. &lt;br&gt;Тип: AN..32</param>
        /// <param name="token">Авторизационный токен. Если представлен, то необходимо указать orderId. &lt;br&gt;Тип: AN..32</param>
        /// <param name="language">Язык в кодировке ISO 639-1. Если не указан, считается, что язык – русский. Сообщение ошибке будет возвращено именно на этом языке. &lt;br&gt;Тип: A2</param>
        /// <param name="merchantLogin">Логин продавца. &lt;br&gt;Тип: AN..100</param>
        /// <returns>OK</returns>
        /// <exception cref="AlfabankException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<GetOrderStatusExtendedResponse> GetOrderStatusExtendedAsync(string userName, string password, string? orderId = null, string? orderNumber = null, string? token = null, string? language = null, string? merchantLogin = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (userName == null)
                throw new System.ArgumentNullException("userName");

            if (password == null)
                throw new System.ArgumentNullException("password");

            var client_ = new System.Net.Http.HttpClient();
            var disposeClient_ = true;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "*/*");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "rest/getOrderStatusExtended.do"
                    urlBuilder_.Append("rest/getOrderStatusExtended.do");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("userName")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(userName, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Append(System.Uri.EscapeDataString("password")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(password, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    if (orderId != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("orderId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(orderId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (orderNumber != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("orderNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(orderNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (token != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("token")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(token, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (language != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("language")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(language, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (merchantLogin != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("merchantLogin")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(merchantLogin, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetOrderStatusExtendedResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AlfabankException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 429)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AlfabankException("Too Many Requests", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AlfabankException("Internal Server Error", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 502)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AlfabankException("Bad Gateway", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AlfabankException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Запрос проведения регистрации и оплаты заказа.
        /// </summary>
        /// <remarks>
        /// Используется для совершения регистрации заказа и его последующей оплаты в рамках одно запроса.
        /// </remarks>
        /// <param name="amount">Сумма списания в валюте заказа. &lt;br&gt;Тип: N..12</param>
        /// <param name="userName">Логин магазина, полученный при подключении. Если вместо аутентификации по логину и паролю используется открытый токен (параметр token), параметр userName передавать не нужно. &lt;br&gt;Тип: AN..30</param>
        /// <param name="password">Пароль магазина, полученный при подключении. Если для аутентификации при регистрации вместо логина и пароля используется открытый токен (параметр token), параметр password передавать не нужно. &lt;br&gt;Тип: AN..30</param>
        /// <param name="token">Открытый ключ, который можно использовать для регистрации заказа. Если для аутентификации при регистрации заказа используются логин и пароль, параметр token передавать не нужно. &lt;br&gt;Тип: AN..30</param>
        /// <param name="currency">Код валюты платежа ISO 4217. Если не указан, считается равным коду валюты по умолчанию. &lt;br&gt;Тип: N3</param>
        /// <param name="clientId">Номер (идентификатор) клиента в системе магазина, переданный при регистрации заказа. Присутствует только если магазину разрешено создание связок. &lt;br&gt;Тип: ANS..255</param>
        /// <param name="ip">ip-адрес плательщика. &lt;br&gt;Тип: ANS..39</param>
        /// <param name="email">Адрес электронной почты плательщика. &lt;br&gt;Тип: ANS..40</param>
        /// <param name="phone">Телефон плательщика</param>
        /// <param name="bindingNotNeeded">Запрет на создание связки после платежа (идентификатор клиента, переданный при регистрации заказа, после совершения платежа будет удалён из деталей заказа). &lt;br&gt;Тип: boolean</param>
        /// <param name="orderNumber">Номер (идентификатор) заказа в системе магазина, уникален для каждого магазина в пределах системы. &lt;br&gt;Тип: AN..32</param>
        /// <param name="description">Описание заказа в свободной форме. &lt;br&gt;Тип: ANS..598</param>
        /// <param name="language">Язык в кодировке ISO 639-1. Если не указан, будет использован язык, указанный в настройках магазина как язык по умолчанию. &lt;br&gt;Тип: A2</param>
        /// <param name="preAuth">Параметр, определяющий необходимость предварительной авторизации (блокирования средств на счету клиента до их списания). &lt;br&gt;Тип: boolean</param>
        /// <param name="seToken">Параметр должен содержать шифрованное значение платежных данных введенных клиентом на стороне ТСП.</param>
        /// <param name="bindingId">Идентификатор связки созданной при оплате заказа или использованной для оплаты. Присутствует только если магазину разрешено создание связок. &lt;br&gt;Тип: AN..255</param>
        /// <param name="pan">Номер карты. &lt;br&gt;Тип: N12...19</param>
        /// <param name="cvc">CVC код. Этот параметр обязателен, если для мерчанта не выбрано разрешение "Может проводить оплату без подтверждения CVC". &lt;br&gt;Тип: N..3</param>
        /// <param name="expiry">Дата (год и месяц) окончания срока действия связки в формате YYYYMM. &lt;br&gt;Тип: N6</param>
        /// <param name="cardHolderName">Имя держателя карты. Указан только после оплаты заказа.</param>
        /// <param name="merchantLogin">Чтобы зарегистрировать заказ от имени дочернего мерчанта, укажите его логин в этом параметре. &lt;br&gt;Тип: AN..255</param>
        /// <param name="sessionTimeoutSecs">Максимальная Продолжительность сессии (сек.)</param>
        /// <param name="expirationDate">Дата и время окончания жизни заказа. Формат: yyyy-MM-dd'T'HH:mm:ss. &lt;br&gt;Если этот параметр не передаётся в запросе, то для определения времени окончания жизни заказа используется sessionTimeoutSecs. &lt;br&gt;Тип: ANS</param>
        /// <param name="backUrl">Адрес, на который требуется перенаправить пользователя в случае успешной оплаты. &lt;br&gt;Должен быть указан полностью, включая используемый протокол (например, https://test.ru вместо test.ru). &lt;br&gt;В противном случае пользователь будет перенаправлен по адресу следующего вида: http://&lt;адрес_платёжного_шлюза&gt;/&lt;адрес_продавца&gt;. &lt;br&gt;Тип: AN..512</param>
        /// <param name="failUrl">Адрес, на который требуется перенаправить пользователя в случае неуспешной оплаты. &lt;br&gt;Должен быть указан полностью, включая используемый протокол (например, https://test.ru вместо test.ru). &lt;br&gt;В противном случае пользователь будет перенаправлен по адресу следующего вида: http://&lt;адрес_платёжного_шлюза&gt;/&lt;адрес_продавца&gt;. &lt;br&gt;Тип: AN..512</param>
        /// <param name="jsonParams">Блок для передачи дополнительных параметров. &lt;br&gt;Формат вида: {"Имя1": "Значение1", "Имя2": "Значение2"}. &lt;br&gt;Тип: имя - ANS..255 байт, значение - ANS..1024 байт</param>
        /// <param name="features">Возможно использование, например таких значений, как: &lt;br&gt;AUTO_PAYMENT - Если запрос на регистрацию заказа инициирует проведение автоплатежей. &lt;br&gt;VERIFY - Если указать это значение после запроса на регистрацию заказа произойдёт верификация держателя карты без списания средств с его счёта.</param>
        /// <param name="orderBundle">Корзина товаров заказа. &lt;br&gt;&lt;br&gt;</param>
        /// <param name="additionalOfdParams">Блок дополнительных параметров для ОФД. &lt;br&gt;Пример: &lt;br&gt;{ &lt;br&gt;"agent_info.type": "7", &lt;br&gt;"agent_info.paying.operation": "Наименование операции ма", &lt;br&gt;"agent_info.paying.phones": "+71111111111", &lt;br&gt;"agent_info.paymentsOperator.phones": "+72222222222", &lt;br&gt;"agent_info.MTOperator.address": "Адрес оператора перевода", &lt;br&gt;"agent_info.MTOperator.inn": "169910020020", &lt;br&gt;"agent_info.MTOperator.name": "Наименование оператора перевода", &lt;br&gt;"agent_info.MTOperator.phones": "+73333333333", &lt;br&gt;"supplier_info.phones": "+74444444444", &lt;br&gt;"cashier": "ФИО кассира" &lt;br&gt;"additional_check_props": "09090909", &lt;br&gt;"additional_user_props.name": "Наименование дополнительного реквизита пользователя", &lt;br&gt;"additional_user_props.value": "Значение дополнительного реквизита пользователя", &lt;br&gt;}</param>
        /// <param name="dynamicCallbackUrl">Адрес для callback вызовов (необходима дополнительная настройка мерчанта).</param>
        /// <param name="threeDSServerTransId">Параметр указывающий идентификатор заказа в рамках 3DS 2.0 операции.</param>
        /// <param name="threeDSVer2FinishUrl">Адрес, на который требуется перенаправить пользователя перед finish3dsVer2.do в рамках 3DS 2.0 операции.</param>
        /// <param name="threeDSMethodNotificationUrl">Адрес для отправки уведомления о прохождении проверки 3D Secure.</param>
        /// <param name="threeDSVer2MdOrder">Номер заказа, который был зарегистрирован в первой части запроса в рамках 3DS 2.0 операции.</param>
        /// <param name="billingPayerData">Регистрационный адрес клиента, заданный при регистрации карты в Банке Эмитенте.</param>
        /// <param name="shippingPayerData">Данные доставки клиента.</param>
        /// <param name="preOrderPayerData">Данные предзаказа.</param>
        /// <param name="orderPayerData">Данные заказа.</param>
        /// <param name="billingAndShippingAddressMatchIndicator">Индикатор совпадения адреса держателя карты для выставления счета и адреса доставки.</param>
        /// <param name="tii">Тип проводимой операции со стороны инициатора (Transaction Initiator Indicator).</param>
        /// <param name="originalPaymentNetRefNum">Идентификатор оригинальной или предыдущей успешной транзакции в платежной системе по отношению к выполняемой операции по связке.</param>
        /// <param name="originalPaymentDate">Дата/время совершения оригинальной операции (в миллисекундах).</param>
        /// <param name="externalScaExemptionIndicator">Значение PSD Exemption.</param>
        /// <param name="autoReverseDate">Дата автоотмены. &lt;br&gt;</param>
        /// <param name="autocompletionDate">Дата автозавершения. &lt;br&gt;</param>
        /// <param name="sbpTemplateId">Идентификатор шаблона для оплаты через кассовые ссылки СБП.</param>
        /// <param name="dccData">${instantPayment.req.param.dccData.description}</param>
        /// <param name="clientBrowserInfo">Объект с инофрмацией о браузере клиентаПример: &lt;br&gt;{ &lt;br&gt;"userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/111.0.0.0 Safari/537.36 Edg/111.0.1661.41", &lt;br&gt;"fingerprint":850891523, &lt;br&gt;"OS":"Windows", &lt;br&gt;"OSVersion":"10", &lt;br&gt;"isMobile":false, &lt;br&gt;"screenPrint":"Current Resolution: 1536x864, Available Resolution: 1536x824, Color Depth: 24, Device XDPI: undefined, Device YDPI: undefined", &lt;br&gt;"colorDepth":24, &lt;br&gt;"screenHeight":"864", &lt;br&gt;"screenWidth":"1536", &lt;br&gt;"plugins":"PDF Viewer, Chrome PDF Viewer, Chromium PDF Viewer, Microsoft Edge PDF Viewer, WebKit built-in PDF", &lt;br&gt;"javaEnabled":false, &lt;br&gt;"javascriptEnabled":true, &lt;br&gt;"browserLanguage":"en-US", &lt;br&gt;"browserTimeZone":"Europe/Moscow", &lt;br&gt;"browserTimeZoneOffset":-180, &lt;br&gt;"browserAcceptHeader":"*/*", &lt;br&gt;"device":"device", &lt;br&gt;"deviceType":"type", &lt;br&gt;"browserIpAddress":"10.99.50.37" &lt;br&gt;}</param>
        /// <returns>OK</returns>
        /// <exception cref="AlfabankException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<PaymentFormResult> InstantPaymentAsync(string amount, string? userName = null, string? password = null, string? token = null, string? currency = null, string? clientId = null, string? ip = null, string? email = null, string? phone = null, string? bindingNotNeeded = null, string? orderNumber = null, string? description = null, string? language = null, string? preAuth = null, string? seToken = null, string? bindingId = null, string? pan = null, string? cvc = null, string? expiry = null, string? cardHolderName = null, string? merchantLogin = null, string? sessionTimeoutSecs = null, string? expirationDate = null, string? backUrl = null, string? failUrl = null, string? jsonParams = null, string? features = null, string? orderBundle = null, string? additionalOfdParams = null, string? dynamicCallbackUrl = null, string? threeDSServerTransId = null, string? threeDSVer2FinishUrl = null, string? threeDSMethodNotificationUrl = null, string? threeDSVer2MdOrder = null, string? billingPayerData = null, string? shippingPayerData = null, string? preOrderPayerData = null, string? orderPayerData = null, string? billingAndShippingAddressMatchIndicator = null, string? tii = null, string? originalPaymentNetRefNum = null, string? originalPaymentDate = null, string? externalScaExemptionIndicator = null, string? autoReverseDate = null, string? autocompletionDate = null, string? sbpTemplateId = null, string? dccData = null, string? clientBrowserInfo = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (amount == null)
                throw new System.ArgumentNullException("amount");

            var client_ = new System.Net.Http.HttpClient();
            var disposeClient_ = true;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "*/*");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "rest/instantPayment.do"
                    urlBuilder_.Append("rest/instantPayment.do");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("amount")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(amount, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    if (userName != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("userName")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(userName, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (password != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("password")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(password, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (token != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("token")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(token, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (currency != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("currency")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(currency, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (clientId != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("clientId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(clientId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (ip != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("ip")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(ip, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (email != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("email")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(email, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (phone != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("phone")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(phone, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (bindingNotNeeded != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("bindingNotNeeded")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(bindingNotNeeded, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (orderNumber != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("orderNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(orderNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (description != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("description")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(description, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (language != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("language")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(language, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (preAuth != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("preAuth")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(preAuth, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (seToken != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("seToken")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(seToken, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (bindingId != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("bindingId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(bindingId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (pan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("pan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (cvc != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("cvc")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(cvc, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (expiry != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("expiry")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(expiry, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (cardHolderName != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("cardHolderName")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(cardHolderName, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (merchantLogin != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("merchantLogin")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(merchantLogin, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (sessionTimeoutSecs != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("sessionTimeoutSecs")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(sessionTimeoutSecs, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (expirationDate != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("expirationDate")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(expirationDate, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (backUrl != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("backUrl")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(backUrl, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (failUrl != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("failUrl")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(failUrl, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (jsonParams != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("jsonParams")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(jsonParams, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (features != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("features")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(features, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (orderBundle != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("orderBundle")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(orderBundle, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (additionalOfdParams != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("additionalOfdParams")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(additionalOfdParams, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (dynamicCallbackUrl != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("dynamicCallbackUrl")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(dynamicCallbackUrl, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (threeDSServerTransId != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("threeDSServerTransId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(threeDSServerTransId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (threeDSVer2FinishUrl != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("threeDSVer2FinishUrl")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(threeDSVer2FinishUrl, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (threeDSMethodNotificationUrl != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("threeDSMethodNotificationUrl")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(threeDSMethodNotificationUrl, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (threeDSVer2MdOrder != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("threeDSVer2MdOrder")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(threeDSVer2MdOrder, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (billingPayerData != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("billingPayerData")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(billingPayerData, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (shippingPayerData != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("shippingPayerData")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(shippingPayerData, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (preOrderPayerData != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("preOrderPayerData")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(preOrderPayerData, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (orderPayerData != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("orderPayerData")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(orderPayerData, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (billingAndShippingAddressMatchIndicator != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("billingAndShippingAddressMatchIndicator")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(billingAndShippingAddressMatchIndicator, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (tii != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("tii")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(tii, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (originalPaymentNetRefNum != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("originalPaymentNetRefNum")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(originalPaymentNetRefNum, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (originalPaymentDate != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("originalPaymentDate")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(originalPaymentDate, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (externalScaExemptionIndicator != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("externalScaExemptionIndicator")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(externalScaExemptionIndicator, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (autoReverseDate != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("autoReverseDate")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(autoReverseDate, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (autocompletionDate != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("autocompletionDate")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(autocompletionDate, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (sbpTemplateId != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("sbpTemplateId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(sbpTemplateId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (dccData != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("dccData")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(dccData, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (clientBrowserInfo != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("clientBrowserInfo")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(clientBrowserInfo, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PaymentFormResult>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AlfabankException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 429)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AlfabankException("Too Many Requests", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AlfabankException("Internal Server Error", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 502)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AlfabankException("Bad Gateway", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AlfabankException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Запрос возврата по устаревшему заказу более 2 лет.
        /// </summary>
        /// <remarks>
        /// Может содержать или bindingid, или параметры карты, или SEToken, параметр currency циферный, orderNumber может не передаваться при опции генерации его у мерчанта, метод требует пермиссии мерчанта.
        /// </remarks>
        /// <param name="password">Пароль магазина, полученный при подключении. Если для аутентификации при регистрации вместо логина и пароля используется открытый токен (параметр token), параметр password передавать не нужно. &lt;br&gt;Тип: AN..30</param>
        /// <param name="amount">Сумма списания в валюте заказа. &lt;br&gt;Тип: N..12</param>
        /// <param name="userName">Логин магазина, полученный при подключении. Если вместо аутентификации по логину и паролю используется открытый токен (параметр token), параметр userName передавать не нужно. &lt;br&gt;Тип: AN..30</param>
        /// <param name="seToken">Параметр должен содержать шифрованное значение платежных данных введенных клиентом на стороне ТСП.</param>
        /// <param name="bindingId">Идентификатор связки созданной при оплате заказа или использованной для оплаты. Присутствует только если магазину разрешено создание связок. &lt;br&gt;Тип: AN..255</param>
        /// <param name="pan">Номер карты. &lt;br&gt;Тип: N12...19</param>
        /// <param name="cvc">CVC код. Этот параметр обязателен, если для мерчанта не выбрано разрешение "Может проводить оплату без подтверждения CVC". &lt;br&gt;Тип: N..3</param>
        /// <param name="expiry">Дата (год и месяц) окончания срока действия связки в формате YYYYMM. &lt;br&gt;Тип: N6</param>
        /// <param name="cardHolderName">Имя держателя карты. Указан только после оплаты заказа.</param>
        /// <param name="currency">Код валюты платежа ISO 4217. Если не указан, считается равным коду валюты по умолчанию. &lt;br&gt;Тип: N3</param>
        /// <param name="jsonParams">Блок для передачи дополнительных параметров. &lt;br&gt;Формат вида: {"Имя1": "Значение1", "Имя2": "Значение2"}. &lt;br&gt;Тип: имя - ANS..255 байт, значение - ANS..1024 байт</param>
        /// <param name="language">Язык в кодировке ISO 639-1. Если не указан, будет использован язык, указанный в настройках магазина как язык по умолчанию. &lt;br&gt;Тип: A2</param>
        /// <param name="orderNumber">Номер (идентификатор) заказа в системе магазина, уникален для каждого магазина в пределах системы. &lt;br&gt;Тип: AN..32</param>
        /// <returns>OK</returns>
        /// <exception cref="AlfabankException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<OrderResult> InstantRefundAsync(string password, string amount, string userName, string? seToken = null, string? bindingId = null, string? pan = null, string? cvc = null, string? expiry = null, string? cardHolderName = null, string? currency = null, string? jsonParams = null, string? language = null, string? orderNumber = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (password == null)
                throw new System.ArgumentNullException("password");

            if (amount == null)
                throw new System.ArgumentNullException("amount");

            if (userName == null)
                throw new System.ArgumentNullException("userName");

            var client_ = new System.Net.Http.HttpClient();
            var disposeClient_ = true;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "*/*");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "rest/instantRefund.do"
                    urlBuilder_.Append("rest/instantRefund.do");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("password")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(password, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Append(System.Uri.EscapeDataString("amount")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(amount, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Append(System.Uri.EscapeDataString("userName")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(userName, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    if (seToken != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("seToken")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(seToken, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (bindingId != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("bindingId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(bindingId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (pan != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("pan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (cvc != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("cvc")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(cvc, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (expiry != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("expiry")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(expiry, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (cardHolderName != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("cardHolderName")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(cardHolderName, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (currency != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("currency")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(currency, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (jsonParams != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("jsonParams")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(jsonParams, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (language != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("language")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(language, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (orderNumber != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("orderNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(orderNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<OrderResult>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AlfabankException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 429)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AlfabankException("Too Many Requests", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AlfabankException("Internal Server Error", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 502)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AlfabankException("Bad Gateway", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AlfabankException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Мото платеж.
        /// </summary>
        /// <remarks>
        /// Регистрация заказа и его оплата. без 3DS - всегда SSL.
        /// </remarks>
        /// <param name="amount">Сумма платежа в копейках (или центах). &lt;br&gt;Тип: N..12</param>
        /// <param name="returnUrl">Адрес, на который требуется перенаправить пользователя в случае успешной оплаты. &lt;br&gt;Должен быть указан полностью, включая используемый протокол (например, https://test.ru вместо test.ru). &lt;br&gt;В противном случае пользователь будет перенаправлен по адресу следующего вида: http://&lt;адрес_платёжного_шлюза&gt;/&lt;адрес_продавца&gt;. &lt;br&gt;Тип: AN..512</param>
        /// <param name="pan">Номер карты. &lt;br&gt;Тип: N12...19</param>
        /// <param name="expiry">Дата (год и месяц) окончания срока действия карты. &lt;br&gt;Тип: N6</param>
        /// <param name="cardholder">Имя держателя карты.</param>
        /// <param name="autoReverseDate">autoReverseDate</param>
        /// <param name="autocompletionDate">autocompletionDate</param>
        /// <param name="userName">Логин магазина, полученный при подключении. Если вместо аутентификации по логину и паролю используется открытый токен (параметр token), параметр userName передавать не нужно. &lt;br&gt;Тип: AN..30</param>
        /// <param name="password">Пароль магазина, полученный при подключении. Если для аутентификации при регистрации вместо логина и пароля используется открытый токен (параметр token), параметр password передавать не нужно. &lt;br&gt;Тип: AN..30</param>
        /// <param name="token">Открытый ключ, который можно использовать для регистрации заказа. Если для аутентификации при регистрации заказа используются логин и пароль, параметр token передавать не нужно. &lt;br&gt;Тип: AN..30</param>
        /// <param name="orderNumber">Номер (идентификатор) заказа в системе магазина, уникален для каждого магазина в пределах системы. &lt;br&gt;Тип: AN..32</param>
        /// <param name="currency">Код валюты платежа ISO 4217. Если не указан, считается равным коду валюты по умолчанию. &lt;br&gt;Тип: N3</param>
        /// <param name="failUrl">Адрес, на который требуется перенаправить пользователя в случае неуспешной оплаты. &lt;br&gt;Должен быть указан полностью, включая используемый протокол (например, https://test.ru вместо test.ru). &lt;br&gt;В противном случае пользователь будет перенаправлен по адресу следующего вида: http://&lt;адрес_платёжного_шлюза&gt;/&lt;адрес_продавца&gt;. &lt;br&gt;Тип: AN..512</param>
        /// <param name="description">Описание заказа в свободной форме. &lt;br&gt;Тип: ANS..598</param>
        /// <param name="language">Язык в кодировке ISO 639-1. Если не указан, будет использован язык, указанный в настройках магазина как язык по умолчанию (default language). &lt;br&gt;Тип: ANS..39</param>
        /// <param name="clientId">Номер (идентификатор) клиента в системе магазина. Используется для реализации функционала связок. Может присутствовать, если магазину разрешено создание связок. &lt;br&gt;Тип: ANS..255</param>
        /// <param name="merchantLogin">Чтобы зарегистрировать заказ от имени дочернего мерчанта, укажите его логин в этом параметре. &lt;br&gt;Тип: AN..255</param>
        /// <param name="email">Адрес электронной почты покупателя. &lt;br&gt;Тип: ANS..40</param>
        /// <param name="postAddress">Адрес доставки. &lt;br&gt;Тип: ANS..598</param>
        /// <param name="jsonParams">Блок для передачи дополнительных параметров мерчанта. &lt;br&gt;Формат вида: {"Имя1": "Значение1", "Имя2": "Значение2"}. &lt;br&gt;Тип: имя - ANS..255 байт, значение - ANS..1024 байт</param>
        /// <param name="features">Возможно использование следующих значений: &lt;br&gt;AUTO_PAYMENT - Если запрос на регистрацию заказа инициирует проведение автоплатежей. &lt;br&gt;VERIFY - Если указать это значение после запроса на регистрацию заказа произойдёт верификация держателя карты без списания средств с его счёта, поэтому в запросе можно передавать нулевую сумму.</param>
        /// <param name="dynamicCallbackUrl">Адрес для callback вызовов (необходима дополнительная настройка мерчанта).</param>
        /// <param name="billingPayerData">Регистрационный адрес клиента, заданный при регистрации карты в Банке Эмитенте.</param>
        /// <param name="shippingPayerData">Данные доставки клиента.</param>
        /// <param name="preOrderPayerData">Данные предзаказа.</param>
        /// <param name="orderPayerData">Данные заказа.</param>
        /// <param name="billingAndShippingAddressMatchIndicator">Индикатор совпадения адреса держателя карты для выставления счета и адреса доставки.</param>
        /// <param name="ip">IP-адрес покупателя. &lt;br&gt;Тип: ANS..39</param>
        /// <param name="preAuth">Параметр, определяющий необходимость предварительной авторизации (блокирования средств на счету клиента до их списания). &lt;br&gt;Тип: boolean</param>
        /// <param name="cvc">CVC код. &lt;br&gt;Тип: N..3</param>
        /// <returns>OK</returns>
        /// <exception cref="AlfabankException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<MotoPaymentResponse> MotoPaymentAsync(long amount, string returnUrl, string pan, string expiry, string cardholder, string? autoReverseDate = null, string? autocompletionDate = null, string? userName = null, string? password = null, string? token = null, string? orderNumber = null, long? currency = null, string? failUrl = null, string? description = null, string? language = null, string? clientId = null, string? merchantLogin = null, string? email = null, string? postAddress = null, string? jsonParams = null, Features? features = null, string? dynamicCallbackUrl = null, string? billingPayerData = null, string? shippingPayerData = null, string? preOrderPayerData = null, string? orderPayerData = null, string? billingAndShippingAddressMatchIndicator = null, string? ip = null, string? preAuth = null, string? cvc = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (amount == null)
                throw new System.ArgumentNullException("amount");

            if (returnUrl == null)
                throw new System.ArgumentNullException("returnUrl");

            if (pan == null)
                throw new System.ArgumentNullException("pan");

            if (expiry == null)
                throw new System.ArgumentNullException("expiry");

            if (cardholder == null)
                throw new System.ArgumentNullException("cardholder");

            var client_ = new System.Net.Http.HttpClient();
            var disposeClient_ = true;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "*/*");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "rest/motoPayment.do"
                    urlBuilder_.Append("rest/motoPayment.do");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("amount")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(amount, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Append(System.Uri.EscapeDataString("returnUrl")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(returnUrl, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Append(System.Uri.EscapeDataString("pan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Append(System.Uri.EscapeDataString("expiry")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(expiry, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Append(System.Uri.EscapeDataString("cardholder")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(cardholder, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    if (autoReverseDate != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("autoReverseDate")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(autoReverseDate, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (autocompletionDate != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("autocompletionDate")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(autocompletionDate, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (userName != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("userName")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(userName, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (password != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("password")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(password, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (token != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("token")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(token, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (orderNumber != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("orderNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(orderNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (currency != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("currency")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(currency, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (failUrl != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("failUrl")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(failUrl, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (description != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("description")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(description, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (language != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("language")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(language, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (clientId != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("clientId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(clientId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (merchantLogin != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("merchantLogin")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(merchantLogin, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (email != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("email")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(email, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (postAddress != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("postAddress")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(postAddress, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (jsonParams != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("jsonParams")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(jsonParams, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (features != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("features")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(features, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (dynamicCallbackUrl != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("dynamicCallbackUrl")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(dynamicCallbackUrl, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (billingPayerData != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("billingPayerData")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(billingPayerData, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (shippingPayerData != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("shippingPayerData")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(shippingPayerData, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (preOrderPayerData != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("preOrderPayerData")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(preOrderPayerData, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (orderPayerData != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("orderPayerData")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(orderPayerData, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (billingAndShippingAddressMatchIndicator != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("billingAndShippingAddressMatchIndicator")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(billingAndShippingAddressMatchIndicator, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (ip != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("ip")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(ip, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (preAuth != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("preAuth")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(preAuth, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (cvc != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("cvc")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(cvc, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MotoPaymentResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AlfabankException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 429)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AlfabankException("Too Many Requests", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AlfabankException("Internal Server Error", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 502)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AlfabankException("Bad Gateway", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AlfabankException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Запрос проведения платежа по связке.
        /// </summary>
        /// <remarks>
        /// Для проведения платежа по связке используется запрос paymentOrderBinding.do.
        /// </remarks>
        /// <param name="userName">Логин магазина, полученный при подключении. &lt;br&gt;Тип: AN..30</param>
        /// <param name="password">Пароль магазина, полученный при подключении. &lt;br&gt;Тип: AN..30</param>
        /// <param name="mdOrder">Номер заказа в платежной системе. Уникален в пределах системы. &lt;br&gt;Тип: ANS36</param>
        /// <param name="bindingId">Идентификатор связки созданной при оплате заказа или использованной для оплаты. Присутствует только если магазину разрешено создание связок. &lt;br&gt;Тип: AN..255</param>
        /// <param name="ip">ip-адрес плательщика. &lt;br&gt;Тип: ANS..39</param>
        /// <param name="language">Язык в кодировке ISO 639-1. Если не указан, будет использован язык, указанный в настройках магазина как язык по умолчанию. &lt;br&gt;Тип: A2</param>
        /// <param name="cvc">CVC код. Этот параметр обязателен, если для мерчанта не выбрано разрешение "Может проводить оплату без подтверждения CVC". &lt;br&gt;Тип: N..3</param>
        /// <param name="email">Адрес электронной почты плательщика. &lt;br&gt;Тип: ANS..40</param>
        /// <param name="seToken">SeToken, Параметр должен содержать шифрованное значение платежных данных введенных клиентом на стороне ТСП.</param>
        /// <returns>OK</returns>
        /// <exception cref="AlfabankException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<PaymentFormResult> PaymentOrderBindingAsync(string userName, string password, string mdOrder, string bindingId, string ip, string? language = null, string? cvc = null, string? email = null, string? seToken = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (userName == null)
                throw new System.ArgumentNullException("userName");

            if (password == null)
                throw new System.ArgumentNullException("password");

            if (mdOrder == null)
                throw new System.ArgumentNullException("mdOrder");

            if (bindingId == null)
                throw new System.ArgumentNullException("bindingId");

            if (ip == null)
                throw new System.ArgumentNullException("ip");

            var client_ = new System.Net.Http.HttpClient();
            var disposeClient_ = true;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "*/*");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "rest/paymentOrderBinding.do"
                    urlBuilder_.Append("rest/paymentOrderBinding.do");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("userName")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(userName, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Append(System.Uri.EscapeDataString("password")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(password, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Append(System.Uri.EscapeDataString("mdOrder")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(mdOrder, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Append(System.Uri.EscapeDataString("bindingId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(bindingId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Append(System.Uri.EscapeDataString("ip")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(ip, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    if (language != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("language")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(language, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (cvc != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("cvc")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(cvc, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (email != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("email")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(email, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (seToken != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("seToken")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(seToken, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PaymentFormResult>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AlfabankException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 429)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AlfabankException("Too Many Requests", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AlfabankException("Internal Server Error", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 502)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AlfabankException("Bad Gateway", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AlfabankException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Запрос оплаты с авторизацией
        /// </summary>
        /// <remarks>
        /// Для оплаты с авторизацией используется запрос paymentOrder.do.
        /// </remarks>
        /// <param name="userName">Логин магазина, полученный при подключении. &lt;br&gt;Тип: AN..30</param>
        /// <param name="password">Пароль магазина, полученный при подключении. &lt;br&gt;Тип: AN..30</param>
        /// <param name="mDORDER">Номер заказа, полученный при регистрации. &lt;br&gt;Тип: ANS36</param>
        /// <param name="tEXT">Cardholder. &lt;br&gt;Тип: A..512</param>
        /// <param name="language">Язык ответа. &lt;br&gt;Тип: A..2</param>
        /// <param name="ip">IP-адрес пользователя, который оплачивал заказ (IPv6 поддерживается во всех запросах). &lt;br&gt;Тип: ANS..39</param>
        /// <param name="pAN">Номер платёжной карты. Этот параметр не обязателен, если оплата внешней связкой СБП. &lt;br&gt;Тип: N..19</param>
        /// <param name="cVC">CVC. Этот параметр не обязателен, если оплата внешней связкой СБП. &lt;br&gt;Тип: N..3</param>
        /// <param name="yYYY">Год. Этот параметр не обязателен, если оплата внешней связкой СБП. &lt;br&gt;Тип: N..4</param>
        /// <param name="mM">Месяц. Этот параметр не обязателен, если оплата внешней связкой СБП. &lt;br&gt;Тип: N..2</param>
        /// <param name="email">Адрес электронной почты плательщика. Если в настройках мерчанта предусмотрена отправка клиентам уведомлений об операциях с заказом, то этот параметр должен присутствовать. &lt;br&gt;Тип: ANS..*</param>
        /// <param name="bindingNotNeeded">Возможные значения: &lt;br&gt;true – запрет на создание связки после платежа (идентификатор клиента, переданный при регистрации заказа, после совершения платежа будет удалён из деталей заказа); &lt;br&gt;false – в результате успешной оплаты может быть создана связка (при выполнении соответствующих условий). Это значение является значением по умолчанию. &lt;br&gt;Тип: boolean</param>
        /// <param name="jsonParams">Поля дополнительной информации для последующего хранения, вида {"param":"value","param2":"value2"}. Данные поля могут быть переданы в процессинг банка для последующего отображения в реестрах. &lt;br&gt;По умолчанию в процессинг банка передаются поля номер заказа orderNumber и его описание description (не более 99 символов, запрещены к использованию %, +, конец строки  и перенос строки 
        /// <br/>). &lt;br&gt;Включение данного функционала возможно по согласованию с банком в период интеграции. &lt;br&gt;Если вы хотите принимать оплату рассрочкой, и выполняли запрос get для получения сведений о доступных вариантах рассрочки, в качестве дополнительный параметров следует передать содержимое блока installmentsProposals из того запроса. &lt;br&gt;Тип: AN..1024</param>
        /// <param name="threeDSSDK">Флаг прохождения платежа через 3DS SDK. Допустимые значения: true или false. &lt;br&gt;Тип: boolean</param>
        /// <param name="billingPayerData">Блок c регистрационными данными клиента (адрес, почтовый индекс), необходимыми для прохождения проверки адреса в рамках сервисов AVS/AVV. &lt;br&gt;Тип: object</param>
        /// <param name="sbpSubscriptionToken">Уникальный идентификатор привязки счета Плательщика в другом эквайере. Этот параметр обязателен, если оплата внешней связкой СБП. &lt;br&gt;Тип: ANS..32</param>
        /// <param name="sbpMemberId">Идентификатор Банка эквайера. Этот параметр обязателен, если оплата внешней связкой СБП. &lt;br&gt;Тип: ANS..12</param>
        /// <returns>OK</returns>
        /// <exception cref="AlfabankException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<PaymentFormResult> PaymentOrderAsync(string userName, string password, string mDORDER, string tEXT, string language, string ip, string? pAN = null, string? cVC = null, string? yYYY = null, string? mM = null, string? email = null, string? bindingNotNeeded = null, string? jsonParams = null, string? threeDSSDK = null, string? billingPayerData = null, string? sbpSubscriptionToken = null, string? sbpMemberId = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (userName == null)
                throw new System.ArgumentNullException("userName");

            if (password == null)
                throw new System.ArgumentNullException("password");

            if (mDORDER == null)
                throw new System.ArgumentNullException("mDORDER");

            if (tEXT == null)
                throw new System.ArgumentNullException("tEXT");

            if (language == null)
                throw new System.ArgumentNullException("language");

            if (ip == null)
                throw new System.ArgumentNullException("ip");

            var client_ = new System.Net.Http.HttpClient();
            var disposeClient_ = true;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "*/*");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "rest/paymentorder.do"
                    urlBuilder_.Append("rest/paymentorder.do");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("userName")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(userName, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Append(System.Uri.EscapeDataString("password")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(password, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Append(System.Uri.EscapeDataString("MDORDER")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(mDORDER, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Append(System.Uri.EscapeDataString("TEXT")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(tEXT, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Append(System.Uri.EscapeDataString("language")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(language, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Append(System.Uri.EscapeDataString("ip")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(ip, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    if (pAN != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("$PAN")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pAN, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (cVC != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("$CVC")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(cVC, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (yYYY != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("YYYY")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(yYYY, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (mM != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("MM")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(mM, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (email != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("email")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(email, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (bindingNotNeeded != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("bindingNotNeeded")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(bindingNotNeeded, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (jsonParams != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("jsonParams")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(jsonParams, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (threeDSSDK != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("threeDSSDK")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(threeDSSDK, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (billingPayerData != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("billingPayerData")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(billingPayerData, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (sbpSubscriptionToken != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("sbpSubscriptionToken")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(sbpSubscriptionToken, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (sbpMemberId != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("sbpMemberId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(sbpMemberId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PaymentFormResult>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AlfabankException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 429)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AlfabankException("Too Many Requests", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AlfabankException("Internal Server Error", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 502)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AlfabankException("Bad Gateway", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AlfabankException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Запрос оплаты через внешнюю платёжную систему.
        /// </summary>
        /// <remarks>
        /// Для оплаты через внешнюю платёжную систему используется запрос paymentOtherWay.do.
        /// </remarks>
        /// <param name="userName">Логин магазина, полученный при подключении. &lt;br&gt;Тип: AN..30</param>
        /// <param name="password">Пароль магазина, полученный при подключении. &lt;br&gt;Тип: AN..30</param>
        /// <param name="paymentWay">В этом параметре передаётся способ оплаты. &lt;br&gt;Тип: ANS..14</param>
        /// <param name="mDORDER">Номер заказа, полученный при регистрации. &lt;br&gt;Тип: ANS36</param>
        /// <returns>OK</returns>
        /// <exception cref="AlfabankException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<PaymentFormResult> PaymentOtherWayAsync(string userName, string password, string paymentWay, string mDORDER, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (userName == null)
                throw new System.ArgumentNullException("userName");

            if (password == null)
                throw new System.ArgumentNullException("password");

            if (paymentWay == null)
                throw new System.ArgumentNullException("paymentWay");

            if (mDORDER == null)
                throw new System.ArgumentNullException("mDORDER");

            var client_ = new System.Net.Http.HttpClient();
            var disposeClient_ = true;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "*/*");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "rest/paymentotherway.do"
                    urlBuilder_.Append("rest/paymentotherway.do");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("userName")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(userName, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Append(System.Uri.EscapeDataString("password")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(password, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Append(System.Uri.EscapeDataString("paymentWay")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(paymentWay, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Append(System.Uri.EscapeDataString("MDORDER")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(mDORDER, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PaymentFormResult>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AlfabankException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 429)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AlfabankException("Too Many Requests", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AlfabankException("Internal Server Error", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 502)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AlfabankException("Bad Gateway", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AlfabankException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Запрос возврата средств.
        /// </summary>
        /// <remarks>
        /// Для возврата средств используется запрос refund.do.
        /// </remarks>
        /// <param name="userName">Логин магазина, полученный при подключении. &lt;br&gt;Тип: AN..30</param>
        /// <param name="password">Пароль магазина, полученный при подключении. &lt;br&gt;Тип: AN..30</param>
        /// <param name="orderId">Номер заказа в платежной системе. Уникален в пределах системы. &lt;br&gt;Тип: ANS36</param>
        /// <param name="amount">Сумма возврата в валюте заказа. Может быть меньше или равна остатку в заказе. &lt;br&gt;Тип: N..12</param>
        /// <param name="expectedDepositedAmount">Опциональный параметр, содержит сумму, равную amount. Служит индикатором того, что один и тот же запрос на возврат средств не будет обработан несколько раз. &lt;br&gt;Тип: N..20</param>
        /// <param name="language">Язык в кодировке ISO 639-1. Если не указан, будет использован язык, указанный в настройках магазина как язык по умолчанию (default language). &lt;br&gt;Тип: A2</param>
        /// <param name="jsonParams">Блок с атрибутами дополнительных параметров мерчанта. &lt;br&gt;Поля дополнительной информации для последующего хранения, передаются в виде: {"Имя1": "Значение1", "Имя2": "Значение2"}</param>
        /// <param name="refundItems">Блок для передачи товарных позиций корзины для оплаты. &lt;br&gt;&lt;br&gt;Пример: [{"positionId":1,"name":"Билет на 07.09.2017 17:30 Ряд 7 Место 7","quantity":{"value":1,"measure":"шт."},"itemCode":"14259","itemAmount":90000,"itemPrice":90000,"tax":{"taxType":0}}]</param>
        /// <param name="additionalOfdParams">Блок дополнительных параметров для ОФД. &lt;br&gt;Пример: &lt;br&gt;{ &lt;br&gt;"agent_info.type": "7", &lt;br&gt;"agent_info.paying.operation": "Наименование операции ма", &lt;br&gt;"agent_info.paying.phones": "+71111111111", &lt;br&gt;"agent_info.paymentsOperator.phones": "+72222222222", &lt;br&gt;"agent_info.MTOperator.address": "Адрес оператора перевода", &lt;br&gt;"agent_info.MTOperator.inn": "169910020020", &lt;br&gt;"agent_info.MTOperator.name": "Наименование оператора перевода", &lt;br&gt;"agent_info.MTOperator.phones": "+73333333333", &lt;br&gt;"supplier_info.phones": "+74444444444", &lt;br&gt;"cashier": "ФИО кассира" &lt;br&gt;"additional_check_props": "09090909", &lt;br&gt;"additional_user_props.name": "Наименование дополнительного реквизита пользователя", &lt;br&gt;"additional_user_props.value": "Значение дополнительного реквизита пользователя", &lt;br&gt;}</param>
        /// <returns>OK</returns>
        /// <exception cref="AlfabankException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<OrderResult> RefundOrderAsync(string userName, string password, string orderId, long amount, long? expectedDepositedAmount = null, string? language = null, string? jsonParams = null, string? refundItems = null, string? additionalOfdParams = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (userName == null)
                throw new System.ArgumentNullException("userName");

            if (password == null)
                throw new System.ArgumentNullException("password");

            if (orderId == null)
                throw new System.ArgumentNullException("orderId");

            if (amount == null)
                throw new System.ArgumentNullException("amount");

            var client_ = new System.Net.Http.HttpClient();
            var disposeClient_ = true;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "*/*");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "rest/refund.do"
                    urlBuilder_.Append("rest/refund.do");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("userName")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(userName, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Append(System.Uri.EscapeDataString("password")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(password, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Append(System.Uri.EscapeDataString("orderId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(orderId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Append(System.Uri.EscapeDataString("amount")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(amount, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    if (expectedDepositedAmount != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("expectedDepositedAmount")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(expectedDepositedAmount, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (language != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("language")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(language, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (jsonParams != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("jsonParams")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(jsonParams, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (refundItems != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("refundItems")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(refundItems, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (additionalOfdParams != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("additionalOfdParams")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(additionalOfdParams, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<OrderResult>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AlfabankException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 429)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AlfabankException("Too Many Requests", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AlfabankException("Internal Server Error", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 502)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AlfabankException("Bad Gateway", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AlfabankException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Запрос регистрации заказа.
        /// </summary>
        /// <remarks>
        /// Для регистрации заказа используется запрос register.do.
        /// </remarks>
        /// <param name="orderNumber">Номер (идентификатор) заказа в системе магазина, уникален для каждого магазина в пределах системы. &lt;br&gt;Тип: AN..32</param>
        /// <param name="amount">Сумма платежа в копейках (или центах). &lt;br&gt;Тип: N..12</param>
        /// <param name="returnUrl">Адрес, на который требуется перенаправить пользователя в случае успешной оплаты. &lt;br&gt;Должен быть указан полностью, включая используемый протокол (например, https://test.ru вместо test.ru). &lt;br&gt;В противном случае пользователь будет перенаправлен по адресу следующего вида: http://&lt;адрес_платёжного_шлюза&gt;/&lt;адрес_продавца&gt;. &lt;br&gt;Тип: AN..512</param>
        /// <param name="userName">Логин магазина, полученный при подключении. Если вместо аутентификации по логину и паролю используется открытый токен (параметр token), параметр userName передавать не нужно. &lt;br&gt;Тип: AN..30</param>
        /// <param name="password">Пароль магазина, полученный при подключении. Если для аутентификации при регистрации вместо логина и пароля используется открытый токен (параметр token), параметр password передавать не нужно. &lt;br&gt;Тип: AN..30</param>
        /// <param name="token">Открытый ключ, который можно использовать для регистрации заказа. Если для аутентификации при регистрации заказа используются логин и пароль, параметр token передавать не нужно. &lt;br&gt;Тип: AN..30</param>
        /// <param name="currency">Код валюты платежа ISO 4217. Если не указан, считается равным коду валюты по умолчанию. &lt;br&gt;Тип: N3</param>
        /// <param name="failUrl">Адрес, на который требуется перенаправить пользователя в случае неуспешной оплаты. &lt;br&gt;Должен быть указан полностью, включая используемый протокол (например, https://test.ru вместо test.ru). &lt;br&gt;В противном случае пользователь будет перенаправлен по адресу следующего вида: http://&lt;адрес_платёжного_шлюза&gt;/&lt;адрес_продавца&gt;. &lt;br&gt;Тип: AN..512</param>
        /// <param name="description">Описание заказа в свободной форме. &lt;br&gt;Тип: ANS..598</param>
        /// <param name="ip">IP-адрес покупателя. &lt;br&gt;Тип: ANS..39</param>
        /// <param name="language">Язык в кодировке ISO 639-1. Если не указан, будет использован язык, указанный в настройках магазина как язык по умолчанию (default language). &lt;br&gt;Тип: ANS..39</param>
        /// <param name="pageView">По значению данного параметра определяется, какие страницы платёжного интерфейса должны загружаться для клиента. &lt;br&gt;Если параметр отсутствует, либо не соответствует формату, то по умолчанию считается pageView=DESKTOP. &lt;br&gt;Тип: ANS..20</param>
        /// <param name="clientId">Номер (идентификатор) клиента в системе магазина. Используется для реализации функционала связок. Может присутствовать, если магазину разрешено создание связок. &lt;br&gt;Тип: ANS..255</param>
        /// <param name="merchantLogin">Чтобы зарегистрировать заказ от имени дочернего мерчанта, укажите его логин в этом параметре. &lt;br&gt;Тип: AN..255</param>
        /// <param name="email">Адрес электронной почты покупателя. &lt;br&gt;Тип: ANS..40</param>
        /// <param name="postAddress">Адрес доставки. &lt;br&gt;Тип: ANS..598</param>
        /// <param name="jsonParams">Блок для передачи дополнительных параметров мерчанта. &lt;br&gt;Формат вида: {"Имя1": "Значение1", "Имя2": "Значение2"}. &lt;br&gt;Тип: имя - ANS..255 байт, значение - ANS..1024 байт</param>
        /// <param name="additionalOfdParams">Блок дополнительных параметров для ОФД. &lt;br&gt;Пример: &lt;br&gt;{ &lt;br&gt;"agent_info.type": "7", &lt;br&gt;"agent_info.paying.operation": "Наименование операции ма", &lt;br&gt;"agent_info.paying.phones": "+71111111111", &lt;br&gt;"agent_info.paymentsOperator.phones": "+72222222222", &lt;br&gt;"agent_info.MTOperator.address": "Адрес оператора перевода", &lt;br&gt;"agent_info.MTOperator.inn": "169910020020", &lt;br&gt;"agent_info.MTOperator.name": "Наименование оператора перевода", &lt;br&gt;"agent_info.MTOperator.phones": "+73333333333", &lt;br&gt;"supplier_info.phones": "+74444444444", &lt;br&gt;"cashier": "ФИО кассира" &lt;br&gt;"additional_check_props": "09090909", &lt;br&gt;"additional_user_props.name": "Наименование дополнительного реквизита пользователя", &lt;br&gt;"additional_user_props.value": "Значение дополнительного реквизита пользователя", &lt;br&gt;}</param>
        /// <param name="sessionTimeoutSecs">Продолжительность жизни заказа в секундах. &lt;br&gt;В случае если параметр не задан, будет использовано значение, указанное в настройках мерчанта или время по умолчанию (1200 секунд = 20 минут). &lt;br&gt;Если в запросе присутствует параметр expirationDate, то значение параметра sessionTimeoutSecs не учитывается. &lt;br&gt;Тип: N...9</param>
        /// <param name="expirationDate">Дата и время окончания жизни заказа. Формат: yyyy-MM-dd'T'HH:mm:ss. &lt;br&gt;Если этот параметр не передаётся в запросе, то для определения времени окончания жизни заказа используется sessionTimeoutSecs. &lt;br&gt;Тип: ANS</param>
        /// <param name="autocompletionDate">Время автозавершения заказа. Если заказ не был завершен ко времени указанному в autocompletionDate, то он завершится автоматически. &lt;br&gt;Тип: ANS. Формат параметра: yyyy-MM-dd'T'HH:mm:ss. Пример: "2017-12-29T13:02:51"</param>
        /// <param name="bindingId">Идентификатор связки, созданной ранее. Может использоваться, только если у магазина есть разрешение на работу со связками. &lt;br&gt;Если этот параметр передаётся в данном запросе, то это означает: &lt;br&gt;1. Данный заказ может быть оплачен только с помощью связки;&lt;br&gt;2. Плательщик будет перенаправлен на платёжную страницу, где требуется только ввод CVC. &lt;br&gt;Тип: AN..255</param>
        /// <param name="orderBundle">Корзина товаров заказа &lt;br&gt;&lt;br&gt;Пример: &lt;br&gt;"{"cartItems": &lt;br&gt;{"items": &lt;br&gt;[{"positionId":"1",&lt;br&gt;"name":"TEST",&lt;br&gt;"quantity":{"value":1.0,"measure":"psc"},&lt;br&gt;"itemAmount":500000,&lt;br&gt;"itemCode":"code1",&lt;br&gt;"itemPrice":"500000",&lt;br&gt;"itemAttributes":&lt;br&gt;{"attributes":&lt;br&gt;[{"name":"agent_info.paying.operation","value":"Test operation"},&lt;br&gt;{"name":"supplier_info.phones","value":"+79161234567"},&lt;br&gt;{"name":"agent_info.MTOperator.name","value":"Test MT Operator"},&lt;br&gt;{"name":"agent_info.paymentsOperator.phones","value":"+79161234567,"},&lt;br&gt;{"name":"nomenclature","value":"dGVzdCBkZXBvc2l0"},&lt;br&gt;{"name":"agent_info.MTOperator.address","value":"Moscow"},&lt;br&gt;{"name":"supplier_info.name","value":"Test Supplier"},&lt;br&gt;{"name":"paymentMethod","value":"1"},&lt;br&gt;{"name":"paymentObject","value":"3"},&lt;br&gt;{"name":"agent_info.MTOperator.phones","value":"+79161234567"},&lt;br&gt;{"name":"agent_info.MTOperator.inn","value":"9715225506"},&lt;br&gt;{"name":"supplier_info.inn","value":"9715225506"},&lt;br&gt;{"name":"agent_info.type","value":"7"},&lt;br&gt;{"name":"agent_info.paying.phones","value":"+79161234567"}]}}]},&lt;br&gt;"agent":&lt;br&gt;{"agentType":1,&lt;br&gt;"payingOperation":"Test agent operation",&lt;br&gt;"payingPhones":"+79161234567,",&lt;br&gt;"paymentsOperatorPhones":"+79161234567",&lt;br&gt;"mtOperatorPhones":"+79169876543",&lt;br&gt;"mtOperatorName":"Agent MT Operator",&lt;br&gt;"mtOperatorAddress":"New York",&lt;br&gt;"mtOperatorInn":"9715225506"}}]"</param>
        /// <param name="billingPayerData">Регистрационный адрес клиента, заданный при регистрации карты в Банке Эмитенте.</param>
        /// <param name="shippingPayerData">Данные доставки клиента.</param>
        /// <param name="preOrderPayerData">Данные предзаказа.</param>
        /// <param name="orderPayerData">Данные заказа.</param>
        /// <param name="billingAndShippingAddressMatchIndicator">Индикатор совпадения адреса держателя карты для выставления счета и адреса доставки.</param>
        /// <param name="features">Возможно использование следующих значений: &lt;br&gt;AUTO_PAYMENT - Если запрос на регистрацию заказа инициирует проведение автоплатежей. &lt;br&gt;VERIFY - Если указать это значение после запроса на регистрацию заказа произойдёт верификация держателя карты без списания средств с его счёта, поэтому в запросе можно передавать нулевую сумму.</param>
        /// <param name="prepaymentMdOrder">mdOrder заказа с типом расчета Предоплата или Аванс.</param>
        /// <param name="dynamicCallbackUrl">Адрес для callback вызовов (необходима дополнительная настройка мерчанта).</param>
        /// <param name="feeInput">Размер комиссии мерчанта в минимальных единицах валюты.</param>
        /// <param name="cardholderName">Имя владельца карты.</param>
        /// <returns>OK</returns>
        /// <exception cref="AlfabankException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<RegisterOrderResponse> RegisterOrderAsync(string orderNumber, long amount, string returnUrl, string? userName = null, string? password = null, string? token = null, long? currency = null, string? failUrl = null, string? description = null, string? ip = null, string? language = null, PageView? pageView = null, string? clientId = null, string? merchantLogin = null, string? email = null, string? postAddress = null, string? jsonParams = null, string? additionalOfdParams = null, long? sessionTimeoutSecs = null, string? expirationDate = null, string? autocompletionDate = null, string? bindingId = null, string? orderBundle = null, string? billingPayerData = null, string? shippingPayerData = null, string? preOrderPayerData = null, string? orderPayerData = null, string? billingAndShippingAddressMatchIndicator = null, string? features = null, string? prepaymentMdOrder = null, string? dynamicCallbackUrl = null, string? feeInput = null, string? cardholderName = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (orderNumber == null)
                throw new System.ArgumentNullException("orderNumber");

            if (amount == null)
                throw new System.ArgumentNullException("amount");

            if (returnUrl == null)
                throw new System.ArgumentNullException("returnUrl");

            var client_ = new System.Net.Http.HttpClient();
            var disposeClient_ = true;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "*/*");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "rest/register.do"
                    urlBuilder_.Append("rest/register.do");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("orderNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(orderNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Append(System.Uri.EscapeDataString("amount")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(amount, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Append(System.Uri.EscapeDataString("returnUrl")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(returnUrl, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    if (userName != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("userName")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(userName, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (password != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("password")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(password, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (token != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("token")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(token, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (currency != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("currency")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(currency, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (failUrl != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("failUrl")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(failUrl, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (description != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("description")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(description, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (ip != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("ip")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(ip, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (language != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("language")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(language, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (pageView != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("pageView")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pageView, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (clientId != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("clientId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(clientId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (merchantLogin != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("merchantLogin")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(merchantLogin, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (email != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("email")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(email, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (postAddress != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("postAddress")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(postAddress, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (jsonParams != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("jsonParams")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(jsonParams, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (additionalOfdParams != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("additionalOfdParams")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(additionalOfdParams, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (sessionTimeoutSecs != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("sessionTimeoutSecs")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(sessionTimeoutSecs, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (expirationDate != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("expirationDate")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(expirationDate, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (autocompletionDate != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("autocompletionDate")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(autocompletionDate, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (bindingId != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("bindingId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(bindingId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (orderBundle != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("orderBundle")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(orderBundle, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (billingPayerData != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("billingPayerData")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(billingPayerData, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (shippingPayerData != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("shippingPayerData")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(shippingPayerData, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (preOrderPayerData != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("preOrderPayerData")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(preOrderPayerData, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (orderPayerData != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("orderPayerData")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(orderPayerData, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (billingAndShippingAddressMatchIndicator != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("billingAndShippingAddressMatchIndicator")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(billingAndShippingAddressMatchIndicator, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (features != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("features")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(features, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (prepaymentMdOrder != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("prepaymentMdOrder")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(prepaymentMdOrder, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (dynamicCallbackUrl != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("dynamicCallbackUrl")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(dynamicCallbackUrl, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (feeInput != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("feeInput")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(feeInput, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (cardholderName != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("cardholderName")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(cardholderName, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<RegisterOrderResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AlfabankException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 429)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AlfabankException("Too Many Requests", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AlfabankException("Internal Server Error", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 502)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AlfabankException("Bad Gateway", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AlfabankException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Запрос регистрации заказа с предавторизацией.
        /// </summary>
        /// <remarks>
        /// Запрос предавторизации заказа называется registerOrderPreAuth. Он используется для регистрации заказа в случае двухстадийной схемы оплаты.
        /// </remarks>
        /// <param name="orderNumber">Номер (идентификатор) заказа в системе магазина, уникален для каждого магазина в пределах системы. &lt;br&gt;Тип: AN..32</param>
        /// <param name="amount">Сумма платежа в копейках (или центах). &lt;br&gt;Тип: N..12</param>
        /// <param name="returnUrl">Адрес, на который требуется перенаправить пользователя в случае успешной оплаты. &lt;br&gt;Должен быть указан полностью, включая используемый протокол (например, https://test.ru вместо test.ru). &lt;br&gt;В противном случае пользователь будет перенаправлен по адресу следующего вида: http://&lt;адрес_платёжного_шлюза&gt;/&lt;адрес_продавца&gt;. &lt;br&gt;Тип: AN..512</param>
        /// <param name="userName">Логин магазина, полученный при подключении. Если вместо аутентификации по логину и паролю используется открытый токен (параметр token), параметр userName передавать не нужно. &lt;br&gt;Тип: AN..30</param>
        /// <param name="password">Пароль магазина, полученный при подключении. Если для аутентификации при регистрации вместо логина и пароля используется открытый токен (параметр token), параметр password передавать не нужно. &lt;br&gt;Тип: AN..30</param>
        /// <param name="token">Открытый ключ, который можно использовать для регистрации заказа. Если для аутентификации при регистрации заказа используются логин и пароль, параметр token передавать не нужно. &lt;br&gt;Тип: AN..30</param>
        /// <param name="currency">Код валюты платежа ISO 4217. Если не указан, считается равным коду валюты по умолчанию. &lt;br&gt;Тип: N3</param>
        /// <param name="failUrl">Адрес, на который требуется перенаправить пользователя в случае неуспешной оплаты. &lt;br&gt;Должен быть указан полностью, включая используемый протокол (например, https://test.ru вместо test.ru). &lt;br&gt;В противном случае пользователь будет перенаправлен по адресу следующего вида: http://&lt;адрес_платёжного_шлюза&gt;/&lt;адрес_продавца&gt;. &lt;br&gt;Тип: AN..512</param>
        /// <param name="description">Описание заказа в свободной форме. &lt;br&gt;Тип: ANS..598</param>
        /// <param name="ip">IP-адрес покупателя. &lt;br&gt;Тип: ANS..39</param>
        /// <param name="language">Язык в кодировке ISO 639-1. Если не указан, будет использован язык, указанный в настройках магазина как язык по умолчанию (default language). &lt;br&gt;Тип: ANS..39</param>
        /// <param name="pageView">По значению данного параметра определяется, какие страницы платёжного интерфейса должны загружаться для клиента. &lt;br&gt;Если параметр отсутствует, либо не соответствует формату, то по умолчанию считается pageView=DESKTOP. &lt;br&gt;Тип: ANS..20</param>
        /// <param name="clientId">Номер (идентификатор) клиента в системе магазина. Используется для реализации функционала связок. Может присутствовать, если магазину разрешено создание связок. &lt;br&gt;Тип: ANS..255</param>
        /// <param name="merchantLogin">Чтобы зарегистрировать заказ от имени дочернего мерчанта, укажите его логин в этом параметре. &lt;br&gt;Тип: AN..255</param>
        /// <param name="email">Адрес электронной почты покупателя. &lt;br&gt;Тип: ANS..40</param>
        /// <param name="postAddress">Адрес доставки. &lt;br&gt;Тип: ANS..598</param>
        /// <param name="jsonParams">Блок для передачи дополнительных параметров мерчанта. &lt;br&gt;Формат вида: {"Имя1": "Значение1", "Имя2": "Значение2"}. &lt;br&gt;Тип: имя - ANS..255 байт, значение - ANS..1024 байт</param>
        /// <param name="additionalOfdParams">Блок дополнительных параметров для ОФД. &lt;br&gt;Пример: &lt;br&gt;{ &lt;br&gt;"agent_info.type": "7", &lt;br&gt;"agent_info.paying.operation": "Наименование операции ма", &lt;br&gt;"agent_info.paying.phones": "+71111111111", &lt;br&gt;"agent_info.paymentsOperator.phones": "+72222222222", &lt;br&gt;"agent_info.MTOperator.address": "Адрес оператора перевода", &lt;br&gt;"agent_info.MTOperator.inn": "169910020020", &lt;br&gt;"agent_info.MTOperator.name": "Наименование оператора перевода", &lt;br&gt;"agent_info.MTOperator.phones": "+73333333333", &lt;br&gt;"supplier_info.phones": "+74444444444", &lt;br&gt;"cashier": "ФИО кассира" &lt;br&gt;"additional_check_props": "09090909", &lt;br&gt;"additional_user_props.name": "Наименование дополнительного реквизита пользователя", &lt;br&gt;"additional_user_props.value": "Значение дополнительного реквизита пользователя", &lt;br&gt;}</param>
        /// <param name="sessionTimeoutSecs">Продолжительность жизни заказа в секундах. &lt;br&gt;В случае если параметр не задан, будет использовано значение, указанное в настройках мерчанта или время по умолчанию (1200 секунд = 20 минут). &lt;br&gt;Если в запросе присутствует параметр expirationDate, то значение параметра sessionTimeoutSecs не учитывается. &lt;br&gt;Тип: N...9</param>
        /// <param name="expirationDate">Дата и время окончания жизни заказа. Формат: yyyy-MM-dd'T'HH:mm:ss. &lt;br&gt;Если этот параметр не передаётся в запросе, то для определения времени окончания жизни заказа используется sessionTimeoutSecs. &lt;br&gt;Тип: ANS</param>
        /// <param name="autocompletionDate">Время автозавершения заказа. Если заказ не был завершен ко времени указанному в autocompletionDate, то он завершится автоматически. &lt;br&gt;Тип: ANS. Формат параметра: yyyy-MM-dd'T'HH:mm:ss. Пример: "2017-12-29T13:02:51"</param>
        /// <param name="bindingId">Идентификатор связки, созданной ранее. Может использоваться, только если у магазина есть разрешение на работу со связками. &lt;br&gt;Если этот параметр передаётся в данном запросе, то это означает: &lt;br&gt;1. Данный заказ может быть оплачен только с помощью связки;&lt;br&gt;2. Плательщик будет перенаправлен на платёжную страницу, где требуется только ввод CVC. &lt;br&gt;Тип: AN..255</param>
        /// <param name="orderBundle">Корзина товаров заказа &lt;br&gt;&lt;br&gt;Пример: &lt;br&gt;"{"cartItems": &lt;br&gt;{"items": &lt;br&gt;[{"positionId":"1",&lt;br&gt;"name":"TEST",&lt;br&gt;"quantity":{"value":1.0,"measure":"psc"},&lt;br&gt;"itemAmount":500000,&lt;br&gt;"itemCode":"code1",&lt;br&gt;"itemPrice":"500000",&lt;br&gt;"itemAttributes":&lt;br&gt;{"attributes":&lt;br&gt;[{"name":"agent_info.paying.operation","value":"Test operation"},&lt;br&gt;{"name":"supplier_info.phones","value":"+79161234567"},&lt;br&gt;{"name":"agent_info.MTOperator.name","value":"Test MT Operator"},&lt;br&gt;{"name":"agent_info.paymentsOperator.phones","value":"+79161234567,"},&lt;br&gt;{"name":"nomenclature","value":"dGVzdCBkZXBvc2l0"},&lt;br&gt;{"name":"agent_info.MTOperator.address","value":"Moscow"},&lt;br&gt;{"name":"supplier_info.name","value":"Test Supplier"},&lt;br&gt;{"name":"paymentMethod","value":"1"},&lt;br&gt;{"name":"paymentObject","value":"3"},&lt;br&gt;{"name":"agent_info.MTOperator.phones","value":"+79161234567"},&lt;br&gt;{"name":"agent_info.MTOperator.inn","value":"9715225506"},&lt;br&gt;{"name":"supplier_info.inn","value":"9715225506"},&lt;br&gt;{"name":"agent_info.type","value":"7"},&lt;br&gt;{"name":"agent_info.paying.phones","value":"+79161234567"}]}}]},&lt;br&gt;"agent":&lt;br&gt;{"agentType":1,&lt;br&gt;"payingOperation":"Test agent operation",&lt;br&gt;"payingPhones":"+79161234567,",&lt;br&gt;"paymentsOperatorPhones":"+79161234567",&lt;br&gt;"mtOperatorPhones":"+79169876543",&lt;br&gt;"mtOperatorName":"Agent MT Operator",&lt;br&gt;"mtOperatorAddress":"New York",&lt;br&gt;"mtOperatorInn":"9715225506"}}]"</param>
        /// <param name="billingPayerData">Регистрационный адрес клиента, заданный при регистрации карты в Банке Эмитенте.</param>
        /// <param name="shippingPayerData">Данные доставки клиента.</param>
        /// <param name="preOrderPayerData">Данные предзаказа.</param>
        /// <param name="orderPayerData">Данные заказа.</param>
        /// <param name="billingAndShippingAddressMatchIndicator">Индикатор совпадения адреса держателя карты для выставления счета и адреса доставки.</param>
        /// <param name="features">Возможно использование следующих значений: &lt;br&gt;AUTO_PAYMENT - Если запрос на регистрацию заказа инициирует проведение автоплатежей. &lt;br&gt;VERIFY - Если указать это значение после запроса на регистрацию заказа произойдёт верификация держателя карты без списания средств с его счёта, поэтому в запросе можно передавать нулевую сумму.</param>
        /// <param name="prepaymentMdOrder">mdOrder заказа с типом расчета Предоплата или Аванс.</param>
        /// <param name="dynamicCallbackUrl">Адрес для callback вызовов (необходима дополнительная настройка мерчанта).</param>
        /// <param name="feeInput">Размер комиссии мерчанта в минимальных единицах валюты.</param>
        /// <param name="cardholderName">Имя владельца карты.</param>
        /// <returns>OK</returns>
        /// <exception cref="AlfabankException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<RegisterOrderResponse> RegisterOrderPreAuthAsync(string orderNumber, long amount, string returnUrl, string? userName = null, string? password = null, string? token = null, long? currency = null, string? failUrl = null, string? description = null, string? ip = null, string? language = null, PageView2? pageView = null, string? clientId = null, string? merchantLogin = null, string? email = null, string? postAddress = null, string? jsonParams = null, string? additionalOfdParams = null, long? sessionTimeoutSecs = null, string? expirationDate = null, string? autocompletionDate = null, string? bindingId = null, string? orderBundle = null, string? billingPayerData = null, string? shippingPayerData = null, string? preOrderPayerData = null, string? orderPayerData = null, string? billingAndShippingAddressMatchIndicator = null, string? features = null, string? prepaymentMdOrder = null, string? dynamicCallbackUrl = null, string? feeInput = null, string? cardholderName = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (orderNumber == null)
                throw new System.ArgumentNullException("orderNumber");

            if (amount == null)
                throw new System.ArgumentNullException("amount");

            if (returnUrl == null)
                throw new System.ArgumentNullException("returnUrl");

            var client_ = new System.Net.Http.HttpClient();
            var disposeClient_ = true;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "*/*");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "rest/registerPreAuth.do"
                    urlBuilder_.Append("rest/registerPreAuth.do");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("orderNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(orderNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Append(System.Uri.EscapeDataString("amount")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(amount, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Append(System.Uri.EscapeDataString("returnUrl")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(returnUrl, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    if (userName != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("userName")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(userName, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (password != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("password")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(password, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (token != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("token")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(token, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (currency != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("currency")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(currency, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (failUrl != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("failUrl")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(failUrl, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (description != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("description")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(description, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (ip != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("ip")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(ip, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (language != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("language")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(language, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (pageView != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("pageView")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pageView, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (clientId != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("clientId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(clientId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (merchantLogin != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("merchantLogin")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(merchantLogin, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (email != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("email")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(email, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (postAddress != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("postAddress")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(postAddress, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (jsonParams != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("jsonParams")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(jsonParams, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (additionalOfdParams != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("additionalOfdParams")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(additionalOfdParams, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (sessionTimeoutSecs != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("sessionTimeoutSecs")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(sessionTimeoutSecs, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (expirationDate != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("expirationDate")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(expirationDate, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (autocompletionDate != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("autocompletionDate")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(autocompletionDate, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (bindingId != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("bindingId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(bindingId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (orderBundle != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("orderBundle")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(orderBundle, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (billingPayerData != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("billingPayerData")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(billingPayerData, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (shippingPayerData != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("shippingPayerData")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(shippingPayerData, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (preOrderPayerData != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("preOrderPayerData")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(preOrderPayerData, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (orderPayerData != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("orderPayerData")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(orderPayerData, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (billingAndShippingAddressMatchIndicator != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("billingAndShippingAddressMatchIndicator")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(billingAndShippingAddressMatchIndicator, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (features != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("features")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(features, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (prepaymentMdOrder != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("prepaymentMdOrder")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(prepaymentMdOrder, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (dynamicCallbackUrl != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("dynamicCallbackUrl")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(dynamicCallbackUrl, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (feeInput != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("feeInput")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(feeInput, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (cardholderName != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("cardholderName")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(cardholderName, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<RegisterOrderResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AlfabankException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 429)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AlfabankException("Too Many Requests", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AlfabankException("Internal Server Error", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 502)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AlfabankException("Bad Gateway", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AlfabankException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Запрос отмены заказа.
        /// </summary>
        /// <remarks>
        /// Для отмены оплаты заказа используется запрос reverse.do. Параметры orderId и orderNumber для выполнения запроса взаимозаменяемы, обязательно наличие одного из них.
        /// </remarks>
        /// <param name="userName">Логин магазина, полученный при подключении. &lt;br&gt;Тип: AN..30</param>
        /// <param name="password">Пароль магазина, полученный при подключении. &lt;br&gt;Тип: AN..30</param>
        /// <param name="orderId">Номер заказа в платежной системе. Уникален в пределах системы. &lt;br&gt;Тип: ANS36</param>
        /// <param name="orderNumber">Номер (идентификатор) заказа в системе магазина.  &lt;br&gt;Тип: AN..32</param>
        /// <param name="language">Язык в кодировке ISO 639-1. Если не указан, будет использован язык, указанный в настройках магазина как язык по умолчанию (default language). &lt;br&gt;Тип: A2</param>
        /// <param name="jsonParams">Блок с атрибутами дополнительных параметров мерчанта. &lt;br&gt;Формат вида: {"Имя1": "Значение1", "Имя2": "Значение2"}.</param>
        /// <param name="merchantLogin">Логин мерчанта. &lt;br&gt;Тип: AN..255</param>
        /// <param name="amount">Сумма проводимой операции.</param>
        /// <param name="currency">${reverse.req.param.currency.description}</param>
        /// <returns>OK</returns>
        /// <exception cref="AlfabankException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<OrderResult> ReverseOrderAsync(string userName, string password, string? orderId = null, string? orderNumber = null, string? language = null, string? jsonParams = null, string? merchantLogin = null, string? amount = null, string? currency = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (userName == null)
                throw new System.ArgumentNullException("userName");

            if (password == null)
                throw new System.ArgumentNullException("password");

            var client_ = new System.Net.Http.HttpClient();
            var disposeClient_ = true;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "*/*");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "rest/reverse.do"
                    urlBuilder_.Append("rest/reverse.do");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("userName")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(userName, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Append(System.Uri.EscapeDataString("password")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(password, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    if (orderId != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("orderId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(orderId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (orderNumber != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("orderNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(orderNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (language != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("language")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(language, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (jsonParams != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("jsonParams")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(jsonParams, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (merchantLogin != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("merchantLogin")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(merchantLogin, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (amount != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("amount")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(amount, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (currency != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("currency")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(currency, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<OrderResult>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AlfabankException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 429)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AlfabankException("Too Many Requests", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AlfabankException("Internal Server Error", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 502)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AlfabankException("Bad Gateway", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AlfabankException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Возвращает данные функциональной ссылки для B2B
        /// </summary>
        /// <remarks>
        /// Используется для получения данных по ранее зарегистрированной одноразовой или многоразовой функциональной ссылке
        /// </remarks>
        /// <param name="qrcId">qrcId</param>
        /// <param name="password">Пароль магазина, полученный при подключении</param>
        /// <param name="qrId">Идентификатор Функциональной ссылки СБП</param>
        /// <param name="userName">Логин магазина, полученный при подключении</param>
        /// <returns>OK</returns>
        /// <exception cref="AlfabankException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SbpB2bPayloadApiResponse> GetPayloadUsingPOSTAsync(string qrcId, string password, string qrId, string userName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (qrcId == null)
                throw new System.ArgumentNullException("qrcId");

            if (password == null)
                throw new System.ArgumentNullException("password");

            if (qrId == null)
                throw new System.ArgumentNullException("qrId");

            if (userName == null)
                throw new System.ArgumentNullException("userName");

            var client_ = new System.Net.Http.HttpClient();
            var disposeClient_ = true;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json;charset=UTF-8");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json;charset=UTF-8"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "rest/sbp/b2b/getPayload.do"
                    urlBuilder_.Append("rest/sbp/b2b/getPayload.do");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("qrcId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(qrcId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Append(System.Uri.EscapeDataString("password")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(password, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Append(System.Uri.EscapeDataString("qrId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(qrId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Append(System.Uri.EscapeDataString("userName")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(userName, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<SbpB2bPayloadApiResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AlfabankException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 429)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AlfabankException("Too Many Requests", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AlfabankException("Internal Server Error", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 502)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AlfabankException("Bad Gateway", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AlfabankException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Запрос выполнения B2B перевода
        /// </summary>
        /// <remarks>
        /// Метод доступен только для Мерчантов, с пермиссией: "Разрешена отправка B2B переводов через СБП"
        /// </remarks>
        /// <param name="request">request</param>
        /// <returns>OK</returns>
        /// <exception cref="AlfabankException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SbpB2bPerformApiResponse> PerformUsingPOSTAsync(SbpB2bPerformApiRequest request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (request == null)
                throw new System.ArgumentNullException("request");

            var client_ = new System.Net.Http.HttpClient();
            var disposeClient_ = true;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(request, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json;charset=UTF-8"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "rest/sbp/b2b/perform.do"
                    urlBuilder_.Append("rest/sbp/b2b/perform.do");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<SbpB2bPerformApiResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AlfabankException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 429)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AlfabankException("Too Many Requests", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AlfabankException("Internal Server Error", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 502)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AlfabankException("Bad Gateway", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AlfabankException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Запрос получения одноразовой функциональной ссылки СБП для B2B
        /// </summary>
        /// <remarks>
        /// При необходимости отображения renderedQr нужно указать размеры QR-кода: qrHeight и qrWidth.
        /// </remarks>
        /// <param name="password">Пароль магазина, полученный при подключении.</param>
        /// <param name="userName">Логин магазина, полученный при подключении.</param>
        /// <param name="mdOrder">Номер заказа, полученный при регистрации.</param>
        /// <param name="account">Счет юридического лица.</param>
        /// <param name="memberId">Идентификатор банка-участника SBP.</param>
        /// <param name="tspMerchantId">Идентификатор ТСП.</param>
        /// <param name="paymentPurpose">Дополнительная информация от TSP. 
        /// <br/> Если не заполнена, то по умолчанию будет подставлено описание заказа, если оно присутствует. 
        /// <br/> Максимальная длина: 140 символов.</param>
        /// <param name="qrHeight">Высота QR-кода. Укажите, если требуется renderedQR. 
        /// <br/>Минимальное значение: 10. Максимальное значение: 1000.</param>
        /// <param name="qrWidth">Ширина QR-кода. Укажите, если требуется renderedQR. 
        /// <br/>Минимальное значение: 10. Максимальное значение: 1000.</param>
        /// <param name="qrFormat">Формат QR-кода. Указываем, если хотим адаптивно отображать код на платежной странице с логотипом под разные размеры страницы. Допустимые значения: 1) image - возвращает qr-код с логотипом как картинку, matrix - возвращает матрицу qr-кода как строка состоящая из 1 и 0.</param>
        /// <param name="redirectUrl">Ссылка для автоматического возврата из приложения банка в приложение или на сайт ТСП. 
        /// <br/> Максимальная длина: 1024 символов.</param>
        /// <param name="takeTax">Информация о взимании НДС (true –облагается НДС, false –не облагается НДС)</param>
        /// <param name="totalTaxAmount">Сумма НДС в копейках. Валюта НДС - рубли РФ</param>
        /// <returns>OK</returns>
        /// <exception cref="AlfabankException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SbpC2bGetQrApiResponse> GetDynamicQrUsingPOSTAsync(string password, string userName, string mdOrder, string? account = null, string? memberId = null, string? tspMerchantId = null, string? paymentPurpose = null, string? qrHeight = null, string? qrWidth = null, string? qrFormat = null, string? redirectUrl = null, string? takeTax = null, string? totalTaxAmount = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (password == null)
                throw new System.ArgumentNullException("password");

            if (userName == null)
                throw new System.ArgumentNullException("userName");

            if (mdOrder == null)
                throw new System.ArgumentNullException("mdOrder");

            var client_ = new System.Net.Http.HttpClient();
            var disposeClient_ = true;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json;charset=UTF-8");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json;charset=UTF-8"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "rest/sbp/b2b/qr/dynamic/get.do"
                    urlBuilder_.Append("rest/sbp/b2b/qr/dynamic/get.do");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("password")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(password, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Append(System.Uri.EscapeDataString("userName")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(userName, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Append(System.Uri.EscapeDataString("mdOrder")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(mdOrder, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    if (account != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("account")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(account, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (memberId != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("memberId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(memberId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (tspMerchantId != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("tspMerchantId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(tspMerchantId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (paymentPurpose != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("paymentPurpose")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(paymentPurpose, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (qrHeight != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("qrHeight")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(qrHeight, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (qrWidth != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("qrWidth")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(qrWidth, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (qrFormat != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("qrFormat")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(qrFormat, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (redirectUrl != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("redirectUrl")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(redirectUrl, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (takeTax != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("takeTax")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(takeTax, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (totalTaxAmount != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("totalTaxAmount")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(totalTaxAmount, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<SbpC2bGetQrApiResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AlfabankException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 429)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AlfabankException("Too Many Requests", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AlfabankException("Internal Server Error", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 502)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AlfabankException("Bad Gateway", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AlfabankException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Запрос платежа по биометрии
        /// </summary>
        /// <remarks>
        /// В случае успешной обработки возвращает значения параметров, 
        /// <br/>полученных в ответе от ОПКЦ СБП: location (URL веб-формы ЕБС, 
        /// <br/>на который осуществляется перенаправление пользователя для снятия биометрических образцов) 
        /// <br/>и sessionId (Идентификатор сессии идентификации в ЕБС)
        /// </remarks>
        /// <param name="request">request</param>
        /// <returns>OK</returns>
        /// <exception cref="AlfabankException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SbpBioPaymentApiResponse> GetBioUrlUsingPOSTAsync(SbpBioPaymentApiRequest request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (request == null)
                throw new System.ArgumentNullException("request");

            var client_ = new System.Net.Http.HttpClient();
            var disposeClient_ = true;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(request, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json;charset=UTF-8"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "rest/sbp/c2b/bio/getUrl.do"
                    urlBuilder_.Append("rest/sbp/c2b/bio/getUrl.do");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<SbpBioPaymentApiResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AlfabankException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 429)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AlfabankException("Too Many Requests", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AlfabankException("Internal Server Error", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 502)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AlfabankException("Bad Gateway", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AlfabankException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Возвращает список банков участников СБП.
        /// </summary>
        /// <remarks>
        /// Мерчант должен иметь разрешение API SBP C2B. Не более одного вызова в один момент времени. Не более 10 вызовов в час, не более 3 в минуту.
        /// </remarks>
        /// <param name="password">Пароль магазина, полученный при подключении.</param>
        /// <param name="userName">Логин магазина, полученный при подключении.</param>
        /// <param name="scenarioName">Название поддерживаемого сценария операции СБП.</param>
        /// <param name="scenarioRole">Роль в поддерживаемом сценарии операции СБП.</param>
        /// <returns>OK</returns>
        /// <exception cref="AlfabankException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SbpC2bBanksResponse> GetBankListSBPUsingPOSTAsync(string password, string userName, string? scenarioName = null, string? scenarioRole = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (password == null)
                throw new System.ArgumentNullException("password");

            if (userName == null)
                throw new System.ArgumentNullException("userName");

            var client_ = new System.Net.Http.HttpClient();
            var disposeClient_ = true;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json;charset=UTF-8");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json;charset=UTF-8"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "rest/sbp/c2b/getBankListSBP.do"
                    urlBuilder_.Append("rest/sbp/c2b/getBankListSBP.do");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("password")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(password, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Append(System.Uri.EscapeDataString("userName")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(userName, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    if (scenarioName != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("scenarioName")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(scenarioName, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (scenarioRole != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("scenarioRole")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(scenarioRole, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<SbpC2bBanksResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AlfabankException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 429)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AlfabankException("Too Many Requests", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AlfabankException("Internal Server Error", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 502)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AlfabankException("Bad Gateway", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AlfabankException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Запрос списка СБП подписок клиента.
        /// </summary>
        /// <remarks>
        /// Для получения списка СБП подписок клиента используется запрос getBindings.do.
        /// </remarks>
        /// <param name="password">Пароль магазина, полученный при подключении. &lt;br&gt;Тип: AN..30</param>
        /// <param name="userName">Логин магазина, полученный при подключении. &lt;br&gt;Тип: AN..30</param>
        /// <param name="clientId">Номер (идентификатор) клиента в системе магазина, переданный при регистрации заказа. Присутствует только если магазину разрешено создание связок. &lt;br&gt;Тип: ANS..255</param>
        /// <param name="bindingId">Идентификатор связки созданной при оплате заказа или использованной для оплаты. Присутствует только если магазину разрешено создание связок. &lt;br&gt;Тип: AN..255</param>
        /// <param name="showDisabled">Отображать ли не активные подписки. &lt;br&gt;getSbpBindings.clientId=Идентификатор клиента</param>
        /// <returns>OK</returns>
        /// <exception cref="AlfabankException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SbpC2bGetBindingsApiResponse> GetSbpBindingsAsync(string password, string userName, string clientId, string? bindingId = null, string? showDisabled = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (password == null)
                throw new System.ArgumentNullException("password");

            if (userName == null)
                throw new System.ArgumentNullException("userName");

            if (clientId == null)
                throw new System.ArgumentNullException("clientId");

            var client_ = new System.Net.Http.HttpClient();
            var disposeClient_ = true;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "*/*");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "rest/sbp/c2b/getBindings.do"
                    urlBuilder_.Append("rest/sbp/c2b/getBindings.do");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("password")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(password, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Append(System.Uri.EscapeDataString("userName")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(userName, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Append(System.Uri.EscapeDataString("clientId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(clientId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    if (bindingId != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("bindingId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(bindingId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (showDisabled != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("showDisabled")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(showDisabled, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<SbpC2bGetBindingsApiResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AlfabankException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 429)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AlfabankException("Too Many Requests", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AlfabankException("Internal Server Error", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 502)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AlfabankException("Bad Gateway", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AlfabankException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Возвращает зарегистрированный в SBP QR-код.
        /// </summary>
        /// <remarks>
        /// Если вам нужен renderedQr, укажите размеры QR-кода (qrHeight и qrWidth). 
        /// <br/>Чтобы переопределить выбранный по умолчанию счет юридического лица укажите все его параметры одновременно (account и memberId). 
        /// <br/>Чтобы переопределить выранный по умолчанию ТСП укажите его параметры (tspMerchantId). 
        /// <br/>Мерчант должен иметь разрешение API SBP C2B.
        /// </remarks>
        /// <param name="mdOrder">Номер заказа, полученный при регистрации.</param>
        /// <param name="password">Пароль магазина, полученный при подключении.</param>
        /// <param name="token">Токен для аутентификации</param>
        /// <param name="userName">Логин магазина, полученный при подключении.</param>
        /// <param name="account">Счет юридического лица.</param>
        /// <param name="memberId">Идентификатор банка-участника SBP.</param>
        /// <param name="tspMerchantId">Идентификатор ТСП.</param>
        /// <param name="paymentPurpose">Дополнительная информация от TSP. 
        /// <br/> Если не заполнена, то по умолчанию будет подставлено описание заказа, если оно присутствует. 
        /// <br/> Максимальная длина: 140 символов.</param>
        /// <param name="qrHeight">Высота QR-кода. Укажите, если требуется renderedQR. 
        /// <br/>Минимальное значение: 10. Максимальное значение: 1000.</param>
        /// <param name="qrWidth">Ширина QR-кода. Укажите, если требуется renderedQR. 
        /// <br/>Минимальное значение: 10. Максимальное значение: 1000.</param>
        /// <param name="qrFormat">Формат QR-кода. Указываем, если хотим адаптивно отображать код на платежной странице с логотипом под разные размеры страницы. Допустимые значения: 1) image - возвращает qr-код с логотипом как картинку, matrix - возвращает матрицу qr-кода как строка состоящая из 1 и 0.</param>
        /// <param name="redirectUrl">Cсылка для автоматического возврата из приложения банка в приложение или на сайт ТСП. 
        /// <br/> Максимальная длина: 1024 символов.</param>
        /// <param name="createSubscription">Необходима привязка счета плательщика (сохранение связки). По умолчанию: false.</param>
        /// <param name="subscriptionServiceId">Идентификатор типа предоставляемой услуги для привязки счета.</param>
        /// <param name="subscriptionServiceName">Наименование типа предоставляемой услуги для привязки счета.</param>
        /// <returns>OK</returns>
        /// <exception cref="AlfabankException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SbpC2bGetQrApiResponse> GetDynamicQrUsingPOST2Async(string mdOrder, string? password = null, string? token = null, string? userName = null, string? account = null, string? memberId = null, string? tspMerchantId = null, string? paymentPurpose = null, string? qrHeight = null, string? qrWidth = null, string? qrFormat = null, string? redirectUrl = null, string? createSubscription = null, string? subscriptionServiceId = null, string? subscriptionServiceName = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (mdOrder == null)
                throw new System.ArgumentNullException("mdOrder");

            var client_ = new System.Net.Http.HttpClient();
            var disposeClient_ = true;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json;charset=UTF-8");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json;charset=UTF-8"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "rest/sbp/c2b/qr/dynamic/get.do"
                    urlBuilder_.Append("rest/sbp/c2b/qr/dynamic/get.do");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("mdOrder")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(mdOrder, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    if (password != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("password")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(password, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (token != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("token")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(token, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (userName != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("userName")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(userName, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (account != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("account")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(account, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (memberId != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("memberId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(memberId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (tspMerchantId != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("tspMerchantId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(tspMerchantId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (paymentPurpose != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("paymentPurpose")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(paymentPurpose, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (qrHeight != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("qrHeight")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(qrHeight, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (qrWidth != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("qrWidth")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(qrWidth, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (qrFormat != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("qrFormat")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(qrFormat, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (redirectUrl != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("redirectUrl")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(redirectUrl, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (createSubscription != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("createSubscription")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(createSubscription, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (subscriptionServiceId != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("subscriptionServiceId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(subscriptionServiceId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (subscriptionServiceName != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("subscriptionServiceName")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(subscriptionServiceName, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<SbpC2bGetQrApiResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AlfabankException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 429)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AlfabankException("Too Many Requests", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AlfabankException("Internal Server Error", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 502)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AlfabankException("Bad Gateway", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AlfabankException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Отклоняет QR-код, если он еще не в процессе оплаты.
        /// </summary>
        /// <remarks>
        /// Только для QR-кода в состоянии 'STARTED'. Мерчант должен иметь разрешение API SBP C2B.
        /// </remarks>
        /// <param name="password">Пароль магазина, полученный при подключении.</param>
        /// <param name="userName">Логин магазина, полученный при подключении.</param>
        /// <param name="mdOrder">Номер заказа, полученный при регистрации.</param>
        /// <param name="qrId">Идентификатор QR-кода.</param>
        /// <returns>OK</returns>
        /// <exception cref="AlfabankException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SbpC2bRejectQrApiResponse> RejectDynamicQrUsingPOSTAsync(string password, string userName, string mdOrder, string qrId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (password == null)
                throw new System.ArgumentNullException("password");

            if (userName == null)
                throw new System.ArgumentNullException("userName");

            if (mdOrder == null)
                throw new System.ArgumentNullException("mdOrder");

            if (qrId == null)
                throw new System.ArgumentNullException("qrId");

            var client_ = new System.Net.Http.HttpClient();
            var disposeClient_ = true;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json;charset=UTF-8");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json;charset=UTF-8"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "rest/sbp/c2b/qr/dynamic/reject.do"
                    urlBuilder_.Append("rest/sbp/c2b/qr/dynamic/reject.do");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("password")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(password, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Append(System.Uri.EscapeDataString("userName")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(userName, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Append(System.Uri.EscapeDataString("mdOrder")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(mdOrder, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Append(System.Uri.EscapeDataString("qrId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(qrId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<SbpC2bRejectQrApiResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AlfabankException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 429)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AlfabankException("Too Many Requests", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AlfabankException("Internal Server Error", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 502)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AlfabankException("Bad Gateway", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AlfabankException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Возвращает статус QR-кода.
        /// </summary>
        /// <remarks>
        /// Только для зарегистрированных QR-кодов. Мерчант должен иметь разрешение API SBP C2B.
        /// </remarks>
        /// <param name="mdOrder">Номер заказа, полученный при регистрации.</param>
        /// <param name="qrId">Идентификатор QR-кода.</param>
        /// <param name="password">Пароль магазина, полученный при подключении.</param>
        /// <param name="token">Токен для аутентификации</param>
        /// <param name="userName">Логин магазина, полученный при подключении.</param>
        /// <returns>OK</returns>
        /// <exception cref="AlfabankException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SbpC2bQrStatusApiResponse> GetQrStatusUsingPOSTAsync(string mdOrder, string qrId, string? password = null, string? token = null, string? userName = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (mdOrder == null)
                throw new System.ArgumentNullException("mdOrder");

            if (qrId == null)
                throw new System.ArgumentNullException("qrId");

            var client_ = new System.Net.Http.HttpClient();
            var disposeClient_ = true;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json;charset=UTF-8");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json;charset=UTF-8"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "rest/sbp/c2b/qr/status.do"
                    urlBuilder_.Append("rest/sbp/c2b/qr/status.do");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("mdOrder")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(mdOrder, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Append(System.Uri.EscapeDataString("qrId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(qrId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    if (password != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("password")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(password, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (token != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("token")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(token, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (userName != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("userName")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(userName, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<SbpC2bQrStatusApiResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AlfabankException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 429)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AlfabankException("Too Many Requests", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AlfabankException("Internal Server Error", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 502)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AlfabankException("Bad Gateway", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AlfabankException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Запрос деактивации СБП подписки.
        /// </summary>
        /// <remarks>
        /// Для деактивации СБП подписки используется запрос unBind.do.
        /// </remarks>
        /// <param name="password">Пароль магазина, полученный при подключении. &lt;br&gt;Тип: AN..30</param>
        /// <param name="userName">Логин магазина, полученный при подключении. &lt;br&gt;Тип: AN..30</param>
        /// <param name="bindingId">Идентификатор связки созданной при оплате заказа или использованной для оплаты. Присутствует только если магазину разрешено создание связок. &lt;br&gt;Тип: AN..255</param>
        /// <returns>OK</returns>
        /// <exception cref="AlfabankException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SbpC2bUnBindApiResponse> UnBindSbpAsync(string password, string userName, string bindingId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (password == null)
                throw new System.ArgumentNullException("password");

            if (userName == null)
                throw new System.ArgumentNullException("userName");

            if (bindingId == null)
                throw new System.ArgumentNullException("bindingId");

            var client_ = new System.Net.Http.HttpClient();
            var disposeClient_ = true;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "*/*");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "rest/sbp/c2b/unBind.do"
                    urlBuilder_.Append("rest/sbp/c2b/unBind.do");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("password")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(password, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Append(System.Uri.EscapeDataString("userName")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(userName, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Append(System.Uri.EscapeDataString("bindingId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(bindingId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<SbpC2bUnBindApiResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AlfabankException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 429)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AlfabankException("Too Many Requests", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AlfabankException("Internal Server Error", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 502)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AlfabankException("Bad Gateway", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AlfabankException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Создание шаблона заказа.
        /// </summary>
        /// <param name="request">request</param>
        /// <returns>OK</returns>
        /// <exception cref="AlfabankException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SingleClickTemplateResponse_SingleClickCreateTemplateResponse> CreateUsingPOSTAsync(SingleClickTemplateRequest_SingleClickCreateTemplate request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (request == null)
                throw new System.ArgumentNullException("request");

            var client_ = new System.Net.Http.HttpClient();
            var disposeClient_ = true;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(request, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json;charset=UTF-8"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "rest/templates/create.do"
                    urlBuilder_.Append("rest/templates/create.do");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<SingleClickTemplateResponse_SingleClickCreateTemplateResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AlfabankException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 429)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AlfabankException("Too Many Requests", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AlfabankException("Internal Server Error", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 502)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AlfabankException("Bad Gateway", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AlfabankException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Создание шаблона заказа.
        /// </summary>
        /// <param name="request">request</param>
        /// <returns>OK</returns>
        /// <exception cref="AlfabankException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SbpTemplateDetailsResponse> CreateTemplateUsingPOSTAsync(CreateSbpTemplateRequest request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (request == null)
                throw new System.ArgumentNullException("request");

            var client_ = new System.Net.Http.HttpClient();
            var disposeClient_ = true;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(request, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "rest/templates/createTemplate.do"
                    urlBuilder_.Append("rest/templates/createTemplate.do");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<SbpTemplateDetailsResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AlfabankException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 429)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AlfabankException("Too Many Requests", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AlfabankException("Internal Server Error", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 502)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AlfabankException("Bad Gateway", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AlfabankException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Получение данных шаблона.
        /// </summary>
        /// <param name="request">request</param>
        /// <returns>OK</returns>
        /// <exception cref="AlfabankException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SingleClickTemplateResponse_SingleClickGetTemplateResponse> GetUsingPOSTAsync(SingleClickTemplateRequest_SingleClickGetTemplate request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (request == null)
                throw new System.ArgumentNullException("request");

            var client_ = new System.Net.Http.HttpClient();
            var disposeClient_ = true;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(request, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json;charset=UTF-8"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "rest/templates/get.do"
                    urlBuilder_.Append("rest/templates/get.do");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<SingleClickTemplateResponse_SingleClickGetTemplateResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AlfabankException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 429)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AlfabankException("Too Many Requests", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AlfabankException("Internal Server Error", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 502)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AlfabankException("Bad Gateway", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AlfabankException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Получение данных шаблона.
        /// </summary>
        /// <param name="request">request</param>
        /// <returns>OK</returns>
        /// <exception cref="AlfabankException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SingleClickGetListResponse> GetListUsingPOSTAsync(SingleClickGetListRequest request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (request == null)
                throw new System.ArgumentNullException("request");

            var client_ = new System.Net.Http.HttpClient();
            var disposeClient_ = true;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(request, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json;charset=UTF-8"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "rest/templates/getList.do"
                    urlBuilder_.Append("rest/templates/getList.do");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<SingleClickGetListResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AlfabankException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 429)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AlfabankException("Too Many Requests", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AlfabankException("Internal Server Error", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 502)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AlfabankException("Bad Gateway", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AlfabankException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Получение данных шаблона.
        /// </summary>
        /// <param name="userName">Имя пользователя.</param>
        /// <param name="password">Пароль.</param>
        /// <param name="templateId">id шаблона.</param>
        /// <returns>OK</returns>
        /// <exception cref="AlfabankException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SbpTemplateDetailsResponse> GetTemplateDetailsUsingGETAsync(string userName, string password, string templateId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (userName == null)
                throw new System.ArgumentNullException("userName");

            if (password == null)
                throw new System.ArgumentNullException("password");

            if (templateId == null)
                throw new System.ArgumentNullException("templateId");

            var client_ = new System.Net.Http.HttpClient();
            var disposeClient_ = true;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "rest/templates/getTemplateDetails.do"
                    urlBuilder_.Append("rest/templates/getTemplateDetails.do");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("userName")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(userName, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Append(System.Uri.EscapeDataString("password")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(password, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Append(System.Uri.EscapeDataString("templateId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(templateId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<SbpTemplateDetailsResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AlfabankException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 429)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AlfabankException("Too Many Requests", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AlfabankException("Internal Server Error", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 502)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AlfabankException("Bad Gateway", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AlfabankException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Получение данных шаблона.
        /// </summary>
        /// <param name="userName">Имя пользователя.</param>
        /// <param name="password">Пароль.</param>
        /// <param name="templateId">id шаблона.</param>
        /// <returns>OK</returns>
        /// <exception cref="AlfabankException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SbpTemplateDetailsResponse> GetTemplateDetailsUsingPOSTAsync(string userName, string password, string templateId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (userName == null)
                throw new System.ArgumentNullException("userName");

            if (password == null)
                throw new System.ArgumentNullException("password");

            if (templateId == null)
                throw new System.ArgumentNullException("templateId");

            var client_ = new System.Net.Http.HttpClient();
            var disposeClient_ = true;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "*/*");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "rest/templates/getTemplateDetails.do"
                    urlBuilder_.Append("rest/templates/getTemplateDetails.do");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("userName")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(userName, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Append(System.Uri.EscapeDataString("password")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(password, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Append(System.Uri.EscapeDataString("templateId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(templateId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<SbpTemplateDetailsResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AlfabankException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 429)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AlfabankException("Too Many Requests", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AlfabankException("Internal Server Error", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 502)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AlfabankException("Bad Gateway", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AlfabankException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Изменение данных шаблона.
        /// </summary>
        /// <param name="request">request</param>
        /// <returns>OK</returns>
        /// <exception cref="AlfabankException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SingleClickTemplateResponse> UpdateUsingPOSTAsync(SingleClickTemplateRequest_SingleClickUpdateTemplate request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (request == null)
                throw new System.ArgumentNullException("request");

            var client_ = new System.Net.Http.HttpClient();
            var disposeClient_ = true;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(request, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json;charset=UTF-8"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "rest/templates/update.do"
                    urlBuilder_.Append("rest/templates/update.do");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<SingleClickTemplateResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AlfabankException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 429)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AlfabankException("Too Many Requests", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AlfabankException("Internal Server Error", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 502)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AlfabankException("Bad Gateway", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AlfabankException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Изменение данных шаблона.
        /// </summary>
        /// <remarks>
        /// Позволяет деактивировать шаблон или изменить даты начала и окончания действия.
        /// </remarks>
        /// <param name="request">request</param>
        /// <returns>OK</returns>
        /// <exception cref="AlfabankException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SbpTemplateDetailsResponse> UpdateTemplateUsingPOSTAsync(UpdateSbpTemplateRequest request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (request == null)
                throw new System.ArgumentNullException("request");

            var client_ = new System.Net.Http.HttpClient();
            var disposeClient_ = true;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(request, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "rest/templates/updateTemplate.do"
                    urlBuilder_.Append("rest/templates/updateTemplate.do");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<SbpTemplateDetailsResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AlfabankException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 429)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AlfabankException("Too Many Requests", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AlfabankException("Internal Server Error", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 502)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AlfabankException("Bad Gateway", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AlfabankException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Запрос деактивации связки.
        /// </summary>
        /// <remarks>
        /// Для деактивации связки используется запрос unBindCard.do.
        /// </remarks>
        /// <param name="userName">Логин магазина, полученный при подключении. &lt;br&gt;Тип: AN..30</param>
        /// <param name="password">Пароль магазина, полученный при подключении. &lt;br&gt;Тип: AN..30</param>
        /// <param name="bindingId">Идентификатор связки созданной при оплате заказа или использованной для оплаты. Присутствует только если магазину разрешено создание связок. &lt;br&gt;Тип: AN..255</param>
        /// <param name="phone">Телефон клиента. Параметр обязателен для некоторых внешних хранилищ связок.</param>
        /// <param name="externalBindingId">Идентификатор связки во внешнем хранилище связок.</param>
        /// <param name="externalBindingSystem">Тип внешнего хранилища связок.</param>
        /// <param name="fingerprint">Данные об устройстве клиента. Параметр обязателен для некоторых внешних хранилищ связок.</param>
        /// <param name="language">Язык в кодировке ISO 639-1. Если не указан, будет использован язык, указанный в настройках магазина как язык по умолчанию. &lt;br&gt;Тип: A2</param>
        /// <returns>OK</returns>
        /// <exception cref="AlfabankException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<OrderResult> UnBindCardAsync(string userName, string password, string bindingId, string? phone = null, string? externalBindingId = null, string? externalBindingSystem = null, string? fingerprint = null, string? language = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (userName == null)
                throw new System.ArgumentNullException("userName");

            if (password == null)
                throw new System.ArgumentNullException("password");

            if (bindingId == null)
                throw new System.ArgumentNullException("bindingId");

            var client_ = new System.Net.Http.HttpClient();
            var disposeClient_ = true;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "*/*");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "rest/unBindCard.do"
                    urlBuilder_.Append("rest/unBindCard.do");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("userName")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(userName, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Append(System.Uri.EscapeDataString("password")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(password, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Append(System.Uri.EscapeDataString("bindingId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(bindingId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    if (phone != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("phone")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(phone, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (externalBindingId != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("externalBindingId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(externalBindingId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (externalBindingSystem != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("externalBindingSystem")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(externalBindingSystem, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (fingerprint != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("fingerprint")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(fingerprint, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (language != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("language")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(language, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<OrderResult>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AlfabankException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 429)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AlfabankException("Too Many Requests", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AlfabankException("Internal Server Error", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 502)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AlfabankException("Bad Gateway", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AlfabankException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Верификация карты.
        /// </summary>
        /// <remarks>
        /// Используется для совершения верификации карты.
        /// </remarks>
        /// <param name="pan">Номер карты. &lt;br&gt;Тип: N12...19</param>
        /// <param name="cvc">CVC код. &lt;br&gt;Тип: N..3</param>
        /// <param name="expiry">Дата (год и месяц) окончания срока действия связки в формате YYYYMM. &lt;br&gt;Тип: N6</param>
        /// <param name="userName">Логин магазина, полученный при подключении. Если вместо аутентификации по логину и паролю используется открытый токен (параметр token), параметр userName передавать не нужно. &lt;br&gt;Тип: AN..30</param>
        /// <param name="password">Пароль магазина, полученный при подключении. Если для аутентификации при регистрации вместо логина и пароля используется открытый токен (параметр token), параметр password передавать не нужно. &lt;br&gt;Тип: AN..30</param>
        /// <param name="token">Открытый ключ, который можно использовать для регистрации заказа. Если для аутентификации при регистрации заказа используются логин и пароль, параметр token передавать не нужно. &lt;br&gt;Тип: AN..30</param>
        /// <param name="amount">Сумма списания в валюте заказа. Максимальное значение для проверки карты 100. &lt;br&gt;Тип: N..3</param>
        /// <param name="currency">Код валюты платежа ISO 4217. Если не указан, считается равным коду валюты по умолчанию. &lt;br&gt;Тип: N3</param>
        /// <param name="cardHolderName">Имя держателя карты. Указан только после оплаты заказа.</param>
        /// <param name="backUrl">Адрес, на который требуется перенаправить пользователя в случае успешной оплаты. &lt;br&gt;Должен быть указан полностью, включая используемый протокол (например, https://test.ru вместо test.ru). &lt;br&gt;В противном случае пользователь будет перенаправлен по адресу следующего вида: http://&lt;адрес_платёжного_шлюза&gt;/&lt;адрес_продавца&gt;. &lt;br&gt;Тип: AN..512</param>
        /// <param name="failUrl">Адрес, на который требуется перенаправить пользователя в случае неуспешной оплаты. &lt;br&gt;Должен быть указан полностью, включая используемый протокол (например, https://test.ru вместо test.ru). &lt;br&gt;В противном случае пользователь будет перенаправлен по адресу следующего вида: http://&lt;адрес_платёжного_шлюза&gt;/&lt;адрес_продавца&gt;. &lt;br&gt;Тип: AN..512</param>
        /// <param name="description">Описание заказа в свободной форме. &lt;br&gt;Тип: ANS..598</param>
        /// <param name="email">Адрес электронной почты плательщика. &lt;br&gt;Тип: ANS..40</param>
        /// <param name="language">Язык в кодировке ISO 639-1. Если не указан, будет использован язык, указанный в настройках магазина как язык по умолчанию. &lt;br&gt;Тип: A2</param>
        /// <param name="dynamicCallbackUrl">Адрес для callback вызовов (необходима дополнительная настройка мерчанта).</param>
        /// <param name="threeDSServerTransId">Параметр указывающий идентификатор заказа в рамках 3DS 2.0 операции.</param>
        /// <param name="threeDSVer2FinishUrl">Адрес, на который требуется перенаправить пользователя перед finish3dsVer2.do в рамках 3DS 2.0 операции.</param>
        /// <param name="threeDSSDK">Признак (true/false) используется ли SDK. По умолчанию false.</param>
        /// <param name="threeDSSDKEncData">Зашифрованные данные об устройстве с 3DS2 SDK.</param>
        /// <param name="threeDSSDKReferenceNumber">SDK Reference Number (если используется SDK).</param>
        /// <param name="threeDSSDKEphemPubKey">Ключ для общения 3DS2 SDK с ACS.</param>
        /// <param name="threeDSSDKAppId">Идентификатор 3DS2 SDK.</param>
        /// <param name="threeDSSDKTransId">Идентификатор транзакции внутри 3DS2 SDK.</param>
        /// <param name="threeDSMethodNotificationUrl">Адрес для отправки уведомления о прохождении проверки 3D Secure.</param>
        /// <param name="threeDSVer2MdOrder">Номер заказа, который был зарегистрирован в первой части запроса в рамках 3DS 2.0 операции.</param>
        /// <param name="billingPayerData">Регистрационный адрес клиента, заданный при регистрации карты в Банке Эмитенте.</param>
        /// <param name="shippingPayerData">Данные доставки клиента.</param>
        /// <param name="preOrderPayerData">Данные предзаказа.</param>
        /// <param name="orderPayerData">Данные заказа.</param>
        /// <param name="billingAndShippingAddressMatchIndicator">Индикатор совпадения адреса держателя карты для выставления счета и адреса доставки.</param>
        /// <param name="externalScaExemptionIndicator">SCA Examption Indicator.</param>
        /// <returns>OK</returns>
        /// <exception cref="AlfabankException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<VerifyCardResponse> VerifyCardAsync(string pan, string cvc, string expiry, string? userName = null, string? password = null, string? token = null, string? amount = null, string? currency = null, string? cardHolderName = null, string? backUrl = null, string? failUrl = null, string? description = null, string? email = null, string? language = null, string? dynamicCallbackUrl = null, string? threeDSServerTransId = null, string? threeDSVer2FinishUrl = null, string? threeDSSDK = null, string? threeDSSDKEncData = null, string? threeDSSDKReferenceNumber = null, string? threeDSSDKEphemPubKey = null, string? threeDSSDKAppId = null, string? threeDSSDKTransId = null, string? threeDSMethodNotificationUrl = null, string? threeDSVer2MdOrder = null, string? billingPayerData = null, string? shippingPayerData = null, string? preOrderPayerData = null, string? orderPayerData = null, string? billingAndShippingAddressMatchIndicator = null, string? externalScaExemptionIndicator = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (pan == null)
                throw new System.ArgumentNullException("pan");

            if (cvc == null)
                throw new System.ArgumentNullException("cvc");

            if (expiry == null)
                throw new System.ArgumentNullException("expiry");

            var client_ = new System.Net.Http.HttpClient();
            var disposeClient_ = true;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "*/*");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "rest/verifyCard.do"
                    urlBuilder_.Append("rest/verifyCard.do");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("pan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Append(System.Uri.EscapeDataString("cvc")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(cvc, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Append(System.Uri.EscapeDataString("expiry")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(expiry, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    if (userName != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("userName")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(userName, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (password != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("password")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(password, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (token != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("token")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(token, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (amount != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("amount")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(amount, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (currency != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("currency")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(currency, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (cardHolderName != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("cardHolderName")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(cardHolderName, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (backUrl != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("backUrl")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(backUrl, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (failUrl != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("failUrl")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(failUrl, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (description != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("description")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(description, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (email != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("email")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(email, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (language != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("language")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(language, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (dynamicCallbackUrl != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("dynamicCallbackUrl")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(dynamicCallbackUrl, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (threeDSServerTransId != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("threeDSServerTransId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(threeDSServerTransId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (threeDSVer2FinishUrl != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("threeDSVer2FinishUrl")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(threeDSVer2FinishUrl, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (threeDSSDK != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("threeDSSDK")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(threeDSSDK, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (threeDSSDKEncData != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("threeDSSDKEncData")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(threeDSSDKEncData, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (threeDSSDKReferenceNumber != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("threeDSSDKReferenceNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(threeDSSDKReferenceNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (threeDSSDKEphemPubKey != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("threeDSSDKEphemPubKey")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(threeDSSDKEphemPubKey, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (threeDSSDKAppId != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("threeDSSDKAppId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(threeDSSDKAppId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (threeDSSDKTransId != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("threeDSSDKTransId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(threeDSSDKTransId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (threeDSMethodNotificationUrl != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("threeDSMethodNotificationUrl")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(threeDSMethodNotificationUrl, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (threeDSVer2MdOrder != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("threeDSVer2MdOrder")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(threeDSVer2MdOrder, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (billingPayerData != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("billingPayerData")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(billingPayerData, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (shippingPayerData != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("shippingPayerData")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(shippingPayerData, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (preOrderPayerData != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("preOrderPayerData")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(preOrderPayerData, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (orderPayerData != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("orderPayerData")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(orderPayerData, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (billingAndShippingAddressMatchIndicator != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("billingAndShippingAddressMatchIndicator")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(billingAndShippingAddressMatchIndicator, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (externalScaExemptionIndicator != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("externalScaExemptionIndicator")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(externalScaExemptionIndicator, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<VerifyCardResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AlfabankException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AlfabankException("Bad Request", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AlfabankException("Too Many Requests", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AlfabankException("Internal Server Error", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 502)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AlfabankException("Bad Gateway", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AlfabankException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Запрос проверки вовлечённости карты в 3DS.
        /// </summary>
        /// <remarks>
        /// Для проверки вовлечённости карты в 3DS используется запрос verifyEnrollment.do.
        /// </remarks>
        /// <param name="userName">Логин пользователя (API). &lt;br&gt;Тип: AN..30</param>
        /// <param name="password">Пароль пользователя (API). &lt;br&gt;Тип: AN..30</param>
        /// <param name="pan">Номер карты. &lt;br&gt;Тип: N12...19</param>
        /// <param name="language">Язык в кодировке ISO 639-1. Если не указан, будет использован язык, указанный в настройках магазина как язык по умолчанию (default language). &lt;br&gt;Тип: A2</param>
        /// <returns>OK</returns>
        /// <exception cref="AlfabankException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<VerifyEnrollmentResult> VerifyEnrollmentAsync(string userName, string password, string pan, string? language = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (userName == null)
                throw new System.ArgumentNullException("userName");

            if (password == null)
                throw new System.ArgumentNullException("password");

            if (pan == null)
                throw new System.ArgumentNullException("pan");

            var client_ = new System.Net.Http.HttpClient();
            var disposeClient_ = true;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "*/*");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "rest/verifyEnrollment.do"
                    urlBuilder_.Append("rest/verifyEnrollment.do");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("userName")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(userName, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Append(System.Uri.EscapeDataString("password")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(password, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Append(System.Uri.EscapeDataString("pan")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pan, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    if (language != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("language")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(language, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<VerifyEnrollmentResult>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AlfabankException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 429)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AlfabankException("Too Many Requests", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AlfabankException("Internal Server Error", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 502)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AlfabankException("Bad Gateway", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AlfabankException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Запрос на оплату через Samsung Pay.
        /// </summary>
        /// <remarks>
        /// Для проведения платежа через Samsung Pay используется запрос payment.do. &lt;br&gt;&lt;br&gt;Указывается в виде списка JSON-параметров типа: "имя1": "значение1", "имя2": "значение2". &lt;br&gt;&lt;br&gt;Обязательные параметры: &lt;br&gt;&lt;br&gt;&lt;b&gt;merchant&lt;/b&gt; - Имя входа продавца в системе платёжного шлюза. &lt;br&gt;Тип: AN..30 &lt;br&gt;&lt;br&gt;&lt;b&gt;orderNumber&lt;/b&gt; - Уникальный номер заказа на стороне продавца. &lt;br&gt;Тип: AN..32 &lt;br&gt;&lt;br&gt;&lt;b&gt;paymentToken&lt;/b&gt; - Токен, полученный от Google Pay и закодированный в Base64. &lt;br&gt;Тип: AN..8192 &lt;br&gt;&lt;br&gt;&lt;b&gt;ip&lt;/b&gt; - IP-адрес плательщика. &lt;br&gt;Тип: ANS..39 &lt;br&gt;&lt;br&gt;&lt;br&gt;Дополнительные параметры: &lt;br&gt;&lt;br&gt;&lt;b&gt;description&lt;/b&gt; - Описание заказа. &lt;br&gt;Тип: AN..512 &lt;br&gt;&lt;br&gt;&lt;b&gt;language&lt;/b&gt; - Язык в кодировке ISO 639-1. Если не указан, будет использован язык, указанный в настройках магазина как язык по умолчанию. &lt;br&gt;Тип: A2 &lt;br&gt;&lt;br&gt;&lt;b&gt;additionalParameters&lt;/b&gt; - Дополнительные параметры заказа, которые сохраняются для просмотра из личного кабинета продавца. Их следует указывать в следующем формате: "имя1": "значение1", "имя2": "значение2". Каждую новую пару имени и значения параметра следует отделять запятой. &lt;br&gt;&lt;br&gt;&lt;b&gt;clientId&lt;/b&gt; - Номер клиента, для которого следует создать связку для проведения регулярных платежей. Следует указывать, только если проводится технический платёж для последующих регулярных платежей. &lt;br&gt;Тип: ANS..255 &lt;br&gt;&lt;br&gt;&lt;b&gt;preAuth&lt;/b&gt; - Параметр, определяющий необходимость предварительной авторизации (блокирования средств на счету клиента до их списания). &lt;br&gt;&lt;br&gt;Доступны следующие значения: &lt;br&gt;&lt;br&gt;true (истина) - параметр включён, оплата происходит с предавторизацией (происходит блокирование средств клиента до списания); &lt;br&gt;false (ложь) - параметр выключен (списание происходит сразу). &lt;br&gt;&lt;br&gt;Если параметр не указан в запросе, списание происходит сразу. &lt;br&gt;&lt;br&gt;&lt;b&gt;currencyCode&lt;/b&gt; - Цифровой код валюты платежа ISO 4217. Если не указан, считается равным 643 (российский рубль). &lt;br&gt;Тип: N3
        /// </remarks>
        /// <param name="request">request</param>
        /// <returns>OK</returns>
        /// <exception cref="AlfabankException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SamsungPayPaymentResponse> SamsungPaymentAsync(SamsungPayPaymentRequest request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (request == null)
                throw new System.ArgumentNullException("request");

            var client_ = new System.Net.Http.HttpClient();
            var disposeClient_ = true;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(request, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "samsung/payment.do"
                    urlBuilder_.Append("samsung/payment.do");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<SamsungPayPaymentResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AlfabankException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 429)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AlfabankException("Too Many Requests", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AlfabankException("Internal Server Error", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 502)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AlfabankException("Bad Gateway", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AlfabankException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Запрос на оплату через Samsung Pay с расшифрованным токеном.
        /// </summary>
        /// <remarks>
        /// Для проведения платежа через Samsung Pay используется запрос payment.do. &lt;br&gt;&lt;br&gt;Указывается в виде списка JSON-параметров типа: "имя1": "значение1", "имя2": "значение2". &lt;br&gt;&lt;br&gt;Обязательные параметры: &lt;br&gt;&lt;br&gt;&lt;b&gt;merchant&lt;/b&gt; - Имя входа продавца в системе платёжного шлюза. &lt;br&gt;Тип: AN..30 &lt;br&gt;&lt;br&gt;&lt;b&gt;orderNumber&lt;/b&gt; - Уникальный номер заказа на стороне продавца. &lt;br&gt;Тип: AN..32 &lt;br&gt;&lt;br&gt;&lt;b&gt;paymentToken&lt;/b&gt; - Токен, полученный от Google Pay и закодированный в Base64. &lt;br&gt;Тип: AN..8192 &lt;br&gt;&lt;br&gt;&lt;b&gt;ip&lt;/b&gt; - IP-адрес плательщика. &lt;br&gt;Тип: ANS..39 &lt;br&gt;&lt;br&gt;&lt;br&gt;Дополнительные параметры: &lt;br&gt;&lt;br&gt;&lt;b&gt;description&lt;/b&gt; - Описание заказа. &lt;br&gt;Тип: AN..512 &lt;br&gt;&lt;br&gt;&lt;b&gt;language&lt;/b&gt; - Язык в кодировке ISO 639-1. Если не указан, будет использован язык, указанный в настройках магазина как язык по умолчанию. &lt;br&gt;Тип: A2 &lt;br&gt;&lt;br&gt;&lt;b&gt;additionalParameters&lt;/b&gt; - Дополнительные параметры заказа, которые сохраняются для просмотра из личного кабинета продавца. Их следует указывать в следующем формате: "имя1": "значение1", "имя2": "значение2". Каждую новую пару имени и значения параметра следует отделять запятой. &lt;br&gt;&lt;br&gt;&lt;b&gt;clientId&lt;/b&gt; - Номер клиента, для которого следует создать связку для проведения регулярных платежей. Следует указывать, только если проводится технический платёж для последующих регулярных платежей. &lt;br&gt;Тип: ANS..255 &lt;br&gt;&lt;br&gt;&lt;b&gt;preAuth&lt;/b&gt; - Параметр, определяющий необходимость предварительной авторизации (блокирования средств на счету клиента до их списания). &lt;br&gt;&lt;br&gt;Доступны следующие значения: &lt;br&gt;&lt;br&gt;true (истина) - параметр включён, оплата происходит с предавторизацией (происходит блокирование средств клиента до списания); &lt;br&gt;false (ложь) - параметр выключен (списание происходит сразу). &lt;br&gt;&lt;br&gt;Если параметр не указан в запросе, списание происходит сразу. &lt;br&gt;&lt;br&gt;&lt;b&gt;currencyCode&lt;/b&gt; - Цифровой код валюты платежа ISO 4217. Если не указан, считается равным 643 (российский рубль). &lt;br&gt;Тип: N3
        /// </remarks>
        /// <param name="request">request</param>
        /// <returns>OK</returns>
        /// <exception cref="AlfabankException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SamsungPayPaymentResponse> SamsungPaymentDirectAsync(SamsungPayDirectPaymentRequest request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (request == null)
                throw new System.ArgumentNullException("request");

            var client_ = new System.Net.Http.HttpClient();
            var disposeClient_ = true;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(request, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "samsung/paymentDirect.do"
                    urlBuilder_.Append("samsung/paymentDirect.do");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<SamsungPayPaymentResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AlfabankException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 429)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AlfabankException("Too Many Requests", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AlfabankException("Internal Server Error", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 502)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AlfabankException("Bad Gateway", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AlfabankException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// YandexPay без предварительной регистрации заказа
        /// </summary>
        /// <remarks>
        /// Перевести API для Мерчантов со своей платежной страницей на формат без предварительного создания заказа.
        /// </remarks>
        /// <param name="request">request</param>
        /// <returns>OK</returns>
        /// <exception cref="AlfabankException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<YandexPayResponse> YandexInstantPaymentAsync(YandexPayInstantPaymentRequestRest request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (request == null)
                throw new System.ArgumentNullException("request");

            var client_ = new System.Net.Http.HttpClient();
            var disposeClient_ = true;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(request, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "yandex/instantPayment.do"
                    urlBuilder_.Append("yandex/instantPayment.do");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<YandexPayResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AlfabankException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 429)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AlfabankException("Too Many Requests", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AlfabankException("Internal Server Error", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 502)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AlfabankException("Bad Gateway", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AlfabankException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Запрос на оплату через Yandex Pay.
        /// </summary>
        /// <remarks>
        /// Для проведения платежа через Yandex Pay используется запрос payment.do.
        /// </remarks>
        /// <param name="yandexPayRequestRest">yandexPayRequestRest</param>
        /// <returns>OK</returns>
        /// <exception cref="AlfabankException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<YandexPayResponse> YandexPaymentAsync(YandexPayPaymentRequestRest yandexPayRequestRest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (yandexPayRequestRest == null)
                throw new System.ArgumentNullException("yandexPayRequestRest");

            var client_ = new System.Net.Http.HttpClient();
            var disposeClient_ = true;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(yandexPayRequestRest, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "yandex/payment.do"
                    urlBuilder_.Append("yandex/payment.do");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<YandexPayResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AlfabankException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 429)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AlfabankException("Too Many Requests", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AlfabankException("Internal Server Error", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 502)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AlfabankException("Bad Gateway", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AlfabankException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Запрос на оплату через Yandex Pay с расшифрованным токеном.
        /// </summary>
        /// <remarks>
        /// Для проведения платежа через Yandex Pay с расшифрованным токеном.
        /// </remarks>
        /// <param name="request">request</param>
        /// <returns>OK</returns>
        /// <exception cref="AlfabankException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<YandexPayResponse> YandexPaymentDirectAsync(YandexPayDirectRequestRest request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (request == null)
                throw new System.ArgumentNullException("request");

            var client_ = new System.Net.Http.HttpClient();
            var disposeClient_ = true;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(request, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "yandex/paymentDirect.do"
                    urlBuilder_.Append("yandex/paymentDirect.do");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<YandexPayResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new AlfabankException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 429)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AlfabankException("Too Many Requests", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AlfabankException("Internal Server Error", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 502)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AlfabankException("Bad Gateway", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new AlfabankException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T)!, string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody!, responseText);
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new AlfabankException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    using (var streamReader = new System.IO.StreamReader(responseStream))
                    using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
                    {
                        var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
                        var typedBody = serializer.Deserialize<T>(jsonTextReader);
                        return new ObjectResponseResult<T>(typedBody!, string.Empty);
                    }
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new AlfabankException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object? value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value is string[])
            {
                return string.Join(",", (string[])value);
            }
            else if (value.GetType().IsArray)
            {
                var valueArray = (System.Array)value;
                var valueTextArray = new string[valueArray.Length];
                for (var i = 0; i < valueArray.Length; i++)
                {
                    valueTextArray[i] = ConvertToString(valueArray.GetValue(i), cultureInfo);
                }
                return string.Join(",", valueTextArray);
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    /// <summary>
    /// Элемент блока additionalOfdParams.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AdditionalOfdParam
    {
        /// <summary>
        /// Название параметра.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Name { get; set; } = default!;

        /// <summary>
        /// Значение параметра.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Value { get; set; } = default!;

    }

    /// <summary>
    /// Блок для передачи данных об агенте. Блок может быть удалён в будущем.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Agent
    {
        /// <summary>
        /// Тип агента.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("agentType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public AgentType? AgentType { get; set; } = default!;

        /// <summary>
        /// Адрес оператора перевода.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("mtOperatorAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? MtOperatorAddress { get; set; } = default!;

        /// <summary>
        /// ИНН оператора перевода.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("mtOperatorInn", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? MtOperatorInn { get; set; } = default!;

        /// <summary>
        /// Наименование оператора перевода.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("mtOperatorName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? MtOperatorName { get; set; } = default!;

        /// <summary>
        /// Массив телефонов оператора перевода в формате +N.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("mtOperatorPhones", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? MtOperatorPhones { get; set; } = default!;

        /// <summary>
        /// Наименование операции платёжного агента.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("payingOperation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? PayingOperation { get; set; } = default!;

        /// <summary>
        /// Массив телефонов платёжного агента в формате +N.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("payingPhones", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? PayingPhones { get; set; } = default!;

        /// <summary>
        /// Массив телефонов оператора по приёму платежей в формате +N.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("paymentsOperatorPhones", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? PaymentsOperatorPhones { get; set; } = default!;

    }

    /// <summary>
    /// Дополнительный тэг с атрибутами описания агентской комиссии за продажу товара.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AgentInterest
    {
        /// <summary>
        /// Тип агентской комиссии за продажу товара.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("interestType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? InterestType { get; set; } = default!;

        /// <summary>
        /// Значение агентской комиссии за продажу товара.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("interestValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? InterestValue { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AmountInfo
    {
        [Newtonsoft.Json.JsonProperty("formattedValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? FormattedValue { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? Value { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiError
    {
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Code { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Description { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Message { get; set; } = default!;

    }

    /// <summary>
    /// Запрос ApplePayPaymentRequest.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApplePayPaymentRequest
    {
        [Newtonsoft.Json.JsonProperty("additionalOfdParams", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<AdditionalOfdParam>? AdditionalOfdParams { get; set; } = default!;

        /// <summary>
        /// Тэг с атрибутами для передачи дополнительных параметров мерчанта. &lt;br&gt;Поля дополнительной информации для последующего хранения. Для передачи N параметров, в запросе должно находиться N тэгов params, где атрибут name содержит название, а атрибут value содержит значение.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("additionalParameters", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, string>? AdditionalParameters { get; set; } = default!;

        /// <summary>
        /// Дата автоматической отмены.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("autoReverseDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? AutoReverseDate { get; set; } = default!;

        /// <summary>
        /// Дата автоматического завершения.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("autocompletionDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? AutocompletionDate { get; set; } = default!;

        /// <summary>
        /// Индикатор совпадения адреса держателя карты для выставления счета и адреса доставки
        /// </summary>
        [Newtonsoft.Json.JsonProperty("billingAndShippingAddressMatchIndicator", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? BillingAndShippingAddressMatchIndicator { get; set; } = default!;

        /// <summary>
        /// Региональные данные клиента для выставления счета
        /// </summary>
        [Newtonsoft.Json.JsonProperty("billingPayerData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BillingPayerData? BillingPayerData { get; set; } = default!;

        /// <summary>
        /// Номер клиента, для которого следует создать связку для проведения регулярных платежей. Следует указывать, только если проводится технический платёж для последующих регулярных платежей.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("clientId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ClientId { get; set; } = default!;

        /// <summary>
        /// Описание заказа.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Description { get; set; } = default!;

        /// <summary>
        /// Адрес для callback вызовов (необходима дополнительная настройка мерчанта).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("dynamicCallbackUrl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? DynamicCallbackUrl { get; set; } = default!;

        /// <summary>
        /// Электронная почта покупателя. Можно указать несколько адресов электронной почты через запятую и без пробелов - в этом случае чек будет отправлен на все указанные адреса. &lt;br&gt;Обязательно следует передать один из двух параметров: email или phone.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Email { get; set; } = default!;

        /// <summary>
        /// Значение PSD Exemption.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("externalScaExemptionIndicator", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ExternalScaExemptionIndicator { get; set; } = default!;

        /// <summary>
        /// Контейнер для параметра feature.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("features", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public System.Collections.Generic.ICollection<features>? Features { get; set; } = default!;

        /// <summary>
        /// Размер комиссии мерчанта в минимальных единицах валюты.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("feeInput", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? FeeInput { get; set; } = default!;

        /// <summary>
        /// IP-адрес пользователя, который оплачивал заказ. &lt;br&gt;IPv6 поддерживается во всех запросах.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ip", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Ip { get; set; } = default!;

        /// <summary>
        /// Язык в кодировке ISO 639-1. Если не указан, будет использован язык, указанный в настройках магазина как язык по умолчанию.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("language", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Language { get; set; } = default!;

        /// <summary>
        /// Имя входа продавца в системе платёжного шлюза.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("merchant", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Merchant { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("orderBundle", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OrderBundle? OrderBundle { get; set; } = default!;

        /// <summary>
        /// Уникальный номер заказа на стороне продавца.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("orderNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? OrderNumber { get; set; } = default!;

        /// <summary>
        /// Данные заказа
        /// </summary>
        [Newtonsoft.Json.JsonProperty("orderPayerData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OrderPayerData? OrderPayerData { get; set; } = default!;

        /// <summary>
        /// Параметр paymentToken должен содержать закодированное в Base64 значение свойства paymentData, полученного из объекта PKPaymentToken Object от системы Apple Pay (подробнее см. документацию Apple Pay).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("paymentToken", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? PaymentToken { get; set; } = default!;

        /// <summary>
        /// Номер телефона покупателя. Если в телефон включён код страны, номер должен начинаться со знака плюс («+»). Если телефон передаётся без знака плюс («+»), то код страны указывать не следует. &lt;br&gt;Обязательно следует передать один из двух параметров: email или phone.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("phone", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Phone { get; set; } = default!;

        /// <summary>
        /// Адрес для доставки.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("postAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? PostAddress { get; set; } = default!;

        /// <summary>
        /// Параметр, определяющий необходимость предварительной авторизации (блокирования средств на счету клиента до их списания). Доступны следующие значения: &lt;br&gt;true (истина) - параметр включён, оплата происходит с предавторизацией (происходит блокирование средств клиента до списания); &lt;br&gt;false (ложь) - параметр выключен (списание происходит сразу).  &lt;br&gt;Если параметр не указан в запросе, списание происходит сразу.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("preAuth", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? PreAuth { get; set; } = default!;

        /// <summary>
        /// Данные предзаказа
        /// </summary>
        [Newtonsoft.Json.JsonProperty("preOrderPayerData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PreOrderPayerData? PreOrderPayerData { get; set; } = default!;

        /// <summary>
        /// Не используется. Необходим для обратной совместимости.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("recurrent", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Recurrent { get; set; } = default!;

        /// <summary>
        /// Не используется. Необходим для обратной совместимости.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("recurrentInitialize", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? RecurrentInitialize { get; set; } = default!;

        /// <summary>
        /// Данные доставки клиента
        /// </summary>
        [Newtonsoft.Json.JsonProperty("shippingPayerData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ShippingPayerData? ShippingPayerData { get; set; } = default!;

        /// <summary>
        /// Система налогообложения, доступны следующие значения: &lt;br&gt;0 - общая; &lt;br&gt;1 - упрощённая, доход; &lt;br&gt;2 - упрощённая, доход минус расход; &lt;br&gt;3 - единый налог на вменённый доход; &lt;br&gt;4 - единый сельскохозяйственный налог; &lt;br&gt;5 - патентная система налогообложения.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("taxSystem", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TaxSystem { get; set; } = default!;

        /// <summary>
        /// Transaction Initializing Indicator.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("tii", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Tii { get; set; } = default!;

    }

    /// <summary>
    /// Блок ApplePayPaymentResponse.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApplePayPaymentResponse
    {
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Data? Data { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("error", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Error? Error { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("orderStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GetOrderStatusExtendedResponse? OrderStatus { get; set; } = default!;

        /// <summary>
        /// Указывает на успешность проведения платежа. Доступны следующие значения: &lt;br&gt;&lt;br&gt;true (истина) - платёж прошёл успешно; &lt;br&gt;false (ложь) - платёж не прошёл.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("success", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Success { get; set; } = default!;

    }

    /// <summary>
    /// Тэг с атрибутами, содержащими данные о состоянии средств, использованных для начисления баллов при оплате заказа.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AwardBonus
    {
        /// <summary>
        /// Первоначальная сумма, на которую было произведено начисление бонусных баллов.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("approvedAmountAward", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ApprovedAmountAward { get; set; } = default!;

        /// <summary>
        /// Подтверждённая сумма заказа на которую произведено начисление бонусных баллов.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("depositedAmountAward", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? DepositedAmountAward { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("paymentOperation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public AwardBonusPaymentOperation? PaymentOperation { get; set; } = default!;

        /// <summary>
        /// Идентификатор последней проведённой операции с суммой для начисления баллов в процессинге лояльности.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("pcId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? PcId { get; set; } = default!;

        /// <summary>
        /// Сумма возврата заказа на которую произведено начисление бонусных баллов.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("refundedAmountAward", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? RefundedAmountAward { get; set; } = default!;

        /// <summary>
        /// Признак успешности операции (true / false).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("successful", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Successful { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class B2bPayloadApiData
    {
        /// <summary>
        /// Фактический адрес ТСП
        /// </summary>
        [Newtonsoft.Json.JsonProperty("address", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Address { get; set; } = default!;

        /// <summary>
        /// Идентификатор Агента ТСП
        /// </summary>
        [Newtonsoft.Json.JsonProperty("agentId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? AgentId { get; set; } = default!;

        /// <summary>
        /// Сумма Операции СБП в копейках. Валюта Операции СБП-рубли РФ
        /// </summary>
        [Newtonsoft.Json.JsonProperty("amount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? Amount { get; set; } = default!;

        /// <summary>
        /// Торговое наименование ТСП
        /// </summary>
        [Newtonsoft.Json.JsonProperty("brandName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? BrandName { get; set; } = default!;

        /// <summary>
        /// Индикатор Подозрительной Операции
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fraudScore", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? FraudScore { get; set; } = default!;

        /// <summary>
        /// ИНН ЮЛ или ИП
        /// </summary>
        [Newtonsoft.Json.JsonProperty("inn", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Inn { get; set; } = default!;

        /// <summary>
        /// Идентификатор ЮЛ или ИП
        /// </summary>
        [Newtonsoft.Json.JsonProperty("legalId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? LegalId { get; set; } = default!;

        /// <summary>
        /// Сокращенное наименование ЮЛ или ИП
        /// </summary>
        [Newtonsoft.Json.JsonProperty("legalName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? LegalName { get; set; } = default!;

        /// <summary>
        /// Вид деятельности ТСП
        /// </summary>
        [Newtonsoft.Json.JsonProperty("mcc", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Mcc { get; set; } = default!;

        /// <summary>
        /// Идентификатор Банка Получателя
        /// </summary>
        [Newtonsoft.Json.JsonProperty("memberId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? MemberId { get; set; } = default!;

        /// <summary>
        /// Идентификатор ТСП
        /// </summary>
        [Newtonsoft.Json.JsonProperty("merchantId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? MerchantId { get; set; } = default!;

        /// <summary>
        /// Назначение платежа
        /// </summary>
        [Newtonsoft.Json.JsonProperty("paymentPurpose", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? PaymentPurpose { get; set; } = default!;

        /// <summary>
        /// Идентификатор Функциональной ссылки СБП B2B
        /// </summary>
        [Newtonsoft.Json.JsonProperty("qrcId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? QrcId { get; set; } = default!;

        /// <summary>
        /// Тип Функциональной ссылки СБП для B2B ("01" -многоразовая ссылка, "02" -одноразовая ссылка)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("qrcType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public B2bPayloadApiDataQrcType? QrcType { get; set; } = default!;

        /// <summary>
        /// Счет Получателя платежа
        /// </summary>
        [Newtonsoft.Json.JsonProperty("receiverAccount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ReceiverAccount { get; set; } = default!;

        /// <summary>
        /// Ссылка для авто возврата Плательщика на сайт ТСП
        /// </summary>
        [Newtonsoft.Json.JsonProperty("redirectUrl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? RedirectUrl { get; set; } = default!;

        /// <summary>
        /// Информация о взимании НДС (true –облагается НДС, false –не облагается НДС)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("takeTax", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? TakeTax { get; set; } = default!;

        /// <summary>
        /// Сумма НДС в копейках. Валюта НДС-рубли РФ
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalTaxAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? TotalTaxAmount { get; set; } = default!;

        /// <summary>
        /// Уникальный Идентификатор Платежа Получателя
        /// </summary>
        [Newtonsoft.Json.JsonProperty("uip", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Uip { get; set; } = default!;

    }

    /// <summary>
    /// Блок информации о банке.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BankInfo
    {
        /// <summary>
        /// Код страны банка-эмитента.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("bankCountryCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? BankCountryCode { get; set; } = default!;

        /// <summary>
        /// Наименование страны банка-эмитента на языке, переданном в параметре language в запросе, или на языке пользователя, вызвавшего метод, если язык в запросе не указан.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("bankCountryName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? BankCountryName { get; set; } = default!;

        /// <summary>
        /// Наименование банка-эмитента.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("bankName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? BankName { get; set; } = default!;

    }

    /// <summary>
    /// Блок c регистрационными данными клиента (адрес, почтовый индекс), необходимыми для прохождения проверки адреса в рамках сервисов AVS/AVV.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BillingPayerData
    {
        /// <summary>
        /// Адрес, зарегистрированный по конкретной карте у Банка Эмитента. Строка 1. &lt;br&gt;Обязательно, если у Мерчанта активирована пермиссия "Разрешено использование AVS/AVV". &lt;br&gt;Тип: AN...50
        /// </summary>
        [Newtonsoft.Json.JsonProperty("billingAddressLine1", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? BillingAddressLine1 { get; set; } = default!;

        /// <summary>
        /// Адрес, зарегистрированный по конкретной карте у Банка Эмитента. Строка 2. &lt;br&gt;Тип: AN...50
        /// </summary>
        [Newtonsoft.Json.JsonProperty("billingAddressLine2", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? BillingAddressLine2 { get; set; } = default!;

        /// <summary>
        /// Адрес, зарегистрированный по конкретной карте у Банка Эмитента. Строка 3. &lt;br&gt;Тип: AN...50
        /// </summary>
        [Newtonsoft.Json.JsonProperty("billingAddressLine3", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? BillingAddressLine3 { get; set; } = default!;

        /// <summary>
        /// Город, зарегистрированный по конкретной карте у Банка Эмитента. &lt;br&gt;Тип: AN...50
        /// </summary>
        [Newtonsoft.Json.JsonProperty("billingCity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? BillingCity { get; set; } = default!;

        /// <summary>
        /// Страна, зарегистрированная по конкретной карте у Банка Эмитента (ISO 3166-1, numeric). &lt;br&gt;Тип: AN...50
        /// </summary>
        [Newtonsoft.Json.JsonProperty("billingCountry", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? BillingCountry { get; set; } = default!;

        /// <summary>
        /// Почтовый индекс, зарегистрированный по конкретной карте у Банка Эмитента. &lt;br&gt;Обязательно, если у Мерчанта активирована пермиссия "Разрешено использование AVS/AVV". &lt;br&gt;Тип: AN...9
        /// </summary>
        [Newtonsoft.Json.JsonProperty("billingPostalCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? BillingPostalCode { get; set; } = default!;

        /// <summary>
        /// Штат, зарегистрированный по конкретной карте у Банка Эмитента (ISO 3166-2). &lt;br&gt;Тип: AN...50
        /// </summary>
        [Newtonsoft.Json.JsonProperty("billingState", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? BillingState { get; set; } = default!;

    }

    /// <summary>
    /// Блок с информацией о платёжной связке.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Binding
    {
        /// <summary>
        /// Тип связки по назначению(COMMON, INSTALLMENT, RECURRENT).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("bindingCategory", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? BindingCategory { get; set; } = default!;

        /// <summary>
        /// Идентификатор связки созданной при оплате заказа или использованной для оплаты. Присутствует только если магазину разрешено создание связок.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("bindingId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? BindingId { get; set; } = default!;

        /// <summary>
        /// Способ, которым была создана связка (TDS, SSL, TDS_SSL, NO_PAYMENT, OTHER, CREATE_CREDIT_BINDING).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("bindingStrength", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? BindingStrength { get; set; } = default!;

        /// <summary>
        /// Номер (идентификатор) клиента в системе магазина, переданный при регистрации заказа. Присутствует только если магазину разрешено создание связок.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("clientId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ClientId { get; set; } = default!;

        /// <summary>
        /// Последние 4 цифры оригинального пана до токенизации.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("displayLabel", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? DisplayLabel { get; set; } = default!;

        /// <summary>
        /// Срок истечения действия карты в формате YYYYMM.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("expiryDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ExpiryDate { get; set; } = default!;

        /// <summary>
        /// Маскированный номер карты, которая использовалась для оплаты. Указан только после оплаты заказа.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("maskedPan", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? MaskedPan { get; set; } = default!;

        /// <summary>
        /// Наименование платёжной системы.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("paymentSystem", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? PaymentSystem { get; set; } = default!;

        /// <summary>
        /// Способ совершения платежа (платёж с вводом карточных данных, оплата по связке и т.п.).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("paymentWay", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? PaymentWay { get; set; } = default!;

        /// <summary>
        /// ${getBindings.res.param.tokenizedInd.description}
        /// </summary>
        [Newtonsoft.Json.JsonProperty("tokenizedInd", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? TokenizedInd { get; set; } = default!;

    }

    /// <summary>
    /// Данные о платёжной карте покупателя.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CardAuthInfo
    {
        /// <summary>
        /// Код авторизации платежа. Поле фиксированной длины (6 символов), может содержать цифры и латинские буквы. Указан только после оплаты заказа.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("approvalCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ApprovalCode { get; set; } = default!;

        /// <summary>
        /// Имя держателя карты. Указан только после оплаты заказа.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cardholderName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? CardholderName { get; set; } = default!;

        /// <summary>
        /// Дополнительные сведения о категории корпоративных карт. Эти сведения заполняются службой технической поддержки в консоли управления. Если такие сведения отсутствуют, возвращается пустое значение.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("corporateCard", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? CorporateCard { get; set; } = default!;

        /// <summary>
        /// Срок истечения действия карты в формате YYYYMM. Указан только после оплаты заказа.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("expiration", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Expiration { get; set; } = default!;

        /// <summary>
        /// Маскированный номер карты, которая использовалась для оплаты. Указан только после оплаты заказа.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("maskedPan", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? MaskedPan { get; set; } = default!;

        /// <summary>
        /// Наименование платёжной системы.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("paymentSystem", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? PaymentSystem { get; set; } = default!;

        /// <summary>
        /// Дополнительные сведения о корпоративных картах. Эти сведения заполняются службой технической поддержки в консоли управления. Если такие сведения отсутствуют, возвращается пустое значение.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("product", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Product { get; set; } = default!;

        /// <summary>
        /// Дополнительные сведения о категории корпоративных карт. Эти сведения заполняются службой технической поддержки в консоли управления. Если такие сведения отсутствуют, возвращается пустое значение.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("productCategory", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CardAuthInfoProductCategory? ProductCategory { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("secureAuthInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SecureAuthInfo? SecureAuthInfo { get; set; } = default!;

    }

    /// <summary>
    /// Блок информации о платёжной связке.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CardBindingInfo
    {
        /// <summary>
        /// Идентификатор связки созданной при оплате заказа или использованной для оплаты. Присутствует только если магазину разрешено создание связок.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("bindingId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? BindingId { get; set; } = default!;

        /// <summary>
        /// Номер (идентификатор) клиента в системе магазина, переданный при регистрации заказа. Присутствует только если магазину разрешено создание связок.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("clientId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ClientId { get; set; } = default!;

        /// <summary>
        /// Признак показывает создана ли связка во внешнем сервисе.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("externalCreated", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ExternalCreated { get; set; } = default!;

    }

    /// <summary>
    /// Массив блоков, описывающих товарные позиции в Корзине. Описание параметров блоков представлено ниже.
    /// <br/>
    /// <br/>Информация по каждой товарной позиции Корзины передаётся в отдельном блоке, входящем в состав items.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CartItems
    {
        /// <summary>
        /// Блок с атрибутами товарных позиции корзины товаров.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("items", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Item>? Items { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ClientBrowserInfo
    {
        [Newtonsoft.Json.JsonProperty("OS", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? OS { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("OSVersion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? OSVersion { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("browserAcceptHeader", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? BrowserAcceptHeader { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("browserIpAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? BrowserIpAddress { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("browserLanguage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? BrowserLanguage { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("browserTimeZone", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? BrowserTimeZone { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("browserTimeZoneOffset", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? BrowserTimeZoneOffset { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("colorDepth", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ColorDepth { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("fingerprint", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Fingerprint { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("isMobile", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsMobile { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("javaEnabled", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? JavaEnabled { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("javascriptEnabled", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? JavascriptEnabled { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("plugins", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Plugins { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("screenHeight", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ScreenHeight { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("screenPrint", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ScreenPrint { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("screenWidth", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ScreenWidth { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("userAgent", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? UserAgent { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CreateSbpTemplateRequest
    {
        /// <summary>
        /// Сумма в минорных единицах.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("amount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? Amount { get; set; } = default!;

        /// <summary>
        /// Валюта.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("currency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Currency { get; set; } = default!;

        /// <summary>
        /// Канал продажи.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("distributionChannel", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? DistributionChannel { get; set; } = default!;

        /// <summary>
        /// Дата окончания действия шаблона.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("endDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? EndDate { get; set; } = default!;

        /// <summary>
        /// Название шаблона.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Name { get; set; } = default!;

        /// <summary>
        /// Пароль.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("password", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Password { get; set; } = default!;

        /// <summary>
        /// Дата начала действия шаблона.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("startDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? StartDate { get; set; } = default!;

        /// <summary>
        /// Тип шаблона.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CreateSbpTemplateRequestType? Type { get; set; } = default!;

        /// <summary>
        /// Имя пользователя.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("username", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Username { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CurrencyConversionInfo
    {
        [Newtonsoft.Json.JsonProperty("additionalParams", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, string>? AdditionalParams { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("conversionRate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ConversionRate { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("convertedAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AmountInfo? ConvertedAmount { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("convertedCurrencyAlphaCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ConvertedCurrencyAlphaCode { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("convertedCurrencyNumericCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ConvertedCurrencyNumericCode { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("directConversionRate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? DirectConversionRate { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("feePercentage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? FeePercentage { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("originalAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AmountInfo? OriginalAmount { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("originalCurrencyAlphaCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? OriginalCurrencyAlphaCode { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("originalCurrencyNumericCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? OriginalCurrencyNumericCode { get; set; } = default!;

    }

    /// <summary>
    /// Блок данных о клиенте.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CustomerDetails
    {
        /// <summary>
        /// Способ связи с покупателем.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("contact", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Contact { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("deliveryInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DeliveryInfo? DeliveryInfo { get; set; } = default!;

        /// <summary>
        /// Адрес электронной почты покупателя.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Email { get; set; } = default!;

        /// <summary>
        /// Фамилия, имя и отчество плательщика.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fullName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? FullName { get; set; } = default!;

        /// <summary>
        /// Идентификационный номер налогоплательщика. Допускается передавать 10 или 12 символов.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("inn", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Inn { get; set; } = default!;

        /// <summary>
        /// Серия и номер паспорта плательщика в следующем формате: 2222888888.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("passport", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Passport { get; set; } = default!;

        /// <summary>
        /// Телефон покупателя.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("phone", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Phone { get; set; } = default!;

    }

    /// <summary>
    /// Блок, содержащий в себе уникальные для продавца номер заказа и идентификатор платёжной связки.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Data
    {
        /// <summary>
        /// Идентификатор связки созданной при оплате заказа или использованной для оплаты. Присутствует только если магазину разрешено создание связок.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("bindingId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? BindingId { get; set; } = default!;

        /// <summary>
        /// Уникальный для продавца номер заказа в платёжной системе.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("orderId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? OrderId { get; set; } = default!;

        /// <summary>
        /// Идентификатор оригинальной или предыдущей успешной транзакции в платежной системе по отношению к выполняемой операции по связке. Присутствует только если магазину разрешено создание связок.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("transactionId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? TransactionId { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DeclineByClientResponse
    {
        [Newtonsoft.Json.JsonProperty("errorCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ErrorCode { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("errorMessage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ErrorMessage { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("redirect", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Redirect { get; set; } = default!;

    }

    /// <summary>
    /// Блок с атрибутами адреса для доставки.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DeliveryInfo
    {
        /// <summary>
        /// Город доставки.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("city", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? City { get; set; } = default!;

        /// <summary>
        /// Страна доставки.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("country", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Country { get; set; } = default!;

        /// <summary>
        /// Тип доставки.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("deliveryType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? DeliveryType { get; set; } = default!;

        /// <summary>
        /// Адрес для доставки.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("postAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? PostAddress { get; set; } = default!;

    }

    /// <summary>
    /// Дополнительный тэг с атрибутами описания скидки для товарной позиции.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Discount
    {
        /// <summary>
        /// Тип скидки на товарную позицию.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("discountType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? DiscountType { get; set; } = default!;

        /// <summary>
        /// Значение скидки на товарную позицию.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("discountValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? DiscountValue { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class EcomTemplateAdditionParam
    {
        [Newtonsoft.Json.JsonProperty("label", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Label { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("mode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public EcomTemplateAdditionParamMode? Mode { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Name { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("placeholder", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Placeholder { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("regexp", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Regexp { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("required", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Required { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Value { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("visible", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Visible { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class EfectyOrderInfo
    {
        [Newtonsoft.Json.JsonProperty("networkID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? NetworkID { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("networkName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? NetworkName { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("referenceDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? ReferenceDate { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("referenceNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ReferenceNumber { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("referenceStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ReferenceStatus { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("referenceTerm", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ReferenceTerm { get; set; } = default!;

    }

    /// <summary>
    /// Блок, содержащий в себе описание ошибки, полученной в ходе выполнения запроса.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Error
    {
        /// <summary>
        /// Код ошибки.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Code { get; set; } = default!;

        /// <summary>
        /// Техническое описание ошибки.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Description { get; set; } = default!;

        /// <summary>
        /// Описание ошибки.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Message { get; set; } = default!;

    }

    /// <summary>
    /// Блок ExtendBindingResponse.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ExtendBindingResponse
    {
        /// <summary>
        /// Код результата выполнения запроса.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("errorCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ErrorCode { get; set; } = default!;

        /// <summary>
        /// Описание полученного кода результата.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("errorMessage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ErrorMessage { get; set; } = default!;

        /// <summary>
        /// Сообщение пользователю с описанием кода результата.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("userMessage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? UserMessage { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FeeInfoApiData
    {
        /// <summary>
        /// Сумма комиссии в копейках
        /// </summary>
        [Newtonsoft.Json.JsonProperty("amount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? Amount { get; set; } = default!;

        /// <summary>
        /// Информация о взимании комиссии за B2B по СБП
        /// </summary>
        [Newtonsoft.Json.JsonProperty("take", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Take { get; set; } = default!;

    }

    /// <summary>
    /// Блок GetBindingsResponse.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetBindingsResponse
    {
        [Newtonsoft.Json.JsonProperty("bindings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Binding>? Bindings { get; set; } = default!;

        /// <summary>
        /// Код результата выполнения запроса.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("errorCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ErrorCode { get; set; } = default!;

        /// <summary>
        /// Описание полученного кода результата.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("errorMessage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ErrorMessage { get; set; } = default!;

    }

    /// <summary>
    /// Блок GetLastOrdersForMerchantsResponse.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetLastOrdersForMerchantsResponse
    {
        /// <summary>
        /// Код ошибки. В случае успешного выполнения операции не возвращается.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("errorCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ErrorCode { get; set; } = default!;

        /// <summary>
        /// Описание ошибки на языке, переданном в параметре language в запросе. В случае успешного выполнения операции не возвращается.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("errorMessage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ErrorMessage { get; set; } = default!;

        /// <summary>
        /// Список результатов поиска.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("orderStatuses", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<GetOrderStatusExtendedResponse>? OrderStatuses { get; set; } = default!;

        /// <summary>
        /// Номер текущей страницы (равный номеру страницы, переданному в запросе).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("page", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Page { get; set; } = default!;

        /// <summary>
        /// Максимальное количество записей на странице (равно размеру страницы, переданному в запросе).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("pageSize", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? PageSize { get; set; } = default!;

        /// <summary>
        /// Общее количество элементов в отчёте (на всех страницах).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalCount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? TotalCount { get; set; } = default!;

    }

    /// <summary>
    /// Блок, содержащий в себе информацию о заказе.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetOrderStatusExtendedResponse
    {
        /// <summary>
        /// Код ответа.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("actionCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ActionCode { get; set; } = default!;

        /// <summary>
        /// Расшифровка кода ответа на языке, переданном в параметре Language в запросе.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("actionCodeDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ActionCodeDescription { get; set; } = default!;

        /// <summary>
        /// Сумма платежа в копейках (или центах).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("amount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? Amount { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("attributes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<OrderAddendum>? Attributes { get; set; } = default!;

        /// <summary>
        /// Дата/время авторизации.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("authDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? AuthDateTime { get; set; } = default!;

        /// <summary>
        /// Reference number.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("authRefNum", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? AuthRefNum { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("avsCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public GetOrderStatusExtendedResponseAvsCode? AvsCode { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("bankInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BankInfo? BankInfo { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("bindingInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CardBindingInfo? BindingInfo { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("cardAuthInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CardAuthInfo? CardAuthInfo { get; set; } = default!;

        /// <summary>
        /// Признак, указывающий, помечена ли транзакция флагом chargeback.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("chargeback", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Chargeback { get; set; } = default!;

        /// <summary>
        /// Код валюты платежа ISO 4217. Если не указан, считается равным 810 (российские рубли).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("currency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Currency { get; set; } = default!;

        /// <summary>
        /// Дата и время регистрации заказа. Передаётся в виде количества миллисекунд, отсчитанных от 1 января 1970 года, 00:00:00 GMT (Unix-время).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("date", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? Date { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("dccInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CurrencyConversionInfo? DccInfo { get; set; } = default!;

        /// <summary>
        /// Дата проведения оплаты.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("depositedDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? DepositedDate { get; set; } = default!;

        /// <summary>
        /// Расшифровка кода ответа для показа на клиенте
        /// </summary>
        [Newtonsoft.Json.JsonProperty("displayErrorMessage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? DisplayErrorMessage { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("efectyOrderInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public EfectyOrderInfo? EfectyOrderInfo { get; set; } = default!;

        /// <summary>
        /// Код результата выполнения запроса.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("errorCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ErrorCode { get; set; } = default!;

        /// <summary>
        /// Описание полученного кода результата.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("errorMessage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ErrorMessage { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("feUtrnno", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? FeUtrnno { get; set; } = default!;

        /// <summary>
        /// IP-адрес покупателя.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ip", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Ip { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("loyaltyInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public LoyaltyInfo? LoyaltyInfo { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("loyaltyInfos", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<LoyaltyInfo>? LoyaltyInfos { get; set; } = default!;

        /// <summary>
        /// Присутствует в ответе, если в заказе содержатся дополнительные параметры продавца. &lt;br&gt;Каждый дополнительный параметр мерчанта представлен в отдельном элементе merchantOrderParams.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("merchantOrderParams", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<OrderAddendum>? MerchantOrderParams { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("ofdOrderBundle", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<OfdItem>? OfdOrderBundle { get; set; } = default!;

        /// <summary>
        /// Список операций процессинга.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("operations", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ProcessingOperation>? Operations { get; set; } = default!;

        /// <summary>
        /// Описание товарной корзины.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("orderBundle", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OrderBundle? OrderBundle { get; set; } = default!;

        /// <summary>
        /// Описание заказа, переданное при его регистрации.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("orderDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? OrderDescription { get; set; } = default!;

        /// <summary>
        /// Номер (идентификатор) заказа в системе магазина.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("orderNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? OrderNumber { get; set; } = default!;

        /// <summary>
        /// По значению этого параметра определяется состояние заказа в платёжной системе. Отсутствует, если заказ не был найден. Список возможных значений: &lt;dr&gt;0 - Заказ зарегистрирован, но не оплачен; &lt;dr&gt;1 - Предавторизованная сумма захолдирована (для двухстадийных платежей); &lt;dr&gt;2 - Проведена полная авторизация суммы заказа; &lt;dr&gt;3 - Авторизация отменена; &lt;dr&gt;4 - По транзакции была проведена операция возврата; &lt;dr&gt;5 - Инициирована авторизация через ACS банка-эмитента; &lt;dr&gt;6 - Авторизация отклонена.&lt;dr&gt;
        /// </summary>
        [Newtonsoft.Json.JsonProperty("orderStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? OrderStatus { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("originalActionCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? OriginalActionCode { get; set; } = default!;

        /// <summary>
        /// mdOrder последующих заказов на частичную оплату.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("partpaymentMdOrders", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string>? PartpaymentMdOrders { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("payerData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PayerData? PayerData { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("paymentAmountInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PaymentAmountInfo? PaymentAmountInfo { get; set; } = default!;

        /// <summary>
        /// Способ совершения платежа (платёж с вводом карточных данных, оплата по связке и т.п.).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("paymentWay", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? PaymentWay { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("pluginInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PluginInfo? PluginInfo { get; set; } = default!;

        /// <summary>
        /// mdOrder предшествующего заказа на предоплату.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("prepaymentMdOrder", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? PrepaymentMdOrder { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("pseInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PseInfo? PseInfo { get; set; } = default!;

        /// <summary>
        /// Дата проведения возврата.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("refundedDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? RefundedDate { get; set; } = default!;

        /// <summary>
        /// Список проведённых возвратов.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("refunds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Refund>? Refunds { get; set; } = default!;

        /// <summary>
        /// Дата проведения отмены.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("reversedDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? ReversedDate { get; set; } = default!;

        /// <summary>
        /// Id терминала.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("terminalId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? TerminalId { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("tii", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public GetOrderStatusExtendedResponseTii? Tii { get; set; } = default!;

        /// <summary>
        /// Присутствует в ответе, если в заказе содержатся дополнительные атрибуты процессирования транзакции. &lt;br&gt;Каждый дополнительный атрибут заказа представлен в отдельном элементе transactionAttributes.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("transactionAttributes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<OrderAddendum>? TransactionAttributes { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("usedPsdIndicatorValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public GetOrderStatusExtendedResponseUsedPsdIndicatorValue? UsedPsdIndicatorValue { get; set; } = default!;

        /// <summary>
        /// Сообщение пользователю с описанием кода результата.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("userMessage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? UserMessage { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetOrderStatusResult
    {
        [Newtonsoft.Json.JsonProperty("Amount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? Amount { get; set; } = default!;

        /// <summary>
        /// Код результата выполнения запроса.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ErrorCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ErrorCode { get; set; } = default!;

        /// <summary>
        /// Описание полученного кода результата.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ErrorMessage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ErrorMessage { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Ip", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Ip { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("OrderBundle", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OrderBundle? OrderBundle { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("OrderNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? OrderNumber { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("OrderStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? OrderStatus { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Pan", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Pan { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("approvalCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ApprovalCode { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("authCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? AuthCode { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("bindingId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? BindingId { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("cardholderName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? CardholderName { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("clientId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ClientId { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("currency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Currency { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("depositAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? DepositAmount { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("expiration", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Expiration { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("originalActionCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? OriginalActionCode { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("pluginInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PluginInfo? PluginInfo { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("rrn", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Rrn { get; set; } = default!;

        /// <summary>
        /// Сообщение пользователю с описанием кода результата.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("userMessage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? UserMessage { get; set; } = default!;

    }

    /// <summary>
    /// Блок GooglePayData.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GooglePayData
    {
        /// <summary>
        /// Флаг обозначающий необходимость открытия acs страницы в IFrame.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("acsInIFrame", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? AcsInIFrame { get; set; } = default!;

        /// <summary>
        /// При успешном ответе в случае 3DS-платежа. URL для перехода на ACS.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("acsUrl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? AcsUrl { get; set; } = default!;

        /// <summary>
        /// Идентификатор связки созданной при оплате заказа или использованной для оплаты. Присутствует только если магазину разрешено создание связок.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("bindingId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? BindingId { get; set; } = default!;

        /// <summary>
        /// Флаг, обозначающий то, что операция идет по 3ds2.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("is3DSVer2", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Is3DSVer2 { get; set; } = default!;

        /// <summary>
        /// Номер заказа в платежной системе. Уникален в пределах системы.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("orderId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? OrderId { get; set; } = default!;

        /// <summary>
        /// При успешном ответе в случае 3DS-платежа. Payment Authentication Request.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("paReq", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? PaReq { get; set; } = default!;

        /// <summary>
        /// Сообщение CReq инициирует взаимодействие с держателем карты в потоке вызовов и может использоваться для передачи аутентификационных данных от держателя карты.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("packedCReq", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? PackedCReq { get; set; } = default!;

        /// <summary>
        /// URL-адрес для перенаправления клиента.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("redirectUrl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? RedirectUrl { get; set; } = default!;

        /// <summary>
        /// При успешном ответе в случае 3DS-платежа. URL для возврата с ACS.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("termUrl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? TermUrl { get; set; } = default!;

        /// <summary>
        /// Регистрационный номер ACS (необходим при использовании SDK).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("threeDSAcsRefNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ThreeDSAcsRefNumber { get; set; } = default!;

        /// <summary>
        /// Подписанный URL до ACS c ключами (необходим при использовании SDK).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("threeDSAcsSignedContent", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ThreeDSAcsSignedContent { get; set; } = default!;

        /// <summary>
        /// Идентификатор транзакции внутри ACS (необходим при использовании SDK).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("threeDSAcsTransactionId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ThreeDSAcsTransactionId { get; set; } = default!;

        /// <summary>
        /// Идентификатор транзакции в МПС (необходим при использовании SDK).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("threeDSDsTransID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ThreeDSDsTransID { get; set; } = default!;

        /// <summary>
        /// Данные в Base64, которые необходимо передать в ACS в случае 3DS Method (содержит notificationUrl и threeDSServerTransID).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("threeDSMethodDataPacked", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ThreeDSMethodDataPacked { get; set; } = default!;

        /// <summary>
        /// Адрес ACS для сбора данных о браузере для 3DS Method.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("threeDSMethodURL", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ThreeDSMethodURL { get; set; } = default!;

        /// <summary>
        /// Адрес 3DS Server для сбора данных о браузере для 3DS Method и AReq.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("threeDSMethodURLServer", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ThreeDSMethodURLServer { get; set; } = default!;

        /// <summary>
        /// Ссылка на метод для проведения 3DS Method через платежный шлюз.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("threeDSMethodURLServerDirect", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ThreeDSMethodURLServerDirect { get; set; } = default!;

        /// <summary>
        /// Ключ для шифрования данных об устройстве в случае использования 3DS2 SDK.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("threeDSSDKKey", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ThreeDSSDKKey { get; set; } = default!;

        /// <summary>
        /// Идентификатор, назначаемый транзакции 3DS Server’ом.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("threeDSServerTransId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ThreeDSServerTransId { get; set; } = default!;

        /// <summary>
        /// Идентификатор транзакции в платежной системе по отношению к выполняемой операции по связке. Присутствует только если магазину разрешено создание связок.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("transactionId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? TransactionId { get; set; } = default!;

    }

    /// <summary>
    /// Блок ошибок.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GooglePayError
    {
        /// <summary>
        /// Код ошибки.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Code { get; set; } = default!;

        /// <summary>
        /// Техническое описание ошибки.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Description { get; set; } = default!;

        /// <summary>
        /// Описание ошибки для клиента.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("displayErrorMessage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? DisplayErrorMessage { get; set; } = default!;

        /// <summary>
        /// Описание ошибки.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Message { get; set; } = default!;

    }

    /// <summary>
    /// Блок GooglePayRequest.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GooglePayRequest
    {
        [Newtonsoft.Json.JsonProperty("additionalOfdParams", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<AdditionalOfdParam>? AdditionalOfdParams { get; set; } = default!;

        /// <summary>
        /// Дополнительные параметры заказа, которые сохраняются для просмотра из личного кабинета продавца. Дополнительные параметры следует указывать в следующем формате: &lt;br&gt;"имя параметра": "значение параметра". &lt;br&gt;Каждую новую пару имени и значения параметра следует отделять запятой.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("additionalParameters", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, string>? AdditionalParameters { get; set; } = default!;

        /// <summary>
        /// Сумма платежа в минимальный единицах валюты (например, в копейках).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("amount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? Amount { get; set; } = default!;

        /// <summary>
        /// Дата автоматической отмены.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("autoReverseDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? AutoReverseDate { get; set; } = default!;

        /// <summary>
        /// Дата автоматического завершения.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("autocompletionDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? AutocompletionDate { get; set; } = default!;

        /// <summary>
        /// Индикатор совпадения адреса держателя карты для выставления счета и адреса доставки
        /// </summary>
        [Newtonsoft.Json.JsonProperty("billingAndShippingAddressMatchIndicator", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? BillingAndShippingAddressMatchIndicator { get; set; } = default!;

        /// <summary>
        /// Региональные данные клиента для выставления счета
        /// </summary>
        [Newtonsoft.Json.JsonProperty("billingPayerData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BillingPayerData? BillingPayerData { get; set; } = default!;

        /// <summary>
        /// Объект, содержащий информацию о браузере клиента
        /// </summary>
        [Newtonsoft.Json.JsonProperty("clientBrowserInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ClientBrowserInfo? ClientBrowserInfo { get; set; } = default!;

        /// <summary>
        /// Номер клиента, для которого следует создать связку для проведения регулярных платежей. Следует указывать, только если проводится технический платёж для последующих регулярных платежей.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("clientId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ClientId { get; set; } = default!;

        /// <summary>
        /// Цифровой код валюты платежа ISO 4217. Если не указан, считается равным 643 (российский рубль).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("currencyCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? CurrencyCode { get; set; } = default!;

        /// <summary>
        /// Описание заказа.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Description { get; set; } = default!;

        /// <summary>
        /// Адрес для callback вызовов (необходима дополнительная настройка мерчанта)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("dynamicCallbackUrl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? DynamicCallbackUrl { get; set; } = default!;

        /// <summary>
        /// Адрес электронной почты. Обязателен, если у интернет-магазина настроена фискализация и не указан номер телефона.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Email { get; set; } = default!;

        /// <summary>
        /// Значение PSD Exemption.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("externalScaExemptionIndicator", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ExternalScaExemptionIndicator { get; set; } = default!;

        /// <summary>
        /// Адрес, на который требуется перенаправить пользователя в случае неуспешной оплаты. Адрес должен быть указан полностью, включая используемый протокол (например, https://test.ru вместо test.ru). В противном случае пользователь будет перенаправлен по адресу следующего вида: http://&lt;адрес_платёжного_шлюза&gt;/&lt;адрес_продавца&gt;.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("failUrl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? FailUrl { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("features", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public System.Collections.Generic.ICollection<features2>? Features { get; set; } = default!;

        /// <summary>
        /// Размер комиссии мерчанта в минимальных единицах валюты.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("feeInput", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? FeeInput { get; set; } = default!;

        /// <summary>
        /// IP-адрес пользователя, который оплачивал заказ.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ip", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Ip { get; set; } = default!;

        /// <summary>
        /// Язык в кодировке ISO 639-1. Если не указан, будет использован язык, указанный в настройках магазина как язык по умолчанию.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("language", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Language { get; set; } = default!;

        /// <summary>
        /// Имя входа продавца в системе платёжного шлюза.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("merchant", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Merchant { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("orderBundle", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OrderBundle? OrderBundle { get; set; } = default!;

        /// <summary>
        /// Уникальный номер заказа на стороне продавца.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("orderNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? OrderNumber { get; set; } = default!;

        /// <summary>
        /// Данные заказа
        /// </summary>
        [Newtonsoft.Json.JsonProperty("orderPayerData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OrderPayerData? OrderPayerData { get; set; } = default!;

        /// <summary>
        /// Токен, полученный от Google Pay и закодированный в Base64.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("paymentToken", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? PaymentToken { get; set; } = default!;

        /// <summary>
        /// Номер телефона. Обязателен, если у интернет-магазина настроена фискализация и не указан адрес электронной почты.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("phone", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Phone { get; set; } = default!;

        /// <summary>
        /// Адрес для доставки.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("postAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? PostAddress { get; set; } = default!;

        /// <summary>
        /// Параметр, определяющий необходимость предварительной авторизации (блокирования средств на счету клиента до их списания). Доступны следующие значения: &lt;br&gt;true (истина) - параметр включён, оплата происходит с предавторизацией (происходит блокирование средств клиента до списания); &lt;br&gt;false (ложь) - параметр выключен (списание происходит сразу).  &lt;br&gt;Если параметр не указан в запросе, списание происходит сразу.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("preAuth", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? PreAuth { get; set; } = default!;

        /// <summary>
        /// Данные предзаказа
        /// </summary>
        [Newtonsoft.Json.JsonProperty("preOrderPayerData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PreOrderPayerData? PreOrderPayerData { get; set; } = default!;

        /// <summary>
        /// Адрес, на который требуется перенаправить пользователя в случае успешной оплаты. Адрес должен быть указан полностью, включая используемый протокол (например, https://test.ru вместо test.ru). В противном случае пользователь будет перенаправлен по адресу следующего вида: http://&lt;адрес_платёжного_шлюза&gt;/&lt;адрес_продавца&gt;.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("returnUrl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ReturnUrl { get; set; } = default!;

        /// <summary>
        /// Данные доставки клиента
        /// </summary>
        [Newtonsoft.Json.JsonProperty("shippingPayerData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ShippingPayerData? ShippingPayerData { get; set; } = default!;

        /// <summary>
        /// Система налогообложения, доступны следующие значения: &lt;br&gt;0 - общая; &lt;br&gt;1 - упрощённая, доход; &lt;br&gt;2 - упрощённая, доход минус расход; &lt;br&gt;3 - единый налог на вменённый доход; &lt;br&gt;4 - единый сельскохозяйственный налог; &lt;br&gt;5 - патентная система налогообложения.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("taxSystem", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TaxSystem { get; set; } = default!;

        /// <summary>
        /// Адрес для отправки уведомления о прохождении проверки 3D Secure.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("threeDSMethodNotificationUrl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ThreeDSMethodNotificationUrl { get; set; } = default!;

        /// <summary>
        /// Используется ли 3DS2 SDK.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("threeDSSDK", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ThreeDSSDK { get; set; } = default!;

        /// <summary>
        /// Идентификатор приложения SDK.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("threeDSSDKAppId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ThreeDSSDKAppId { get; set; } = default!;

        /// <summary>
        /// Зашифрованная информация об устройстве (если используется SDK).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("threeDSSDKEncData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ThreeDSSDKEncData { get; set; } = default!;

        /// <summary>
        /// Ключ для обмена CReq/CRes (если используется SDK).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("threeDSSDKEphemPubKey", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ThreeDSSDKEphemPubKey { get; set; } = default!;

        /// <summary>
        /// SDK Reference Number (если используется SDK).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("threeDSSDKReferenceNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ThreeDSSDKReferenceNumber { get; set; } = default!;

        /// <summary>
        /// Идентификатор транзакции внутри SDK.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("threeDSSDKTransId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ThreeDSSDKTransId { get; set; } = default!;

        /// <summary>
        /// Идентификатор назначаемый транзакции 3DS Server’ом.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("threeDSServerTransId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ThreeDSServerTransId { get; set; } = default!;

        /// <summary>
        /// Адрес финиша транзакции, назначаемый 3DS Server’ом.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("threeDSVer2FinishUrl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ThreeDSVer2FinishUrl { get; set; } = default!;

        /// <summary>
        /// Номер заказа, назначаемый транзакции 3DS Server’ом.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("threeDSVer2MdOrder", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ThreeDSVer2MdOrder { get; set; } = default!;

        /// <summary>
        /// Transaction Initializing Indicator.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("tii", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Tii { get; set; } = default!;

    }

    /// <summary>
    /// Блок GooglePayResponse.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GooglePayResponse
    {
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GooglePayData? Data { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("error", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GooglePayError? Error { get; set; } = default!;

        /// <summary>
        /// Флаг успеха операции.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("success", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Success { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class InstantPaymentResponse
    {
        [Newtonsoft.Json.JsonProperty("acsUrl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? AcsUrl { get; set; } = default!;

        /// <summary>
        /// Код результата выполнения запроса.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("errorCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ErrorCode { get; set; } = default!;

        /// <summary>
        /// Описание полученного кода результата.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("errorMessage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ErrorMessage { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("info", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Info { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("is3DSVer2", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Is3DSVer2 { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("orderId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? OrderId { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("orderNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? OrderNumber { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("orderStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GetOrderStatusResult? OrderStatus { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("paReq", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? PaReq { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("packedCReq", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? PackedCReq { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("redirect", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Redirect { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("termUrl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? TermUrl { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("threeDSAcsRefNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ThreeDSAcsRefNumber { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("threeDSAcsSignedContent", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ThreeDSAcsSignedContent { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("threeDSAcsTransactionId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ThreeDSAcsTransactionId { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("threeDSDsTransID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ThreeDSDsTransID { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("threeDSMethodDataPacked", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ThreeDSMethodDataPacked { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("threeDSMethodURL", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ThreeDSMethodURL { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("threeDSMethodURLServer", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ThreeDSMethodURLServer { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("threeDSMethodURLServerDirect", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ThreeDSMethodURLServerDirect { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("threeDSSDKKey", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ThreeDSSDKKey { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("threeDSServerTransId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ThreeDSServerTransId { get; set; } = default!;

        /// <summary>
        /// Сообщение пользователю с описанием кода результата.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("userMessage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? UserMessage { get; set; } = default!;

    }

    /// <summary>
    /// Элемент блока items.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Item
    {
        [Newtonsoft.Json.JsonProperty("agentInterest", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AgentInterest? AgentInterest { get; set; } = default!;

        /// <summary>
        /// Сумма в минимальных единицах валюты (например, в копейках) одного positionId, подтверждённая для списания с карты.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("depositedItemAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? DepositedItemAmount { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("discount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Discount? Discount { get; set; } = default!;

        /// <summary>
        /// Сумма стоимости всех товарных позиций одного positionId в деньгах в минимальных единицах валюты.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("itemAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? ItemAmount { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("itemAttributes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ItemAttributes? ItemAttributes { get; set; } = default!;

        /// <summary>
        /// Номер (идентификатор) товарной позиции в системе магазина. Параметр должен быть уникальным в рамках запроса.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("itemCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ItemCode { get; set; } = default!;

        /// <summary>
        /// Код валюты товарной позиции ISO 4217.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("itemCurrency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ItemCurrency { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("itemDetails", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ItemDetails? ItemDetails { get; set; } = default!;

        /// <summary>
        /// Стоимость одной товарной позиции одного positionId в деньгах в минимальных единицах валюты. Обязательно для мерчантов с фискализацией.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("itemPrice", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? ItemPrice { get; set; } = default!;

        /// <summary>
        /// Наименование или описание товарной позиции в свободной форме.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Name { get; set; } = default!;

        /// <summary>
        /// Уникальный идентификатор товарной позиции внутри корзины заказа.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("positionId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? PositionId { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("quantity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Quantity? Quantity { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("tax", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Tax? Tax { get; set; } = default!;

    }

    /// <summary>
    /// Элемент блока itemAttributes.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ItemAttribute
    {
        /// <summary>
        /// Название параметра.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Name { get; set; } = default!;

        /// <summary>
        /// Значение параметра.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Value { get; set; } = default!;

    }

    /// <summary>
    /// Блок атрибутов товарной позиции.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ItemAttributes
    {
        [Newtonsoft.Json.JsonProperty("attributes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ItemAttribute>? Attributes { get; set; } = default!;

    }

    /// <summary>
    /// Дополнительный блок с параметрами описания товарной позиции.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ItemDetails
    {
        [Newtonsoft.Json.JsonProperty("itemDetailsParams", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ItemDetailsParam>? ItemDetailsParams { get; set; } = default!;

    }

    /// <summary>
    /// Параметр описывающий дополнительную информацию по товарной позиции.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ItemDetailsParam
    {
        /// <summary>
        /// Значение параметра.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Name { get; set; } = default!;

        /// <summary>
        /// Название параметра.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Value { get; set; } = default!;

    }

    /// <summary>
    /// Тэг с атрибутами бонусных программ, в которых участвуют товарные позиции из Корзины.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Loyalties
    {
        /// <summary>
        /// Параметры блока loyalties.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("loyalties", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Loyalty>? Loyalties1 { get; set; } = default!;

    }

    /// <summary>
    /// Элемент блока loyalties.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Loyalty
    {
        /// <summary>
        /// Общая сумма бонусов всех товарных позиций для данного positionId к начислению в копейках.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("bonusAmountForCredit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? BonusAmountForCredit { get; set; } = default!;

        /// <summary>
        /// Общая сумма бонусов всех товарных позиций для данного positionId к списанию в копейках.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("bonusAmountForDebit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? BonusAmountForDebit { get; set; } = default!;

        /// <summary>
        /// Общая сумма возвращенных бонусов для данного positionId в копейках.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("bonusAmountRefunded", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? BonusAmountRefunded { get; set; } = default!;

        /// <summary>
        /// Условное наименование бонусной программы в которой участвует товарная позиция, выдается Платежным шлюзом.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("loyaltyProgramName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? LoyaltyProgramName { get; set; } = default!;

        /// <summary>
        /// Идентификатор товарной позиции, участвующей в указанной бонусной программе.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("positionId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? PositionId { get; set; } = default!;

    }

    /// <summary>
    /// Блок с информацией о системе лояльности.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class LoyaltyInfo
    {
        [Newtonsoft.Json.JsonProperty("awardBonus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AwardBonus? AwardBonus { get; set; } = default!;

        /// <summary>
        /// Наименование программы лояльности.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("loyaltyName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? LoyaltyName { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("paymentBonus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PaymentBonus? PaymentBonus { get; set; } = default!;

    }

    /// <summary>
    /// MirPayResponse.MirPayData
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MirPayData
    {
        /// <summary>
        /// ${mirPay.mirPay.data.bindingId}
        /// </summary>
        [Newtonsoft.Json.JsonProperty("bindingId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? BindingId { get; set; } = default!;

        /// <summary>
        /// ${mirPay.response.data.orderId}
        /// </summary>
        [Newtonsoft.Json.JsonProperty("orderId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? OrderId { get; set; } = default!;

        /// <summary>
        /// ${mirPay.response.data.product}
        /// </summary>
        [Newtonsoft.Json.JsonProperty("product", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Product { get; set; } = default!;

    }

    /// <summary>
    /// MirPayResponse.MirPayError
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MirPayError
    {
        /// <summary>
        /// ${mirPay.response.error.code}
        /// </summary>
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Code { get; set; } = default!;

        /// <summary>
        /// ${mirPay.response.error.description}
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Description { get; set; } = default!;

        /// <summary>
        /// ${mirPay.response.error.message}
        /// </summary>
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Message { get; set; } = default!;

    }

    /// <summary>
    /// MirPayPaymentRequest.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MirPayPaymentRequest
    {
        [Newtonsoft.Json.JsonProperty("additionalOfdParams", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<AdditionalOfdParam>? AdditionalOfdParams { get; set; } = default!;

        /// <summary>
        /// ${mirPay.request.additionalParameters}
        /// </summary>
        [Newtonsoft.Json.JsonProperty("additionalParameters", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, string>? AdditionalParameters { get; set; } = default!;

        /// <summary>
        /// ${mirPay.request.clientId}
        /// </summary>
        [Newtonsoft.Json.JsonProperty("clientId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ClientId { get; set; } = default!;

        /// <summary>
        /// ${mirPay.request.description}
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Description { get; set; } = default!;

        /// <summary>
        /// ${mirPay.request.ip}
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ip", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Ip { get; set; } = default!;

        /// <summary>
        /// ${mirPay.request.language}
        /// </summary>
        [Newtonsoft.Json.JsonProperty("language", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Language { get; set; } = default!;

        /// <summary>
        /// ${mirPay.request.merchant}
        /// </summary>
        [Newtonsoft.Json.JsonProperty("merchant", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Merchant { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("orderBundle", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OrderBundle? OrderBundle { get; set; } = default!;

        /// <summary>
        /// ${mirPay.request.orderNumber}
        /// </summary>
        [Newtonsoft.Json.JsonProperty("orderNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? OrderNumber { get; set; } = default!;

        /// <summary>
        /// ${mirPay.request.password}
        /// </summary>
        [Newtonsoft.Json.JsonProperty("password", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Password { get; set; } = default!;

        /// <summary>
        /// ${mirPay.request.paymentToken}
        /// </summary>
        [Newtonsoft.Json.JsonProperty("paymentToken", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? PaymentToken { get; set; } = default!;

        /// <summary>
        /// ${mirPay.request.preAuth}
        /// </summary>
        [Newtonsoft.Json.JsonProperty("preAuth", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? PreAuth { get; set; } = default!;

        /// <summary>
        /// ${mirPay.request.tii}
        /// </summary>
        [Newtonsoft.Json.JsonProperty("tii", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Tii { get; set; } = default!;

        /// <summary>
        /// ${mirPay.request.username}
        /// </summary>
        [Newtonsoft.Json.JsonProperty("username", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Username { get; set; } = default!;

    }

    /// <summary>
    /// MirPayResponse.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MirPayResponse
    {
        /// <summary>
        /// ${mirPay.response.data}
        /// </summary>
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public MirPayData? Data { get; set; } = default!;

        /// <summary>
        /// ${mirPay.response.error}
        /// </summary>
        [Newtonsoft.Json.JsonProperty("error", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public MirPayError? Error { get; set; } = default!;

        /// <summary>
        /// ${mirPay.response.success}
        /// </summary>
        [Newtonsoft.Json.JsonProperty("success", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Success { get; set; } = default!;

    }

    /// <summary>
    /// MirPayTokenCallbackRequest.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MirPayTokenCallbackRequest
    {
        /// <summary>
        /// ${mirPay.callback.transactionCryptogram}
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cryptogram", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Cryptogram { get; set; } = default!;

        /// <summary>
        /// ${mirPay.callback.error}
        /// </summary>
        [Newtonsoft.Json.JsonProperty("error", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Error { get; set; } = default!;

        /// <summary>
        /// ${mirPay.callback.orderId}
        /// </summary>
        [Newtonsoft.Json.JsonProperty("orderId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? OrderId { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MotoPaymentResponse
    {
        /// <summary>
        /// Код результата выполнения запроса.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("errorCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ErrorCode { get; set; } = default!;

        /// <summary>
        /// Описание полученного кода результата.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("errorMessage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ErrorMessage { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("mdOrder", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? MdOrder { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("orderNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? OrderNumber { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("success", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Success { get; set; } = default!;

        /// <summary>
        /// Сообщение пользователю с описанием кода результата.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("userMessage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? UserMessage { get; set; } = default!;

    }

    /// <summary>
    /// Элемент блока ofdOrderBundle.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OfdItem
    {
        /// <summary>
        /// Сумма стоимости всех товарных позиций одного item из ofdOrderBundle в деньгах в минимальных единицах валюты.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("itemAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? ItemAmount { get; set; } = default!;

        /// <summary>
        /// Элемент, содержащий атрибуты item.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("itemAttributes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ItemAttribute>? ItemAttributes { get; set; } = default!;

        /// <summary>
        /// Стоимость одной товарной позиции одного item из ofdOrderBundle в деньгах в минимальных единицах валюты.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("itemPrice", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? ItemPrice { get; set; } = default!;

        /// <summary>
        /// Название товарной позиции.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Name { get; set; } = default!;

        /// <summary>
        /// Элемент, описывающий общее количество товарных позиций одного item.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("quantity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Quantity? Quantity { get; set; } = default!;

        /// <summary>
        /// Ставка НДС.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("taxType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OfdItemTaxType? TaxType { get; set; } = default!;

    }

    /// <summary>
    /// Блок аттрибутов заказа.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OrderAddendum
    {
        /// <summary>
        /// Название дополнительного параметра.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Name { get; set; } = default!;

        /// <summary>
        /// Значение дополнительного параметра.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Value { get; set; } = default!;

    }

    /// <summary>
    /// Блок, содержащий Корзину товаров заказа.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OrderBundle
    {
        [Newtonsoft.Json.JsonProperty("agent", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Agent? Agent { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("cartItems", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CartItems? CartItems { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("customerDetails", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CustomerDetails? CustomerDetails { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("loyalties", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Loyalties? Loyalties { get; set; } = default!;

        /// <summary>
        /// Дата создания заказа.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("orderCreationDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? OrderCreationDate { get; set; } = default!;

        /// <summary>
        /// Массив телефонов поставщика в формате +N. Параметр может быть удалён в будущем.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("supplierPhones", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? SupplierPhones { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OrderPayerData
    {
        [Newtonsoft.Json.JsonProperty("homePhone", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? HomePhone { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("mobilePhone", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? MobilePhone { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("workPhone", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? WorkPhone { get; set; } = default!;

    }

    /// <summary>
    /// Блок OrderResult.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OrderResult
    {
        /// <summary>
        /// Код результата выполнения запроса.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("errorCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ErrorCode { get; set; } = default!;

        /// <summary>
        /// Описание полученного кода результата.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("errorMessage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ErrorMessage { get; set; } = default!;

        /// <summary>
        /// Сообщение пользователю с описанием кода результата.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("userMessage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? UserMessage { get; set; } = default!;

    }

    /// <summary>
    /// Информация о плательщике.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PayerData
    {
        /// <summary>
        /// Электронная почта покупателя.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Email { get; set; } = default!;

        /// <summary>
        /// Номер телефона покупателя.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("phone", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Phone { get; set; } = default!;

        /// <summary>
        /// Адрес для доставки.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("postAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? PostAddress { get; set; } = default!;

    }

    /// <summary>
    /// Параметр, содержащий вложенные параметры с информацией о суммах подтверждения, списания, возврата.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PaymentAmountInfo
    {
        /// <summary>
        /// Сумма, захолдированная на карте (используется только при двухстадийных платежах).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("approvedAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? ApprovedAmount { get; set; } = default!;

        /// <summary>
        /// Сумма, подтверждённая для списания с карты.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("depositedAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? DepositedAmount { get; set; } = default!;

        /// <summary>
        /// Сумма комиссии.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("feeAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? FeeAmount { get; set; } = default!;

        /// <summary>
        /// Состояние заказа.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("paymentState", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PaymentAmountInfoPaymentState? PaymentState { get; set; } = default!;

        /// <summary>
        /// Сумма возврата.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("refundedAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? RefundedAmount { get; set; } = default!;

        /// <summary>
        /// Финальная сумма заказа.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? TotalAmount { get; set; } = default!;

    }

    /// <summary>
    /// Тэг с атрибутами, содержащими данные о состоянии использованных баллов для списания при оплате заказа.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PaymentBonus
    {
        /// <summary>
        /// Сумма баллов к списанию при оплате заказа.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("approvedAmountBonus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ApprovedAmountBonus { get; set; } = default!;

        /// <summary>
        /// Подтвержденная сумма в баллах для списания на момент запроса.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("depositedAmountBonus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? DepositedAmountBonus { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("paymentOperation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PaymentBonusPaymentOperation? PaymentOperation { get; set; } = default!;

        /// <summary>
        /// Идентификатор последней проведенной операции со списываемыми баллами в процессинге лояльности.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("pcId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? PcId { get; set; } = default!;

        /// <summary>
        /// Сумма возврата в баллах на момент запроса.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("refundedAmountBonus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? RefundedAmountBonus { get; set; } = default!;

        /// <summary>
        /// Признак успешности операции (true / false).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("successful", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Successful { get; set; } = default!;

    }

    /// <summary>
    /// Блок PaymentFormResult.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PaymentFormResult
    {
        [Newtonsoft.Json.JsonProperty("acsInIFrame", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? AcsInIFrame { get; set; } = default!;

        /// <summary>
        /// Адрес перенаправления на адрес сервера ACS.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("acsUrl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? AcsUrl { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("additionalPaymentData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, string>? AdditionalPaymentData { get; set; } = default!;

        /// <summary>
        /// bindingId для успешной оплаты.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("bindingId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? BindingId { get; set; } = default!;

        /// <summary>
        /// Время задержки перед редиректом.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("delayBeforeRedirect", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? DelayBeforeRedirect { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("displayErrorMessage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? DisplayErrorMessage { get; set; } = default!;

        /// <summary>
        /// Сообщение об ошибке.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("error", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Error { get; set; } = default!;

        /// <summary>
        /// Код ошибки.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("errorCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ErrorCode { get; set; } = default!;

        /// <summary>
        /// Параметр, необходимый фронтовой странице для определения текста ошибки.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("errorTypeName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ErrorTypeName { get; set; } = default!;

        /// <summary>
        /// Результат попытки оплаты. Возможные значения представлены ниже: &lt;br&gt;&lt;br&gt;- Ваш платёж обработан, происходит переадресация... &lt;br&gt;- Операция отклонена. Проверьте введённые данные, достаточность средств на карте и повторите операцию. Происходит переадресация... &lt;br&gt;- Извините, платёж не может быть совершён. Происходит переадресация... &lt;br&gt;- Операция отклонена. Обратитесь в магазин. Происходит переадресация... &lt;br&gt;- Операция отклонена. Обратитесь в банк, выпустивший карту. Происходит переадресация... &lt;br&gt;- Операция невозможна. Аутентификация держателя карты завершена неуспешно. Происходит переадресация... &lt;br&gt;- Нет связи с банком. Повторите позже. Происходит переадресация... &lt;br&gt;- Истёк срок ожидания ввода данных. Происходит переадресация... &lt;br&gt;- Не получен ответ от банка. Повторите позже. Происходит переадресация...
        /// </summary>
        [Newtonsoft.Json.JsonProperty("info", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Info { get; set; } = default!;

        /// <summary>
        /// Флаг, обозначающий то, что операция идет по 3ds2.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("is3DSVer2", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Is3DSVer2 { get; set; } = default!;

        /// <summary>
        /// Запрос аутентификации плательщика.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("paReq", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? PaReq { get; set; } = default!;

        /// <summary>
        /// Сообщение CReq инициирует взаимодействие с держателем карты в потоке вызовов и может использоваться для передачи аутентификационных данных от держателя карты.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("packedCReq", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? PackedCReq { get; set; } = default!;

        /// <summary>
        /// Номер брони в системе бронирования.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("pnr", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Pnr { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("processingErrorType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ProcessingErrorType { get; set; } = default!;

        /// <summary>
        /// Адрес возврата после оплаты.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("redirect", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Redirect { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("sbpC2bInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SbpC2bInfo? SbpC2bInfo { get; set; } = default!;

        /// <summary>
        /// Ссылка перенаправления плательщика после аутентификации.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("termUrl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? TermUrl { get; set; } = default!;

        /// <summary>
        /// Регистрационный номер ACS (необходим при использовании SDK).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("threeDSAcsRefNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ThreeDSAcsRefNumber { get; set; } = default!;

        /// <summary>
        /// Подписанный URL до ACS c ключами (необходим при использовании SDK).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("threeDSAcsSignedContent", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ThreeDSAcsSignedContent { get; set; } = default!;

        /// <summary>
        /// Идентификатор транзакции внутри ACS (необходим при использовании SDK).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("threeDSAcsTransactionId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ThreeDSAcsTransactionId { get; set; } = default!;

        /// <summary>
        /// Идентификатор транзакции в МПС (необходим при использовании SDK)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("threeDSDsTransID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ThreeDSDsTransID { get; set; } = default!;

        /// <summary>
        /// Данные в Base64, которые необходимо передать в ACS в случае 3DS Method (содержит notificationUrl и threeDSServerTransID).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("threeDSMethodDataPacked", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ThreeDSMethodDataPacked { get; set; } = default!;

        /// <summary>
        /// Адрес ACS для сбора данных о браузере для 3DS Method.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("threeDSMethodURL", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ThreeDSMethodURL { get; set; } = default!;

        /// <summary>
        /// Адрес 3DS Server для сбора данных о браузере для 3DS Method и AReq.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("threeDSMethodURLServer", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ThreeDSMethodURLServer { get; set; } = default!;

        /// <summary>
        /// Ссылка на метод для проведения 3DS Method через платежный шлюз.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("threeDSMethodURLServerDirect", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ThreeDSMethodURLServerDirect { get; set; } = default!;

        /// <summary>
        /// Ключ для шифрования данных устройства в случае использования 3DS2 SDK.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("threeDSSDKKey", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ThreeDSSDKKey { get; set; } = default!;

        /// <summary>
        /// Идентификатор, назначаемый транзакции 3DS Server’ом.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("threeDSServerTransId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ThreeDSServerTransId { get; set; } = default!;

        /// <summary>
        /// Данные сессии для ACS.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("threeDSSessionData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ThreeDSSessionData { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PluginInfo
    {
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Name { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("params", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, string>? Params { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PodeliMerchantApiInitRequest
    {
        /// <summary>
        /// ${podeli.merchant.request.language}
        /// </summary>
        [Newtonsoft.Json.JsonProperty("language", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Language { get; set; } = default!;

        /// <summary>
        /// Order number received during registration
        /// </summary>
        [Newtonsoft.Json.JsonProperty("mdOrder", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? MdOrder { get; set; } = default!;

        /// <summary>
        /// ${podeli.merchant.request.password}
        /// </summary>
        [Newtonsoft.Json.JsonProperty("password", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Password { get; set; } = default!;

        /// <summary>
        /// ${podeli.merchant.request.username}
        /// </summary>
        [Newtonsoft.Json.JsonProperty("username", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Username { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PodeliMerchantApiInitResponse
    {
        /// <summary>
        /// ${podeli.init.status.response.amount}
        /// </summary>
        [Newtonsoft.Json.JsonProperty("amount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Amount { get; set; } = default!;

        /// <summary>
        /// Error code
        /// <br/>is filled in only in case of an error
        /// </summary>
        [Newtonsoft.Json.JsonProperty("errorCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ErrorCode { get; set; } = default!;

        /// <summary>
        /// The error message
        /// <br/> is filled in only in case of an error
        /// </summary>
        [Newtonsoft.Json.JsonProperty("errorMessage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ErrorMessage { get; set; } = default!;

        /// <summary>
        /// Link to redirect to the service "Podeli" for payment
        /// </summary>
        [Newtonsoft.Json.JsonProperty("redirectTo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? RedirectTo { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PodeliPaymentScheduleApiItem
    {
        /// <summary>
        /// The payment amount in minor units
        /// </summary>
        [Newtonsoft.Json.JsonProperty("paymentAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? PaymentAmount { get; set; } = default!;

        /// <summary>
        /// The payment date
        /// <br/>yyyy-MM-dd
        /// </summary>
        [Newtonsoft.Json.JsonProperty("paymentDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? PaymentDate { get; set; } = default!;

        /// <summary>
        /// The payment number (1,2,3,4)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("paymentNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? PaymentNumber { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PodeliPaymentScheduleApiRequest
    {
        /// <summary>
        /// ${podeli.merchant.request.language}
        /// </summary>
        [Newtonsoft.Json.JsonProperty("language", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Language { get; set; } = default!;

        /// <summary>
        /// Order number received during registration
        /// </summary>
        [Newtonsoft.Json.JsonProperty("mdOrder", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? MdOrder { get; set; } = default!;

        /// <summary>
        /// ${podeli.merchant.request.password}
        /// </summary>
        [Newtonsoft.Json.JsonProperty("password", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Password { get; set; } = default!;

        /// <summary>
        /// ${podeli.merchant.request.username}
        /// </summary>
        [Newtonsoft.Json.JsonProperty("username", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Username { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PodeliPaymentScheduleApiResponse
    {
        /// <summary>
        /// The error message
        /// <br/>successful message is 'Success'
        /// </summary>
        [Newtonsoft.Json.JsonProperty("errorCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ErrorCode { get; set; } = default!;

        /// <summary>
        /// Error code
        /// <br/>successful code is 0
        /// </summary>
        [Newtonsoft.Json.JsonProperty("errorMessage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ErrorMessage { get; set; } = default!;

        /// <summary>
        /// A set of payment schedule from Podeli BNPL
        /// </summary>
        [Newtonsoft.Json.JsonProperty("paymentSchedule", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<PodeliPaymentScheduleApiItem>? PaymentSchedule { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PreOrderPayerData
    {
        [Newtonsoft.Json.JsonProperty("preOrderDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? PreOrderDate { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("preOrderPurchaseInd", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? PreOrderPurchaseInd { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("reorderItemsInd", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ReorderItemsInd { get; set; } = default!;

    }

    /// <summary>
    /// Элемент блока operations.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ProcessingOperation
    {
        /// <summary>
        /// Сумма проводимой операции.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("amount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? Amount { get; set; } = default!;

        /// <summary>
        /// Код авторизации.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("authCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? AuthCode { get; set; } = default!;

        /// <summary>
        /// Имя держателя карты.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cardHolder", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? CardHolder { get; set; } = default!;

        /// <summary>
        /// Код валюты платежа ISO 4217.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("currencyCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? CurrencyCode { get; set; } = default!;

        /// <summary>
        /// Срок истечения действия карты в формате YYYYMM.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("expiration", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Expiration { get; set; } = default!;

        /// <summary>
        /// Внешний идентификатор операции.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("externalId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ExternalId { get; set; } = default!;

        /// <summary>
        /// FE Transaction Number.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("feUtrnno", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? FeUtrnno { get; set; } = default!;

        /// <summary>
        /// Дата проведения операции.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("operationDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? OperationDate { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("operationType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ProcessingOperationOperationType? OperationType { get; set; } = default!;

        /// <summary>
        /// Маскированный номер карты, которая использовалась для оплаты.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("pan", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Pan { get; set; } = default!;

        /// <summary>
        /// Сообщение, описывающее значение payerAuthValidateReply_authenticationResult. Возвращается только для операций Visa и JCB.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("pares_message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Pares_message { get; set; } = default!;

        /// <summary>
        /// Аутентификационные данные, полученные от Банка-эмитента. Основное поле аутентификации показывает, успешно ли прошла аутентификации или происходит перенос ответственности. Значение этого поля проверяется в первую очередь. Возможны следующие значения: &lt;br&gt;-1: Неверное значение PARes. &lt;br&gt;0: Валидация прошла успешно.  &lt;br&gt;1: Карта не вовлечена в 3DS, произведена запись попытки пройти аутентификацию.  &lt;br&gt;6: Эмитент не может совершить аутентификацию.  &lt;br&gt;9: Держатель карты не завершил процесс аутентификации.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("pares_result", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Pares_result { get; set; } = default!;

        /// <summary>
        /// Результат проверки аутентификации. Поле может содержать следующие значения: &lt;br&gt;A: Зафиксирована попытка прохождения аутентификации. &lt;br&gt;N: Клиент не прошёл или отменил аутентификацию. Операция отклонена. &lt;br&gt;U: Аутентификация не была завершена. &lt;br&gt;Y: Клиент успешно прошёл аутентификацию. &lt;br&gt;Это поле используется только в платёжных шлюзах регионов Азия, Ближний Восток и Африка.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("pares_status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Pares_status { get; set; } = default!;

        /// <summary>
        /// Код результата операции.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("processingResultCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ProcessingResultCode { get; set; } = default!;

        /// <summary>
        /// RRN процессинговой операции.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("referenceNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ReferenceNumber { get; set; } = default!;

        /// <summary>
        /// Признак успешности выполненной операции.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("success", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Success { get; set; } = default!;

        /// <summary>
        /// Идентификатор терминала.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("terminalId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? TerminalId { get; set; } = default!;

        /// <summary>
        /// Результат проверки вовлечённости. Поле может содержать следующие значения: &lt;br&gt;Y: Карта вовлечена, требуется аутентификация на ACS. Перенос ответственности. &lt;br&gt;N: Карта не вовлечена, продолжается авторизация платежа. Перенос ответственности. &lt;br&gt;U: Аутентификация невозможна. Ответственность не переносится. &lt;br&gt;Это поле используется только в платёжных шлюзах регионов Азия, Ближний Восток и Африка.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("veres_enrolled", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Veres_enrolled { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PseInfo
    {
        [Newtonsoft.Json.JsonProperty("docNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? DocNumber { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("docType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? DocType { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("entityUrl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? EntityUrl { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("finalizeStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? FinalizeStatus { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("financialInstitutionCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? FinancialInstitutionCode { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("traceabilityCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? TraceabilityCode { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("userType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? UserType { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class QrTemplate
    {
        [Newtonsoft.Json.JsonProperty("qrHeight", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? QrHeight { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("qrWidth", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? QrWidth { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class QrTemplateResponse
    {
        [Newtonsoft.Json.JsonProperty("payload", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Payload { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("renderedQr", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? RenderedQr { get; set; } = default!;

    }

    /// <summary>
    /// Элемент, описывающий общее количество товарных позиций одного positionId и их меру измерения.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Quantity
    {
        /// <summary>
        /// Мера измерения количества товарной позиции.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("measure", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Measure { get; set; } = default!;

        /// <summary>
        /// Количество товарных позиций данного positionId. Для указания дробных чисел используйте десятичную точку.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public float? Value { get; set; } = default!;

    }

    /// <summary>
    /// Блок RecurrentPaymentData.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RecurrentPaymentData
    {
        /// <summary>
        /// Уникальный для продавца номер заказа в платёжной системе.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("orderId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? OrderId { get; set; } = default!;

    }

    /// <summary>
    /// Блок ошибок.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RecurrentPaymentError
    {
        /// <summary>
        /// Код ошибки.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Code { get; set; } = default!;

        /// <summary>
        /// Техническое описание ошибки.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Description { get; set; } = default!;

        /// <summary>
        /// Описание ошибки.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Message { get; set; } = default!;

    }

    /// <summary>
    /// Блок RecurrentPaymentRequest.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RecurrentPaymentRequest
    {
        [Newtonsoft.Json.JsonProperty("additionalOfdParams", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<AdditionalOfdParam>? AdditionalOfdParams { get; set; } = default!;

        /// <summary>
        /// Дополнительные параметры заказа, которые сохраняются для просмотра из личного кабинета продавца. Дополнительные параметры следует указывать в следующем формате: &lt;br&gt;"имя параметра": "значение параметра". &lt;br&gt;Каждую новую пару имени и значения параметра следует отделять запятой.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("additionalParameters", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, string>? AdditionalParameters { get; set; } = default!;

        /// <summary>
        /// Сумма заказа в минимальных единицах валюты (например, в копейках).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("amount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? Amount { get; set; } = default!;

        /// <summary>
        /// Дата автоматической отмены.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("autoReverseDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? AutoReverseDate { get; set; } = default!;

        /// <summary>
        /// Дата автоматического завершения.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("autocompletionDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? AutocompletionDate { get; set; } = default!;

        /// <summary>
        /// Индикатор совпадения адреса держателя карты для выставления счета и адреса доставки
        /// </summary>
        [Newtonsoft.Json.JsonProperty("billingAndShippingAddressMatchIndicator", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? BillingAndShippingAddressMatchIndicator { get; set; } = default!;

        /// <summary>
        /// Региональные данные клиента для выставления счета
        /// </summary>
        [Newtonsoft.Json.JsonProperty("billingPayerData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BillingPayerData? BillingPayerData { get; set; } = default!;

        /// <summary>
        /// Идентификатор связки.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("bindingId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? BindingId { get; set; } = default!;

        /// <summary>
        /// Цифровой код валюты ISO 4217.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("currency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Currency { get; set; } = default!;

        /// <summary>
        /// Описание заказа.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Description { get; set; } = default!;

        /// <summary>
        /// Адрес для callback вызовов (необходима дополнительная настройка мерчанта).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("dynamicCallbackUrl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? DynamicCallbackUrl { get; set; } = default!;

        /// <summary>
        /// Значение PSD Exemption.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("externalScaExemptionIndicator", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ExternalScaExemptionIndicator { get; set; } = default!;

        /// <summary>
        /// Размер комиссии мерчанта в минимальных единицах валюты.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("feeInput", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? FeeInput { get; set; } = default!;

        /// <summary>
        /// Двухбуквенный код языка.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("language", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Language { get; set; } = default!;

        /// <summary>
        /// Корзина заказа.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("orderBundle", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OrderBundle? OrderBundle { get; set; } = default!;

        /// <summary>
        /// Номер заказа.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("orderNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? OrderNumber { get; set; } = default!;

        /// <summary>
        /// Данные заказа
        /// </summary>
        [Newtonsoft.Json.JsonProperty("orderPayerData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OrderPayerData? OrderPayerData { get; set; } = default!;

        /// <summary>
        /// Пароль пользователя с доступом к API платёжного шлюза.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("password", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Password { get; set; } = default!;

        /// <summary>
        /// Параметр, определяющий необходимость предварительной авторизации.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("preAuth", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? PreAuth { get; set; } = default!;

        /// <summary>
        /// Данные предзаказа
        /// </summary>
        [Newtonsoft.Json.JsonProperty("preOrderPayerData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PreOrderPayerData? PreOrderPayerData { get; set; } = default!;

        /// <summary>
        /// Данные доставки клиента
        /// </summary>
        [Newtonsoft.Json.JsonProperty("shippingPayerData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ShippingPayerData? ShippingPayerData { get; set; } = default!;

        /// <summary>
        /// Система налогообложения, доступны следующие значения: &lt;br&gt;0 - общая; &lt;br&gt;1 - упрощённая, доход; &lt;br&gt;2 - упрощённая, доход минус расход; &lt;br&gt;3 - единый налог на вменённый доход; &lt;br&gt;4 - единый сельскохозяйственный налог; &lt;br&gt;5 - патентная система налогообложения.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("taxSystem", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TaxSystem { get; set; } = default!;

        /// <summary>
        /// Имя пользователя с доступом к API платёжного шлюза.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("userName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? UserName { get; set; } = default!;

    }

    /// <summary>
    /// Блок RecurrentPaymentResponse.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RecurrentPaymentResponse
    {
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public RecurrentPaymentData? Data { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("error", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public RecurrentPaymentError? Error { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("orderStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GetOrderStatusExtendedResponse? OrderStatus { get; set; } = default!;

        /// <summary>
        /// Флаг успеха операции.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("success", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Success { get; set; } = default!;

    }

    /// <summary>
    /// Блок с параметрами проведённого возврата.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Refund
    {
        /// <summary>
        /// Код результата выполнения операции.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("actionCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ActionCode { get; set; } = default!;

        /// <summary>
        /// Сумма платежа в копейках (или центах).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("amount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? Amount { get; set; } = default!;

        /// <summary>
        /// Код авторизации платежа.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("approvalCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ApprovalCode { get; set; } = default!;

        /// <summary>
        /// Дата проведения возврата.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("date", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Date { get; set; } = default!;

        /// <summary>
        /// Внешний идентификатор возврата.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("externalRefundId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ExternalRefundId { get; set; } = default!;

        /// <summary>
        /// RRN процессинговой операции возврата.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("referenceNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ReferenceNumber { get; set; } = default!;

        /// <summary>
        /// Блок с параметрами СБП возврата.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sbp", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SbpRefund? Sbp { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RegisterOrderResponse
    {
        /// <summary>
        /// Код ошибки. В случае успешного выполнения операции не возвращается.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("errorCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ErrorCode { get; set; } = default!;

        /// <summary>
        /// Описание ошибки на языке, переданном в параметре language в запросе. В случае успешного выполнения операции не возвращается.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("errorMessage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ErrorMessage { get; set; } = default!;

        /// <summary>
        /// URL платежной формы, на который надо перенаправить браузер клиента. Не возвращается если регистрация заказа не удалась по причине ошибки, детализированной в errorCode.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("formUrl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? FormUrl { get; set; } = default!;

        /// <summary>
        /// Номер заказа в платежной системе. Уникален в пределах системы. Отсутствует если регистрация заказа не удалась по причине ошибки, детализированной в errorCode.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("orderId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? OrderId { get; set; } = default!;

    }

    /// <summary>
    /// Блок SamsungData. Возвращается, только если платёж прошёл успешно.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SamsungData
    {
        /// <summary>
        /// Идентификатор связки созданной при оплате заказа или использованной для оплаты.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("bindingId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? BindingId { get; set; } = default!;

        /// <summary>
        /// Уникальный для продавца номер заказа в платёжной системе.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("orderId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? OrderId { get; set; } = default!;

    }

    /// <summary>
    /// Блок SamsungError. Возвращается, только если платёж не прошёл.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SamsungError
    {
        /// <summary>
        /// Код ошибки.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Code { get; set; } = default!;

        /// <summary>
        /// Техническое описание ошибки.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Description { get; set; } = default!;

        /// <summary>
        /// Описание ошибки.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Message { get; set; } = default!;

    }

    /// <summary>
    /// Блок SamsungPayDirectPaymentRequest.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SamsungPayDirectPaymentRequest
    {
        [Newtonsoft.Json.JsonProperty("additionalOfdParams", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<AdditionalOfdParam>? AdditionalOfdParams { get; set; } = default!;

        /// <summary>
        /// Дополнительные параметры заказа, которые сохраняются для просмотра из личного кабинета продавца. Дополнительные параметры следует указывать в следующем формате: &lt;br&gt;"имя параметра": "значение параметра". &lt;br&gt;Каждую новую пару имени и значения параметра следует отделять запятой.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("additionalParameters", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, string>? AdditionalParameters { get; set; } = default!;

        /// <summary>
        /// Дата автоматической отмены.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("autoReverseDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? AutoReverseDate { get; set; } = default!;

        /// <summary>
        /// Дата автоматического завершения.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("autocompletionDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? AutocompletionDate { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("billingAndShippingAddressMatchIndicator", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? BillingAndShippingAddressMatchIndicator { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("billingPayerData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BillingPayerData? BillingPayerData { get; set; } = default!;

        /// <summary>
        /// Номер (идентификатор) клиента в системе магазина
        /// </summary>
        [Newtonsoft.Json.JsonProperty("clientId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ClientId { get; set; } = default!;

        /// <summary>
        /// Описание заказа.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Description { get; set; } = default!;

        /// <summary>
        /// Адрес для callback вызовов (необходима дополнительная настройка мерчанта).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("dynamicCallbackUrl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? DynamicCallbackUrl { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("externalScaExemptionIndicator", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ExternalScaExemptionIndicator { get; set; } = default!;

        /// <summary>
        /// Размер комиссии мерчанта в минимальных единицах валюты.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("feeInput", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? FeeInput { get; set; } = default!;

        /// <summary>
        /// IP-адрес пользователя, который оплачивал заказ.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ip", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Ip { get; set; } = default!;

        /// <summary>
        /// Язык в кодировке ISO 639-1. Если не указан, будет использован язык, указанный в настройках магазина как язык по умолчанию.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("language", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Language { get; set; } = default!;

        /// <summary>
        /// Имя входа продавца в системе платёжного шлюза.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("merchant", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Merchant { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("orderBundle", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OrderBundle? OrderBundle { get; set; } = default!;

        /// <summary>
        /// Уникальный номер заказа на стороне продавца.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("orderNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? OrderNumber { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("orderPayerData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OrderPayerData? OrderPayerData { get; set; } = default!;

        /// <summary>
        /// Содержимое параметра 3ds.data из ответа, полученного от Samsung Pay.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("paymentToken", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? PaymentToken { get; set; } = default!;

        /// <summary>
        /// Параметр, определяющий необходимость предварительной авторизации (блокирования средств на счету клиента до их списания). Доступны следующие значения: &lt;br&gt;true (истина) - параметр включён, оплата происходит с предавторизацией (происходит блокирование средств клиента до списания); &lt;br&gt;false (ложь) - параметр выключен (списание происходит сразу). &lt;br&gt;Если параметр не указан в запросе, списание происходит сразу.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("preAuth", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? PreAuth { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("preOrderPayerData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PreOrderPayerData? PreOrderPayerData { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("shippingPayerData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ShippingPayerData? ShippingPayerData { get; set; } = default!;

        /// <summary>
        /// Система налогообложения, доступны следующие значения: &lt;br&gt;0 - общая; &lt;br&gt;1 - упрощённая, доход; &lt;br&gt;2 - упрощённая, доход минус расход; &lt;br&gt;3 - единый налог на вменённый доход; &lt;br&gt;4 - единый сельскохозяйственный налог; &lt;br&gt;5 - патентная система налогообложения.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("taxSystem", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TaxSystem { get; set; } = default!;

        /// <summary>
        /// Transaction Initializing Indicator.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("tii", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Tii { get; set; } = default!;

    }

    /// <summary>
    /// Блок SamsungPayPaymentRequest.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SamsungPayPaymentRequest
    {
        [Newtonsoft.Json.JsonProperty("additionalOfdParams", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<AdditionalOfdParam>? AdditionalOfdParams { get; set; } = default!;

        /// <summary>
        /// Дополнительные параметры заказа, которые сохраняются для просмотра из личного кабинета продавца. Дополнительные параметры следует указывать в следующем формате: &lt;br&gt;"имя параметра": "значение параметра". &lt;br&gt;Каждую новую пару имени и значения параметра следует отделять запятой.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("additionalParameters", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, string>? AdditionalParameters { get; set; } = default!;

        /// <summary>
        /// Дата автоматической отмены.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("autoReverseDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? AutoReverseDate { get; set; } = default!;

        /// <summary>
        /// Дата автоматического завершения.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("autocompletionDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? AutocompletionDate { get; set; } = default!;

        /// <summary>
        /// Индикатор совпадения адреса держателя карты для выставления счета и адреса доставки
        /// </summary>
        [Newtonsoft.Json.JsonProperty("billingAndShippingAddressMatchIndicator", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? BillingAndShippingAddressMatchIndicator { get; set; } = default!;

        /// <summary>
        /// Региональные данные клиента для выставления счета
        /// </summary>
        [Newtonsoft.Json.JsonProperty("billingPayerData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BillingPayerData? BillingPayerData { get; set; } = default!;

        /// <summary>
        /// Номер (идентификатор) клиента в системе магазина
        /// </summary>
        [Newtonsoft.Json.JsonProperty("clientId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ClientId { get; set; } = default!;

        /// <summary>
        /// Описание заказа.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Description { get; set; } = default!;

        /// <summary>
        /// Адрес для callback вызовов (необходима дополнительная настройка мерчанта).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("dynamicCallbackUrl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? DynamicCallbackUrl { get; set; } = default!;

        /// <summary>
        /// Значение PSD Exemption.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("externalScaExemptionIndicator", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ExternalScaExemptionIndicator { get; set; } = default!;

        /// <summary>
        /// Размер комиссии мерчанта в минимальных единицах валюты.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("feeInput", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? FeeInput { get; set; } = default!;

        /// <summary>
        /// IP-адрес пользователя, который оплачивал заказ.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ip", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Ip { get; set; } = default!;

        /// <summary>
        /// Язык в кодировке ISO 639-1. Если не указан, будет использован язык, указанный в настройках магазина как язык по умолчанию.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("language", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Language { get; set; } = default!;

        /// <summary>
        /// Имя входа продавца в системе платёжного шлюза.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("merchant", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Merchant { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("orderBundle", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OrderBundle? OrderBundle { get; set; } = default!;

        /// <summary>
        /// Уникальный номер заказа на стороне продавца.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("orderNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? OrderNumber { get; set; } = default!;

        /// <summary>
        /// Данные заказа
        /// </summary>
        [Newtonsoft.Json.JsonProperty("orderPayerData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OrderPayerData? OrderPayerData { get; set; } = default!;

        /// <summary>
        /// Содержимое параметра 3ds.data из ответа, полученного от Samsung Pay.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("paymentToken", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? PaymentToken { get; set; } = default!;

        /// <summary>
        /// Параметр, определяющий необходимость предварительной авторизации (блокирования средств на счету клиента до их списания). Доступны следующие значения: &lt;br&gt;true (истина) - параметр включён, оплата происходит с предавторизацией (происходит блокирование средств клиента до списания); &lt;br&gt;false (ложь) - параметр выключен (списание происходит сразу). &lt;br&gt;Если параметр не указан в запросе, списание происходит сразу.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("preAuth", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? PreAuth { get; set; } = default!;

        /// <summary>
        /// Данные предзаказа
        /// </summary>
        [Newtonsoft.Json.JsonProperty("preOrderPayerData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PreOrderPayerData? PreOrderPayerData { get; set; } = default!;

        /// <summary>
        /// Данные доставки клиента
        /// </summary>
        [Newtonsoft.Json.JsonProperty("shippingPayerData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ShippingPayerData? ShippingPayerData { get; set; } = default!;

        /// <summary>
        /// Система налогообложения, доступны следующие значения: &lt;br&gt;0 - общая; &lt;br&gt;1 - упрощённая, доход; &lt;br&gt;2 - упрощённая, доход минус расход; &lt;br&gt;3 - единый налог на вменённый доход; &lt;br&gt;4 - единый сельскохозяйственный налог; &lt;br&gt;5 - патентная система налогообложения.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("taxSystem", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TaxSystem { get; set; } = default!;

        /// <summary>
        /// Transaction Initializing Indicator.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("tii", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Tii { get; set; } = default!;

    }

    /// <summary>
    /// Блок SamsungPayPaymentResponse.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SamsungPayPaymentResponse
    {
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SamsungData? Data { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("error", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SamsungError? Error { get; set; } = default!;

        /// <summary>
        /// Указывает на успешность проведения платежа. Доступны следующие значения: &lt;br&gt;&lt;br&gt;true (истина) - платёж прошёл успешно; &lt;br&gt;false (ложь) - платёж не прошёл.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("success", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Success { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SbpB2bPayloadApiResponse
    {
        /// <summary>
        /// Блок данных
        /// </summary>
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public B2bPayloadApiData? Data { get; set; } = default!;

        /// <summary>
        /// Код ошибки. 
        /// <br/>Заполняется только в случае ошибки.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("errorCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ErrorCode { get; set; } = default!;

        /// <summary>
        /// Сообщение об ошибке. 
        /// <br/>Заполняется только в случае ошибки.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("errorMessage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ErrorMessage { get; set; } = default!;

        /// <summary>
        /// Блок информации о комиссии
        /// </summary>
        [Newtonsoft.Json.JsonProperty("feeInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FeeInfoApiData? FeeInfo { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SbpB2bPerformApiRequest
    {
        /// <summary>
        /// $sbp.b2b.perform.request.param.mdOrder}
        /// </summary>
        [Newtonsoft.Json.JsonProperty("mdOrder", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? MdOrder { get; set; } = default!;

        /// <summary>
        /// Сумма НДС в минорных единицах
        /// </summary>
        [Newtonsoft.Json.JsonProperty("nds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? Nds { get; set; } = default!;

        /// <summary>
        /// $sbp.b2b.perform.request.param.password}
        /// </summary>
        [Newtonsoft.Json.JsonProperty("password", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Password { get; set; } = default!;

        /// <summary>
        /// Блок с параметрами Получателя перевода
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sbpRecipientParams", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SbpB2bRecipientParams? SbpRecipientParams { get; set; } = default!;

        /// <summary>
        /// Блок с параметрами Отправителя перевода
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sbpSenderParams", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SbpB2bSenderParams? SbpSenderParams { get; set; } = default!;

        /// <summary>
        /// $sbp.b2b.perform.request.param.username}
        /// </summary>
        [Newtonsoft.Json.JsonProperty("username", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Username { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SbpB2bPerformApiResponse
    {
        /// <summary>
        /// Код ошибки. 
        /// <br/>Заполняется только в случае ошибки.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("errorCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ErrorCode { get; set; } = default!;

        /// <summary>
        /// Сообщение об ошибке. 
        /// <br/>Заполняется только в случае ошибки.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("errorMessage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ErrorMessage { get; set; } = default!;

        /// <summary>
        /// Идентификатор операции ОПКЦ СБП
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fpMessageId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? FpMessageId { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SbpB2bRecipientParams
    {
        /// <summary>
        /// Идентификатор Банка Получателя
        /// </summary>
        [Newtonsoft.Json.JsonProperty("bankId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? BankId { get; set; } = default!;

        /// <summary>
        /// Идентификатор Функциональной ссылки СБП для B2B
        /// </summary>
        [Newtonsoft.Json.JsonProperty("paymentId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? PaymentId { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SbpB2bSenderParams
    {
        /// <summary>
        /// Зарегистрированный в СБП номер Счета Отправителя
        /// </summary>
        [Newtonsoft.Json.JsonProperty("account", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Account { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SbpBank
    {
        /// <summary>
        /// Идентификатор банка в СБП.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("bankId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? BankId { get; set; } = default!;

        /// <summary>
        /// Наименование банка на русском языке.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("bankNameEng", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? BankNameEng { get; set; } = default!;

        /// <summary>
        /// Наименование банка - транслитерация на английском языке.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("bankNameRus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? BankNameRus { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SbpBindingDto
    {
        /// <summary>
        /// Идентификатор подписки
        /// </summary>
        [Newtonsoft.Json.JsonProperty("bindingId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? BindingId { get; set; } = default!;

        /// <summary>
        /// ${getSbpBindings.clientId}
        /// </summary>
        [Newtonsoft.Json.JsonProperty("clientId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ClientId { get; set; } = default!;

        /// <summary>
        /// Наименование банка
        /// </summary>
        [Newtonsoft.Json.JsonProperty("displayLabel", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? DisplayLabel { get; set; } = default!;

        /// <summary>
        /// Идентификатор банка-участника СБП
        /// </summary>
        [Newtonsoft.Json.JsonProperty("memberId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? MemberId { get; set; } = default!;

        /// <summary>
        /// Идентификатор типа предоставляемой услуги для привязки счета.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("subscriptionServiceId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? SubscriptionServiceId { get; set; } = default!;

        /// <summary>
        /// ${getSbpBindings.subscriptionServiceName}
        /// </summary>
        [Newtonsoft.Json.JsonProperty("subscriptionServiceName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? SubscriptionServiceName { get; set; } = default!;

        /// <summary>
        /// Идентификатор привязки счета
        /// </summary>
        [Newtonsoft.Json.JsonProperty("subscriptionToken", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? SubscriptionToken { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SbpBioMetadata
    {
        [Newtonsoft.Json.JsonProperty("advertising_id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Advertising_id { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("camera_id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Camera_id { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("date", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Date { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("device_cpu", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Device_cpu { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("device_id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Device_id { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("device_manufacturer", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Device_manufacturer { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("device_model", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Device_model { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("device_serial", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Device_serial { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("dpi", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Dpi { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("geolocation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Geolocation { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("imei", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Imei { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("isp", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Isp { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("locale", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Locale { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("operating_system", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Operating_system { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("rooted", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Rooted { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("screen", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Screen { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("sim", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Sim { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("time_zone", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Time_zone { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SbpBioPaymentApiRequest
    {
        /// <summary>
        /// Ссылка на страницу ТСП в случае неудачной аутентификации по биометрии
        /// </summary>
        [Newtonsoft.Json.JsonProperty("failUrl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? FailUrl { get; set; } = default!;

        /// <summary>
        /// Номер заказа, полученный при регистрации.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("mdOrder", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? MdOrder { get; set; } = default!;

        /// <summary>
        /// Данные устройства с которого выполняется операция
        /// </summary>
        [Newtonsoft.Json.JsonProperty("metadata", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SbpBioMetadata? Metadata { get; set; } = default!;

        /// <summary>
        /// Пароль магазина, полученный при подключении.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("password", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Password { get; set; } = default!;

        /// <summary>
        /// Ссылка на страницу ТСП в случае успешной аутентификации по биометрии
        /// </summary>
        [Newtonsoft.Json.JsonProperty("successUrl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? SuccessUrl { get; set; } = default!;

        /// <summary>
        /// Логин магазина, полученный при подключении.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("username", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Username { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SbpBioPaymentApiResponse
    {
        /// <summary>
        /// Код ошибки. 
        /// <br/>Заполняется только в случае ошибки.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("errorCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ErrorCode { get; set; } = default!;

        /// <summary>
        /// Сообщение об ошибке. 
        /// <br/>Заполняется только в случае ошибки.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("errorMessage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ErrorMessage { get; set; } = default!;

        /// <summary>
        /// URL веб-формы снятия биометрических образцов
        /// </summary>
        [Newtonsoft.Json.JsonProperty("location", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Location { get; set; } = default!;

        /// <summary>
        /// Идентификатор QR-кода.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("qrId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? QrId { get; set; } = default!;

        /// <summary>
        /// Идентификатор сессии идентификации в ЕБС
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sessionId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? SessionId { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SbpC2bBanksResponse
    {
        [Newtonsoft.Json.JsonProperty("banks", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<SbpBank>? Banks { get; set; } = default!;

        /// <summary>
        /// Дата начала действия справочника.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("effectiveDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? EffectiveDate { get; set; } = default!;

        /// <summary>
        /// Код ошибки. 
        /// <br/>Заполняется только в случае ошибки.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("errorCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ErrorCode { get; set; } = default!;

        /// <summary>
        /// Сообщение об ошибке. 
        /// <br/>Заполняется только в случае ошибки.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("errorMessage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ErrorMessage { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SbpC2bGetBindingsApiResponse
    {
        [Newtonsoft.Json.JsonProperty("bindings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<SbpBindingDto>? Bindings { get; set; } = default!;

        /// <summary>
        /// Код ошибки. 
        /// <br/>Заполняется только в случае ошибки.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("errorCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ErrorCode { get; set; } = default!;

        /// <summary>
        /// Сообщение об ошибке. 
        /// <br/>Заполняется только в случае ошибки.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("errorMessage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ErrorMessage { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SbpC2bGetQrApiResponse
    {
        /// <summary>
        /// Код ошибки. 
        /// <br/>Заполняется только в случае ошибки.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("errorCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ErrorCode { get; set; } = default!;

        /// <summary>
        /// Сообщение об ошибке. 
        /// <br/>Заполняется только в случае ошибки.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("errorMessage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ErrorMessage { get; set; } = default!;

        /// <summary>
        /// Payload зарегистрированного в SBP QR-кода. Присутствует, если qrStatus 'STARTED'.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("payload", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Payload { get; set; } = default!;

        /// <summary>
        /// Идентификатор QR-кода.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("qrId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? QrId { get; set; } = default!;

        /// <summary>
        /// Тип QR-кода.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("qrStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public SbpC2bGetQrApiResponseQrStatus? QrStatus { get; set; } = default!;

        /// <summary>
        /// QR-код в формате PNG, закодированный в Base64. Присутствует, если в запросе были указаны qrHeight и qrWidth, и при этом qrStatus 'STARTED'.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("renderedQr", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? RenderedQr { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SbpC2bInfo
    {
        [Newtonsoft.Json.JsonProperty("payload", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Payload { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("qrId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? QrId { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("renderedQr", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? RenderedQr { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public SbpC2bInfoStatus? Status { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SbpC2bQrStatusApiResponse
    {
        /// <summary>
        /// Код ошибки. 
        /// <br/>Заполняется только в случае ошибки.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("errorCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ErrorCode { get; set; } = default!;

        /// <summary>
        /// Сообщение об ошибке. 
        /// <br/>Заполняется только в случае ошибки.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("errorMessage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ErrorMessage { get; set; } = default!;

        /// <summary>
        /// Payload зарегистрированного в SBP QR-кода. Присутствует, если qrStatus 'STARTED'.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("payload", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Payload { get; set; } = default!;

        /// <summary>
        /// Статус QR-кода.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("qrStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public SbpC2bQrStatusApiResponseQrStatus? QrStatus { get; set; } = default!;

        /// <summary>
        /// Тип QR-кода.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("qrType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public SbpC2bQrStatusApiResponseQrType? QrType { get; set; } = default!;

        /// <summary>
        /// Статус заказа.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("transactionState", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public SbpC2bQrStatusApiResponseTransactionState? TransactionState { get; set; } = default!;

        /// <summary>
        /// Расширенный статус заказа.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("transactionStateExtension", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public SbpC2bQrStatusApiResponseTransactionStateExtension? TransactionStateExtension { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SbpC2bRejectQrApiResponse
    {
        /// <summary>
        /// Код ошибки. 
        /// <br/>Заполняется только в случае ошибки.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("errorCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ErrorCode { get; set; } = default!;

        /// <summary>
        /// Сообщение об ошибке. 
        /// <br/>Заполняется только в случае ошибки.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("errorMessage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ErrorMessage { get; set; } = default!;

        /// <summary>
        /// Указывает на результат операции отмены QR-кода. 
        /// <br/>Если true, статус QR-кода будет переведен в 'REJECT_BY_USER'.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("rejected", Required = Newtonsoft.Json.Required.Always)]
        public bool Rejected { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SbpC2bUnBindApiResponse
    {
        /// <summary>
        /// Код ошибки. 
        /// <br/>Заполняется только в случае ошибки.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("errorCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ErrorCode { get; set; } = default!;

        /// <summary>
        /// Сообщение об ошибке. 
        /// <br/>Заполняется только в случае ошибки.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("errorMessage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ErrorMessage { get; set; } = default!;

    }

    /// <summary>
    /// Блок с параметрами СБП возврата.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SbpRefund
    {
        /// <summary>
        /// Внешний СБП идентификатор возврата.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("operationId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? OperationId { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SbpTemplateDetailsResponse
    {
        /// <summary>
        /// Сумма в минорных единицах.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("amount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? Amount { get; set; } = default!;

        /// <summary>
        /// Валюта.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("currency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Currency { get; set; } = default!;

        /// <summary>
        /// Канал продажи.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("distributionChannel", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? DistributionChannel { get; set; } = default!;

        /// <summary>
        /// Дата окончания действия шаблона.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("endDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? EndDate { get; set; } = default!;

        /// <summary>
        /// Код ошибки. Заполняется только в случае ошибки.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("errorCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ErrorCode { get; set; } = default!;

        /// <summary>
        /// Сообщение об ошибке. Заполняется только в случае ошибки.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("errorMessage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ErrorMessage { get; set; } = default!;

        /// <summary>
        /// Название шаблона.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Name { get; set; } = default!;

        /// <summary>
        /// Дата начала действия шаблона.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("startDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? StartDate { get; set; } = default!;

        /// <summary>
        /// Статус шаблона.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public SbpTemplateDetailsResponseStatus? Status { get; set; } = default!;

        /// <summary>
        /// СБП B2B Информация о взимании НДС (true –облагается НДС, false –не облагается НДС)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("takeTax", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? TakeTax { get; set; } = default!;

        /// <summary>
        /// id шаблона.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("templateId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? TemplateId { get; set; } = default!;

        /// <summary>
        /// СБП B2B Сумма НДС в копейках. Валюта НДС-рубли РФ
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalTaxAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TotalTaxAmount { get; set; } = default!;

        /// <summary>
        /// Тип шаблона.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public SbpTemplateDetailsResponseType? Type { get; set; } = default!;

        /// <summary>
        /// Дата последнего использования шаблона.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("useDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? UseDate { get; set; } = default!;

    }

    /// <summary>
    /// Блок с информацией о проведении TDS платежа.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SecureAuthInfo
    {
        [Newtonsoft.Json.JsonProperty("aresTransStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? AresTransStatus { get; set; } = default!;

        /// <summary>
        /// Тип 3DS аутентификации.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("authTypeIndicator", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? AuthTypeIndicator { get; set; } = default!;

        /// <summary>
        /// Электронный коммерческий индикатор. Указан только после оплаты заказа и в случае соответствующего разрешения.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("eci", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Eci { get; set; } = default!;

        /// <summary>
        /// Результат проверки PaRes.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("paResCheckStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? PaResCheckStatus { get; set; } = default!;

        /// <summary>
        /// Параметр указывает, квалифицируется ли транзакция как аутентифицированная транзакция.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("paResStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? PaResStatus { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("rreqTransStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? RreqTransStatus { get; set; } = default!;

        /// <summary>
        /// Блок с информацией о TDS.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("threeDSInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ThreeDSInfo? ThreeDSInfo { get; set; } = default!;

        /// <summary>
        /// Версия 3DS2 протокола.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("threeDsProtocolVersion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ThreeDsProtocolVersion { get; set; } = default!;

        /// <summary>
        /// Параметр указывает, может ли быть аутентифицирован идентификатор учетной записи.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("veResStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? VeResStatus { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ShippingPayerData
    {
        [Newtonsoft.Json.JsonProperty("deliveryEmail", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? DeliveryEmail { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("deliveryTimeframe", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? DeliveryTimeframe { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("shippingAddressLine1", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ShippingAddressLine1 { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("shippingAddressLine2", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ShippingAddressLine2 { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("shippingAddressLine3", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ShippingAddressLine3 { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("shippingCity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ShippingCity { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("shippingCountry", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ShippingCountry { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("shippingMethodIndicator", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ShippingMethodIndicator { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("shippingPostalCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ShippingPostalCode { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("shippingState", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ShippingState { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SingleClickCreateTemplate
    {
        [Newtonsoft.Json.JsonProperty("additionalParams", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<EcomTemplateAdditionParam>? AdditionalParams { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("amount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? Amount { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("commission", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TemplateCommission? Commission { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("currency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Currency { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Description { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("descriptionForClient", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? DescriptionForClient { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("endDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? EndDate { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Name { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("nameForClient", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? NameForClient { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("preAuth", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? PreAuth { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("qrTemplate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public QrTemplate? QrTemplate { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("singlePayment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? SinglePayment { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("startDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? StartDate { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Type { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SingleClickCreateTemplateResponse
    {
        [Newtonsoft.Json.JsonProperty("qrTemplate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public QrTemplateResponse? QrTemplate { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Status { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("templateId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? TemplateId { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SingleClickGetListRequest
    {
        [Newtonsoft.Json.JsonProperty("merchantLogin", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? MerchantLogin { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("password", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Password { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("qrTemplate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public QrTemplate? QrTemplate { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Status { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("username", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Username { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SingleClickGetListResponse
    {
        [Newtonsoft.Json.JsonProperty("error", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ApiError? Error { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Status { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("templates", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<SingleClickListTemplate>? Templates { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SingleClickGetTemplate
    {
        [Newtonsoft.Json.JsonProperty("qrTemplate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public QrTemplate? QrTemplate { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("templateId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? TemplateId { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SingleClickGetTemplateResponse
    {
        [Newtonsoft.Json.JsonProperty("additionalParams", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<EcomTemplateAdditionParam>? AdditionalParams { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("amount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? Amount { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("commission", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TemplateCommission? Commission { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("currency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Currency { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Description { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("descriptionForClient", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? DescriptionForClient { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("endDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? EndDate { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Name { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("nameForClient", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? NameForClient { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("preAuth", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? PreAuth { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("qrTemplate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public QrTemplateResponse? QrTemplate { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("singlePayment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? SinglePayment { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("startDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? StartDate { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Status { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("templateId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? TemplateId { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Type { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SingleClickListTemplate
    {
        [Newtonsoft.Json.JsonProperty("amount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? Amount { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("currency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Currency { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Name { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("qrTemplate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public QrTemplateResponse? QrTemplate { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Status { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("templateId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? TemplateId { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Type { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SingleClickTemplateRequest_SingleClickCreateTemplate
    {
        /// <summary>
        /// Пароль.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("password", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Password { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("template", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SingleClickCreateTemplate? Template { get; set; } = default!;

        /// <summary>
        /// Имя пользователя.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("username", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Username { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SingleClickTemplateRequest_SingleClickGetTemplate
    {
        /// <summary>
        /// Пароль.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("password", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Password { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("template", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SingleClickGetTemplate? Template { get; set; } = default!;

        /// <summary>
        /// Имя пользователя.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("username", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Username { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SingleClickTemplateRequest_SingleClickUpdateTemplate
    {
        /// <summary>
        /// Пароль.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("password", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Password { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("template", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SingleClickUpdateTemplate? Template { get; set; } = default!;

        /// <summary>
        /// Имя пользователя.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("username", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Username { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SingleClickTemplateResponse
    {
        [Newtonsoft.Json.JsonProperty("error", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ApiError? Error { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Status { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("template", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object? Template { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SingleClickTemplateResponse_SingleClickCreateTemplateResponse
    {
        [Newtonsoft.Json.JsonProperty("error", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ApiError? Error { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Status { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("template", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SingleClickCreateTemplateResponse? Template { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SingleClickTemplateResponse_SingleClickGetTemplateResponse
    {
        [Newtonsoft.Json.JsonProperty("error", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ApiError? Error { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Status { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("template", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SingleClickGetTemplateResponse? Template { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SingleClickUpdateTemplate
    {
        [Newtonsoft.Json.JsonProperty("additionalParams", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<EcomTemplateAdditionParam>? AdditionalParams { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("amount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? Amount { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("commission", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TemplateCommission? Commission { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("currency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Currency { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Description { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("descriptionForClient", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? DescriptionForClient { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("endDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? EndDate { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("isFreeAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsFreeAmount { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("isIndefinite", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsIndefinite { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Name { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("nameForClient", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? NameForClient { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("preAuth", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? PreAuth { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("qrTemplate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public QrTemplate? QrTemplate { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("singlePayment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? SinglePayment { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("startDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? StartDate { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public SingleClickUpdateTemplateStatus? Status { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("templateId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? TemplateId { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Type { get; set; } = default!;

    }

    /// <summary>
    /// Дополнительный блок с атрибутами описания налога.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Tax
    {
        /// <summary>
        /// Сумма налога, высчитанная продавцом. Указывается в минимальных единицах валюты.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("taxSum", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? TaxSum { get; set; } = default!;

        /// <summary>
        /// Ставка НДС, доступны следующие значения: &lt;br&gt;0 – без НДС; &lt;br&gt;1 – НДС по ставке 0%; &lt;br&gt;2 – НДС чека по ставке 10%; &lt;br&gt;3 – НДС чека по ставке 18%; &lt;br&gt;4 – НДС чека по расчётной ставке 10/110; &lt;br&gt;5 – НДС чека по расчётной ставке 18/118; &lt;br&gt;6 - НДС чека по ставке 20%; &lt;br&gt;7 – НДС чека по расчётной ставке 20/120.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("taxType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TaxType { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TemplateCommission
    {
        [Newtonsoft.Json.JsonProperty("feeMax", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? FeeMax { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("feeMin", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? FeeMin { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("feePercentage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? FeePercentage { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("fixedAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? FixedAmount { get; set; } = default!;

    }

    /// <summary>
    /// Блок с информацией о TDS.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ThreeDSInfo
    {
        /// <summary>
        /// Значение проверки подлинности владельца карты.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cavv", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Cavv { get; set; } = default!;

        /// <summary>
        /// Идентификатор транзакции определяемый продавцом.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("xid", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Xid { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UpdateSbpTemplateRequest
    {
        /// <summary>
        /// Канал продажи.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("distributionChannel", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? DistributionChannel { get; set; } = default!;

        /// <summary>
        /// Дата окончания действия шаблона.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("endDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? EndDate { get; set; } = default!;

        /// <summary>
        /// Название шаблона.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Name { get; set; } = default!;

        /// <summary>
        /// Пароль.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("password", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Password { get; set; } = default!;

        /// <summary>
        /// Дополнительная информация от TSP.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("paymentPurpose", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? PaymentPurpose { get; set; } = default!;

        /// <summary>
        /// Дата начала действия шаблона.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("startDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? StartDate { get; set; } = default!;

        /// <summary>
        /// Статус шаблона.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public UpdateSbpTemplateRequestStatus? Status { get; set; } = default!;

        /// <summary>
        /// id шаблона.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("templateId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? TemplateId { get; set; } = default!;

        /// <summary>
        /// Имя пользователя.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("username", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Username { get; set; } = default!;

    }

    /// <summary>
    /// Блок OrderResult.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class VerifyCardResponse
    {
        [Newtonsoft.Json.JsonProperty("acsUrl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? AcsUrl { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("actionCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ActionCode { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("actionCodeDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ActionCodeDescription { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("amount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? Amount { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("authCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? AuthCode { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("currency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Currency { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("eci", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Eci { get; set; } = default!;

        /// <summary>
        /// Код результата выполнения запроса.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("errorCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ErrorCode { get; set; } = default!;

        /// <summary>
        /// Описание полученного кода результата.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("errorMessage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ErrorMessage { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("externalId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ExternalId { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("feUtrnno", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? FeUtrnno { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("is3DSVer2", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Is3DSVer2 { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("orderId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? OrderId { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("orderNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? OrderNumber { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("paReq", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? PaReq { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("packedCReq", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? PackedCReq { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("rrn", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Rrn { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("termUrl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? TermUrl { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("threeDSAcsRefNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ThreeDSAcsRefNumber { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("threeDSAcsSignedContent", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ThreeDSAcsSignedContent { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("threeDSAcsTransactionId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ThreeDSAcsTransactionId { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("threeDSDsTransID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ThreeDSDsTransID { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("threeDSMethodDataPacked", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ThreeDSMethodDataPacked { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("threeDSMethodURL", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ThreeDSMethodURL { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("threeDSMethodURLServer", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ThreeDSMethodURLServer { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("threeDSMethodURLServerDirect", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ThreeDSMethodURLServerDirect { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("threeDSSDKKey", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ThreeDSSDKKey { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("threeDSServerTransId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ThreeDSServerTransId { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("time", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? Time { get; set; } = default!;

        /// <summary>
        /// Сообщение пользователю с описанием кода результата.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("userMessage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? UserMessage { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class VerifyEnrollmentResult
    {
        /// <summary>
        /// Код страны банка-эмитента.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("emitterCountryCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? EmitterCountryCode { get; set; } = default!;

        /// <summary>
        /// Наименование банка-эмитента.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("emitterName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? EmitterName { get; set; } = default!;

        /// <summary>
        /// Признак вовлечённости карты в 3DS. Возможные значения: Y, N, U.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("enrolled", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Enrolled { get; set; } = default!;

        /// <summary>
        /// Код результата выполнения запроса.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("errorCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ErrorCode { get; set; } = default!;

        /// <summary>
        /// Описание полученного кода результата.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("errorMessage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ErrorMessage { get; set; } = default!;

        /// <summary>
        /// Признак вовлечённости по протоколу 3DS2
        /// </summary>
        [Newtonsoft.Json.JsonProperty("is3DSVer2", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Is3DSVer2 { get; set; } = default!;

        /// <summary>
        /// Сообщение пользователю с описанием кода результата.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("userMessage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? UserMessage { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class YandexPayDirectRequestRest
    {
        [Newtonsoft.Json.JsonProperty("additionalOfdParams", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<AdditionalOfdParam>? AdditionalOfdParams { get; set; } = default!;

        /// <summary>
        /// Дополнительные параметры заказа, которые сохраняются для просмотра из личного кабинета продавца. Дополнительные параметры следует указывать в следующем формате: &lt;br&gt;"имя параметра": "значение параметра". &lt;br&gt;Каждую новую пару имени и значения параметра следует отделять запятой.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("additionalParameters", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, string>? AdditionalParameters { get; set; } = default!;

        /// <summary>
        /// Сумма платежа в минимальный единицах валюты (например, в копейках).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("amount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? Amount { get; set; } = default!;

        /// <summary>
        /// Регистрационный адрес клиента, заданный при регистрации карты в Банке Эмитенте.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("billingPayerData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BillingPayerData? BillingPayerData { get; set; } = default!;

        /// <summary>
        /// Объект, содержащий информацию о браузере клиента
        /// </summary>
        [Newtonsoft.Json.JsonProperty("clientBrowserInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ClientBrowserInfo? ClientBrowserInfo { get; set; } = default!;

        /// <summary>
        /// Номер клиента, для которого следует создать связку для проведения регулярных платежей. Следует указывать, только если проводится технический платёж для последующих регулярных платежей.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("clientId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ClientId { get; set; } = default!;

        /// <summary>
        /// Цифровой код валюты платежа ISO 4217. Если не указан, считается равным 643 (российский рубль).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("currencyCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? CurrencyCode { get; set; } = default!;

        /// <summary>
        /// Описание заказа.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Description { get; set; } = default!;

        /// <summary>
        /// Адрес для callback вызовов (необходима дополнительная настройка мерчанта).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("dynamicCallbackUrl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? DynamicCallbackUrl { get; set; } = default!;

        /// <summary>
        /// Адрес электронной почты. Обязателен, если у интернет-магазина настроена фискализация и не указан номер телефона.&lt;br&gt;Тип: ANS..40
        /// </summary>
        [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Email { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("externalScaExemptionIndicator", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ExternalScaExemptionIndicator { get; set; } = default!;

        /// <summary>
        /// Адрес, на который требуется перенаправить пользователя в случае неуспешной оплаты. Адрес должен быть указан полностью, включая используемый протокол (например, https://test.ru вместо test.ru). В противном случае пользователь будет перенаправлен по адресу следующего вида: http://&lt;адрес_платёжного_шлюза&gt;/&lt;адрес_продавца&gt;.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("failUrl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? FailUrl { get; set; } = default!;

        /// <summary>
        /// Контейнер для параметра feature.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("features", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public System.Collections.Generic.ICollection<features3>? Features { get; set; } = default!;

        /// <summary>
        /// Размер комиссии мерчанта в минимальных единицах валюты.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("feeInput", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? FeeInput { get; set; } = default!;

        /// <summary>
        /// IP-адрес пользователя, который оплачивал заказ.&lt;br&gt;Тип: ANS..39
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ip", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Ip { get; set; } = default!;

        /// <summary>
        /// Язык в кодировке ISO 639-1. Если не указан, будет использован язык, указанный в настройках магазина как язык по умолчанию.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("language", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Language { get; set; } = default!;

        /// <summary>
        /// Имя входа продавца в системе платёжного шлюза.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("merchant", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Merchant { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("orderBundle", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OrderBundle? OrderBundle { get; set; } = default!;

        /// <summary>
        /// Уникальный номер заказа на стороне продавца.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("orderNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? OrderNumber { get; set; } = default!;

        /// <summary>
        /// Пароль пользователя с доступом к API платёжного шлюза.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("password", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Password { get; set; } = default!;

        /// <summary>
        /// Токен, полученный от Yandex Pay и закодированный в Base64. Тип: AN..8192
        /// </summary>
        [Newtonsoft.Json.JsonProperty("paymentToken", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? PaymentToken { get; set; } = default!;

        /// <summary>
        /// Номер телефона. Обязателен, если у интернет-магазина настроена фискализация и не указан адрес электронной почты.&lt;br&gt;Тип: ANS.12
        /// </summary>
        [Newtonsoft.Json.JsonProperty("phone", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Phone { get; set; } = default!;

        /// <summary>
        /// Адрес для доставки.&lt;br&gt;Тип: AN..512.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("postAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? PostAddress { get; set; } = default!;

        /// <summary>
        /// Параметр, определяющий необходимость предварительной авторизации (блокирования средств на счету клиента до их списания). Доступны следующие значения: &lt;br&gt;true (истина) - параметр включён, оплата происходит с предавторизацией (происходит блокирование средств клиента до списания); &lt;br&gt;false (ложь) - параметр выключен (списание происходит сразу).  &lt;br&gt;Если параметр не указан в запросе, списание происходит сразу.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("preAuth", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? PreAuth { get; set; } = default!;

        /// <summary>
        /// Адрес, на который требуется перенаправить пользователя в случае успешной оплаты. Адрес должен быть указан полностью, включая используемый протокол (например, https://test.ru вместо test.ru). В противном случае пользователь будет перенаправлен по адресу следующего вида: http://&lt;адрес_платёжного_шлюза&gt;/&lt;адрес_продавца&gt;.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("returnUrl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ReturnUrl { get; set; } = default!;

        /// <summary>
        /// Система налогообложения, доступны следующие значения: &lt;br&gt;0 - общая; &lt;br&gt;1 - упрощённая, доход; &lt;br&gt;2 - упрощённая, доход минус расход; &lt;br&gt;3 - единый налог на вменённый доход; &lt;br&gt;4 - единый сельскохозяйственный налог; &lt;br&gt;5 - патентная система налогообложения.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("taxSystem", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TaxSystem { get; set; } = default!;

        /// <summary>
        /// Адрес для отправки уведомления о прохождении проверки 3D Secure.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("threeDSMethodNotificationUrl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ThreeDSMethodNotificationUrl { get; set; } = default!;

        /// <summary>
        /// Используется ли 3DS2 SDK.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("threeDSSDK", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ThreeDSSDK { get; set; } = default!;

        /// <summary>
        /// Идентификатор приложения SDK.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("threeDSSDKAppId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ThreeDSSDKAppId { get; set; } = default!;

        /// <summary>
        /// Зашифрованная информация об устройстве (если используется SDK).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("threeDSSDKEncData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ThreeDSSDKEncData { get; set; } = default!;

        /// <summary>
        /// Ключ для обмена CReq/CRes (если используется SDK).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("threeDSSDKEphemPubKey", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ThreeDSSDKEphemPubKey { get; set; } = default!;

        /// <summary>
        /// SDK Reference Number (если используется SDK).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("threeDSSDKReferenceNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ThreeDSSDKReferenceNumber { get; set; } = default!;

        /// <summary>
        /// Идентификатор транзакции внутри SDK.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("threeDSSDKTransId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ThreeDSSDKTransId { get; set; } = default!;

        /// <summary>
        /// Идентификатор, назначаемый транзакции 3DS Server’ом.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("threeDSServerTransId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ThreeDSServerTransId { get; set; } = default!;

        /// <summary>
        /// Адрес финиша транзакции, назначаемый 3DS Server’ом.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("threeDSVer2FinishUrl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ThreeDSVer2FinishUrl { get; set; } = default!;

        /// <summary>
        /// Номер заказа, назначаемый транзакции 3DS Server’ом.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("threeDSVer2MdOrder", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ThreeDSVer2MdOrder { get; set; } = default!;

        /// <summary>
        /// Transaction Initializing Indicator.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("tii", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Tii { get; set; } = default!;

        /// <summary>
        /// Имя пользователя с доступом к API платёжного шлюза.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("username", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Username { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class YandexPayInstantPaymentRequestRest
    {
        [Newtonsoft.Json.JsonProperty("additionalOfdParams", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<AdditionalOfdParam>? AdditionalOfdParams { get; set; } = default!;

        /// <summary>
        /// Дополнительные параметры заказа, которые сохраняются для просмотра из личного кабинета продавца. Дополнительные параметры следует указывать в следующем формате: &lt;br&gt;"имя параметра": "значение параметра". &lt;br&gt;Каждую новую пару имени и значения параметра следует отделять запятой.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("additionalParameters", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, string>? AdditionalParameters { get; set; } = default!;

        /// <summary>
        /// Сумма платежа в минимальный единицах валюты (например, в копейках).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("amount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? Amount { get; set; } = default!;

        /// <summary>
        /// Регистрационный адрес клиента, заданный при регистрации карты в Банке Эмитенте.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("billingPayerData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BillingPayerData? BillingPayerData { get; set; } = default!;

        /// <summary>
        /// Объект, содержащий информацию о браузере клиента
        /// </summary>
        [Newtonsoft.Json.JsonProperty("clientBrowserInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ClientBrowserInfo? ClientBrowserInfo { get; set; } = default!;

        /// <summary>
        /// Номер клиента, для которого следует создать связку для проведения регулярных платежей. Следует указывать, только если проводится технический платёж для последующих регулярных платежей.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("clientId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ClientId { get; set; } = default!;

        /// <summary>
        /// Цифровой код валюты платежа ISO 4217. Если не указан, считается равным 643 (российский рубль).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("currencyCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? CurrencyCode { get; set; } = default!;

        /// <summary>
        /// Описание заказа.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Description { get; set; } = default!;

        /// <summary>
        /// Адрес для callback вызовов (необходима дополнительная настройка мерчанта).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("dynamicCallbackUrl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? DynamicCallbackUrl { get; set; } = default!;

        /// <summary>
        /// Адрес электронной почты. Обязателен, если у интернет-магазина настроена фискализация и не указан номер телефона.&lt;br&gt;Тип: ANS..40
        /// </summary>
        [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Email { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("externalScaExemptionIndicator", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ExternalScaExemptionIndicator { get; set; } = default!;

        /// <summary>
        /// Адрес, на который требуется перенаправить пользователя в случае неуспешной оплаты. Адрес должен быть указан полностью, включая используемый протокол (например, https://test.ru вместо test.ru). В противном случае пользователь будет перенаправлен по адресу следующего вида: http://&lt;адрес_платёжного_шлюза&gt;/&lt;адрес_продавца&gt;.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("failUrl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? FailUrl { get; set; } = default!;

        /// <summary>
        /// Контейнер для параметра feature.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("features", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public System.Collections.Generic.ICollection<features4>? Features { get; set; } = default!;

        /// <summary>
        /// Размер комиссии мерчанта в минимальных единицах валюты.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("feeInput", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? FeeInput { get; set; } = default!;

        /// <summary>
        /// IP-адрес пользователя, который оплачивал заказ.&lt;br&gt;Тип: ANS..39
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ip", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Ip { get; set; } = default!;

        /// <summary>
        /// Язык в кодировке ISO 639-1. Если не указан, будет использован язык, указанный в настройках магазина как язык по умолчанию.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("language", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Language { get; set; } = default!;

        /// <summary>
        /// Имя входа продавца в системе платёжного шлюза.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("merchant", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Merchant { get; set; } = default!;

        /// <summary>
        /// Логин дочернего Мерчанта для регистрации заказа от его имени.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("merchantLogin", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? MerchantLogin { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("orderBundle", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OrderBundle? OrderBundle { get; set; } = default!;

        /// <summary>
        /// Уникальный номер заказа на стороне продавца.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("orderNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? OrderNumber { get; set; } = default!;

        /// <summary>
        /// Пароль пользователя с доступом к API платёжного шлюза.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("password", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Password { get; set; } = default!;

        /// <summary>
        /// Токен, полученный от Yandex Pay и закодированный в Base64. Тип: AN..8192
        /// </summary>
        [Newtonsoft.Json.JsonProperty("paymentToken", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? PaymentToken { get; set; } = default!;

        /// <summary>
        /// Номер телефона. Обязателен, если у интернет-магазина настроена фискализация и не указан адрес электронной почты.&lt;br&gt;Тип: ANS.12
        /// </summary>
        [Newtonsoft.Json.JsonProperty("phone", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Phone { get; set; } = default!;

        /// <summary>
        /// Адрес для доставки.&lt;br&gt;Тип: AN..512.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("postAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? PostAddress { get; set; } = default!;

        /// <summary>
        /// Параметр, определяющий необходимость предварительной авторизации (блокирования средств на счету клиента до их списания). Доступны следующие значения: &lt;br&gt;true (истина) - параметр включён, оплата происходит с предавторизацией (происходит блокирование средств клиента до списания); &lt;br&gt;false (ложь) - параметр выключен (списание происходит сразу).  &lt;br&gt;Если параметр не указан в запросе, списание происходит сразу.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("preAuth", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? PreAuth { get; set; } = default!;

        /// <summary>
        /// Адрес, на который требуется перенаправить пользователя в случае успешной оплаты. Адрес должен быть указан полностью, включая используемый протокол (например, https://test.ru вместо test.ru). В противном случае пользователь будет перенаправлен по адресу следующего вида: http://&lt;адрес_платёжного_шлюза&gt;/&lt;адрес_продавца&gt;.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("returnUrl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ReturnUrl { get; set; } = default!;

        /// <summary>
        /// Система налогообложения, доступны следующие значения: &lt;br&gt;0 - общая; &lt;br&gt;1 - упрощённая, доход; &lt;br&gt;2 - упрощённая, доход минус расход; &lt;br&gt;3 - единый налог на вменённый доход; &lt;br&gt;4 - единый сельскохозяйственный налог; &lt;br&gt;5 - патентная система налогообложения.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("taxSystem", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TaxSystem { get; set; } = default!;

        /// <summary>
        /// Адрес для отправки уведомления о прохождении проверки 3D Secure.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("threeDSMethodNotificationUrl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ThreeDSMethodNotificationUrl { get; set; } = default!;

        /// <summary>
        /// Используется ли 3DS2 SDK.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("threeDSSDK", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ThreeDSSDK { get; set; } = default!;

        /// <summary>
        /// Идентификатор приложения SDK.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("threeDSSDKAppId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ThreeDSSDKAppId { get; set; } = default!;

        /// <summary>
        /// Зашифрованная информация об устройстве (если используется SDK).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("threeDSSDKEncData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ThreeDSSDKEncData { get; set; } = default!;

        /// <summary>
        /// Ключ для обмена CReq/CRes (если используется SDK).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("threeDSSDKEphemPubKey", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ThreeDSSDKEphemPubKey { get; set; } = default!;

        /// <summary>
        /// SDK Reference Number (если используется SDK).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("threeDSSDKReferenceNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ThreeDSSDKReferenceNumber { get; set; } = default!;

        /// <summary>
        /// Идентификатор транзакции внутри SDK.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("threeDSSDKTransId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ThreeDSSDKTransId { get; set; } = default!;

        /// <summary>
        /// Идентификатор, назначаемый транзакции 3DS Server’ом.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("threeDSServerTransId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ThreeDSServerTransId { get; set; } = default!;

        /// <summary>
        /// Адрес финиша транзакции, назначаемый 3DS Server’ом.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("threeDSVer2FinishUrl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ThreeDSVer2FinishUrl { get; set; } = default!;

        /// <summary>
        /// Номер заказа, назначаемый транзакции 3DS Server’ом.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("threeDSVer2MdOrder", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ThreeDSVer2MdOrder { get; set; } = default!;

        /// <summary>
        /// Transaction Initializing Indicator.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("tii", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Tii { get; set; } = default!;

        /// <summary>
        /// Имя пользователя с доступом к API платёжного шлюза.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("username", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Username { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class YandexPayPaymentRequestRest
    {
        /// <summary>
        /// Дополнительные параметры заказа, которые сохраняются для просмотра из личного кабинета продавца. Дополнительные параметры следует указывать в следующем формате: &lt;br&gt;"имя параметра": "значение параметра". &lt;br&gt;Каждую новую пару имени и значения параметра следует отделять запятой.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("additionalParameters", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, string>? AdditionalParameters { get; set; } = default!;

        /// <summary>
        /// Регистрационный адрес клиента, заданный при регистрации карты в Банке Эмитенте.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("billingPayerData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BillingPayerData? BillingPayerData { get; set; } = default!;

        /// <summary>
        /// Объект, содержащий информацию о браузере клиента
        /// </summary>
        [Newtonsoft.Json.JsonProperty("clientBrowserInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ClientBrowserInfo? ClientBrowserInfo { get; set; } = default!;

        /// <summary>
        /// Адрес электронной почты. Обязателен, если у интернет-магазина настроена фискализация и не указан номер телефона.&lt;br&gt;Тип: ANS..40
        /// </summary>
        [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Email { get; set; } = default!;

        /// <summary>
        /// Размер комиссии мерчанта в минимальных единицах валюты.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("feeInput", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? FeeInput { get; set; } = default!;

        /// <summary>
        /// IP-адрес пользователя, который оплачивал заказ.&lt;br&gt;Тип: ANS..39
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ip", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Ip { get; set; } = default!;

        /// <summary>
        /// Язык в кодировке ISO 639-1. Если не указан, будет использован язык, указанный в настройках магазина как язык по умолчанию.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("language", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Language { get; set; } = default!;

        /// <summary>
        /// Номер заказа в платежной системе. Уникален в пределах системы.&lt;br&gt;Тип: ANS36
        /// </summary>
        [Newtonsoft.Json.JsonProperty("orderId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? OrderId { get; set; } = default!;

        /// <summary>
        /// Пароль пользователя с доступом к API платёжного шлюза.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("password", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Password { get; set; } = default!;

        /// <summary>
        /// Токен, полученный от Yandex Pay и закодированный в Base64. Тип: AN..8192
        /// </summary>
        [Newtonsoft.Json.JsonProperty("paymentToken", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? PaymentToken { get; set; } = default!;

        /// <summary>
        /// Номер телефона. Обязателен, если у интернет-магазина настроена фискализация и не указан адрес электронной почты.&lt;br&gt;Тип: ANS.12
        /// </summary>
        [Newtonsoft.Json.JsonProperty("phone", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Phone { get; set; } = default!;

        /// <summary>
        /// Адрес для доставки.&lt;br&gt;Тип: AN..512.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("postAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? PostAddress { get; set; } = default!;

        /// <summary>
        /// Адрес для отправки уведомления о прохождении проверки 3D Secure.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("threeDSMethodNotificationUrl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ThreeDSMethodNotificationUrl { get; set; } = default!;

        /// <summary>
        /// Используется ли 3DS2 SDK.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("threeDSSDK", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ThreeDSSDK { get; set; } = default!;

        /// <summary>
        /// Идентификатор приложения SDK.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("threeDSSDKAppId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ThreeDSSDKAppId { get; set; } = default!;

        /// <summary>
        /// Зашифрованная информация об устройстве (если используется SDK).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("threeDSSDKEncData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ThreeDSSDKEncData { get; set; } = default!;

        /// <summary>
        /// Ключ для обмена CReq/CRes (если используется SDK).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("threeDSSDKEphemPubKey", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ThreeDSSDKEphemPubKey { get; set; } = default!;

        /// <summary>
        /// SDK Reference Number (если используется SDK).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("threeDSSDKReferenceNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ThreeDSSDKReferenceNumber { get; set; } = default!;

        /// <summary>
        /// Идентификатор транзакции внутри SDK.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("threeDSSDKTransId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ThreeDSSDKTransId { get; set; } = default!;

        /// <summary>
        /// Идентификатор, назначаемый транзакции 3DS Server’ом.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("threeDSServerTransId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ThreeDSServerTransId { get; set; } = default!;

        /// <summary>
        /// Адрес финиша транзакции, назначаемый 3DS Server’ом.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("threeDSVer2FinishUrl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ThreeDSVer2FinishUrl { get; set; } = default!;

        /// <summary>
        /// Номер заказа, назначаемый транзакции 3DS Server’ом.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("threeDSVer2MdOrder", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ThreeDSVer2MdOrder { get; set; } = default!;

        /// <summary>
        /// Transaction Initializing Indicator.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("tii", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Tii { get; set; } = default!;

        /// <summary>
        /// Имя пользователя с доступом к API платёжного шлюза.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("username", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Username { get; set; } = default!;

    }

    /// <summary>
    /// Блок YandexPayResponse.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class YandexPayResponse
    {
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public YandexPayResponseData? Data { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("error", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public YandexPayResponseError? Error { get; set; } = default!;

        /// <summary>
        /// Флаг успеха операции.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("success", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Success { get; set; } = default!;

    }

    /// <summary>
    /// Блок YandexPayResponseData.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class YandexPayResponseData
    {
        /// <summary>
        /// При успешном ответе в случае 3DS-платежа. URL для перехода на ACS.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("acsUrl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? AcsUrl { get; set; } = default!;

        /// <summary>
        /// Идентификатор связки созданной при оплате заказа или использованной для оплаты. Присутствует только если магазину разрешено создание связок.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("bindingId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? BindingId { get; set; } = default!;

        /// <summary>
        /// Флаг, обозначающий то, что операция идет по 3ds2.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("is3DSVer2", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Is3DSVer2 { get; set; } = default!;

        /// <summary>
        /// Номер заказа в платежной системе. Уникален в пределах системы.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("orderId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? OrderId { get; set; } = default!;

        /// <summary>
        /// При успешном ответе в случае 3DS-платежа. Payment Authentication Request.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("paReq", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? PaReq { get; set; } = default!;

        /// <summary>
        /// Сообщение CReq инициирует взаимодействие с держателем карты в потоке вызовов и может использоваться для передачи аутентификационных данных от держателя карты.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("packedCReq", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? PackedCReq { get; set; } = default!;

        /// <summary>
        /// URL-адрес для перенаправления клиента.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("redirectUrl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? RedirectUrl { get; set; } = default!;

        /// <summary>
        /// При успешном ответе в случае 3DS-платежа. URL для возврата с ACS.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("termUrl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? TermUrl { get; set; } = default!;

        /// <summary>
        /// Регистрационный номер ACS (необходим при использовании SDK).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("threeDSAcsRefNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ThreeDSAcsRefNumber { get; set; } = default!;

        /// <summary>
        /// Подписанный URL до ACS c ключами (необходим при использовании SDK).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("threeDSAcsSignedContent", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ThreeDSAcsSignedContent { get; set; } = default!;

        /// <summary>
        /// Идентификтатор транзакции внутри ACS (необходим при использовании SDK).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("threeDSAcsTransactionId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ThreeDSAcsTransactionId { get; set; } = default!;

        /// <summary>
        /// Идентификтатор транзакции в МПС (необходим при использовании SDK).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("threeDSDsTransID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ThreeDSDsTransID { get; set; } = default!;

        /// <summary>
        /// Данные в Base64, которые необходимо передать в ACS в случае 3DS Method (содержит notificationUrl и threeDSServerTransID).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("threeDSMethodDataPacked", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ThreeDSMethodDataPacked { get; set; } = default!;

        /// <summary>
        /// Адрес ACS для сбора данных о браузере для 3DS Method.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("threeDSMethodURL", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ThreeDSMethodURL { get; set; } = default!;

        /// <summary>
        /// Адрес 3DS Server для сбора данных о браузере для 3DS Method и AReq.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("threeDSMethodURLServer", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ThreeDSMethodURLServer { get; set; } = default!;

        /// <summary>
        /// Ссылка на метод для проведения 3DS Method через платежный шлюз.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("threeDSMethodURLServerDirect", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ThreeDSMethodURLServerDirect { get; set; } = default!;

        /// <summary>
        /// Ключ для шифрования данных об устройстве в случае использования 3DS2 SDK.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("threeDSSDKKey", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ThreeDSSDKKey { get; set; } = default!;

        /// <summary>
        /// Идентификатор, назначаемый транзакции 3DS Server’ом.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("threeDSServerTransId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ThreeDSServerTransId { get; set; } = default!;

        /// <summary>
        /// Идентификатор транзакции в платежной системе по отношению к выполняемой операции по связке. Присутствует только если магазину разрешено создание связок.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("transactionId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? TransactionId { get; set; } = default!;

    }

    /// <summary>
    /// Блок ошибок.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class YandexPayResponseError
    {
        /// <summary>
        /// Код ошибки.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Code { get; set; } = default!;

        /// <summary>
        /// Техническое описание ошибки.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Description { get; set; } = default!;

        /// <summary>
        /// Описание ошибки для клиента.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("displayErrorMessage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? DisplayErrorMessage { get; set; } = default!;

        /// <summary>
        /// Описание ошибки.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Message { get; set; } = default!;

    }

    /// <summary>
    /// Возможно использование следующих значений: &lt;br&gt;AUTO_PAYMENT - Если запрос на регистрацию заказа инициирует проведение автоплатежей. &lt;br&gt;VERIFY - Если указать это значение после запроса на регистрацию заказа произойдёт верификация держателя карты без списания средств с его счёта, поэтому в запросе можно передавать нулевую сумму.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Features
    {

        [System.Runtime.Serialization.EnumMember(Value = @"FIXED_BINDING")]
        FIXED_BINDING = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"BINDING_NOT_NEEDED")]
        BINDING_NOT_NEEDED = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"FIXED_BONUS_AMOUNT")]
        FIXED_BONUS_AMOUNT = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"FORCE_TDS")]
        FORCE_TDS = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"FORCE_SSL")]
        FORCE_SSL = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"FRAUD_FORCE_TDS")]
        FRAUD_FORCE_TDS = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"FRAUD_FORCE_SSL")]
        FRAUD_FORCE_SSL = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"PAYMENT_WAY_FORCE_TDS")]
        PAYMENT_WAY_FORCE_TDS = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"PAYMENT_WAY_FORCE_SSL")]
        PAYMENT_WAY_FORCE_SSL = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"AUTO_PAYMENT")]
        AUTO_PAYMENT = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"FORCE_NO_CVC")]
        FORCE_NO_CVC = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"FORCE_FULL_TDS")]
        FORCE_FULL_TDS = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"VERIFY")]
        VERIFY = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"SKIP_VERIFY")]
        SKIP_VERIFY = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"SKIP_PAYER_EMAIL_NOTIFY")]
        SKIP_PAYER_EMAIL_NOTIFY = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"SKIP_PAYER_PHONE_NOTIFY")]
        SKIP_PAYER_PHONE_NOTIFY = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"SKIP_PAYER_CREATE_NOTIFY")]
        SKIP_PAYER_CREATE_NOTIFY = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"FORCE_GENERATE_ORDERNUMBER")]
        FORCE_GENERATE_ORDERNUMBER = 17,

        [System.Runtime.Serialization.EnumMember(Value = @"ORDER_NUMBER_EXPLICIT_INDICATION")]
        ORDER_NUMBER_EXPLICIT_INDICATION = 18,

        [System.Runtime.Serialization.EnumMember(Value = @"PAY_BY_CLIENT")]
        PAY_BY_CLIENT = 19,

        [System.Runtime.Serialization.EnumMember(Value = @"WITHOUT_FROM_CARD")]
        WITHOUT_FROM_CARD = 20,

        [System.Runtime.Serialization.EnumMember(Value = @"WITHOUT_TO_CARD")]
        WITHOUT_TO_CARD = 21,

        [System.Runtime.Serialization.EnumMember(Value = @"REVERSE_AFTER_RECURRENT_INITIALIZE")]
        REVERSE_AFTER_RECURRENT_INITIALIZE = 22,

        [System.Runtime.Serialization.EnumMember(Value = @"NEW_TRANSPORT_CARD")]
        NEW_TRANSPORT_CARD = 23,

        [System.Runtime.Serialization.EnumMember(Value = @"SBOL_PAYMENT")]
        SBOL_PAYMENT = 24,

        [System.Runtime.Serialization.EnumMember(Value = @"SBOL_OTP_PAYMENT")]
        SBOL_OTP_PAYMENT = 25,

        [System.Runtime.Serialization.EnumMember(Value = @"FORCE_PSE")]
        FORCE_PSE = 26,

        [System.Runtime.Serialization.EnumMember(Value = @"FORCE_EFECTY")]
        FORCE_EFECTY = 27,

        [System.Runtime.Serialization.EnumMember(Value = @"FORCE_QR")]
        FORCE_QR = 28,

        [System.Runtime.Serialization.EnumMember(Value = @"FORCE_P2P_DEBIT")]
        FORCE_P2P_DEBIT = 29,

        [System.Runtime.Serialization.EnumMember(Value = @"FIXED_TIPS")]
        FIXED_TIPS = 30,

        [System.Runtime.Serialization.EnumMember(Value = @"BNPL")]
        BNPL = 31,

        [System.Runtime.Serialization.EnumMember(Value = @"FORCE_REDIRECT_TO_URL")]
        FORCE_REDIRECT_TO_URL = 32,

        [System.Runtime.Serialization.EnumMember(Value = @"FORCE_CREATE_BINDING")]
        FORCE_CREATE_BINDING = 33,

        [System.Runtime.Serialization.EnumMember(Value = @"FORCE_PAYMENT_WAY")]
        FORCE_PAYMENT_WAY = 34,

        [System.Runtime.Serialization.EnumMember(Value = @"SKIP_UNSUCCESSFUL_PAYMENT_CALLBACK")]
        SKIP_UNSUCCESSFUL_PAYMENT_CALLBACK = 35,

        [System.Runtime.Serialization.EnumMember(Value = @"OVERRIDE_CLIENT_ID")]
        OVERRIDE_CLIENT_ID = 36,

        [System.Runtime.Serialization.EnumMember(Value = @"RECURRENT_PAYMENT")]
        RECURRENT_PAYMENT = 37,

        [System.Runtime.Serialization.EnumMember(Value = @"ACS_IN_IFRAME")]
        ACS_IN_IFRAME = 38,

        [System.Runtime.Serialization.EnumMember(Value = @"SBP_BINDING")]
        SBP_BINDING = 39,

    }

    /// <summary>
    /// По значению данного параметра определяется, какие страницы платёжного интерфейса должны загружаться для клиента. &lt;br&gt;Если параметр отсутствует, либо не соответствует формату, то по умолчанию считается pageView=DESKTOP. &lt;br&gt;Тип: ANS..20
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum PageView
    {

        [System.Runtime.Serialization.EnumMember(Value = @"DESKTOP")]
        DESKTOP = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"MOBILE")]
        MOBILE = 1,

    }

    /// <summary>
    /// По значению данного параметра определяется, какие страницы платёжного интерфейса должны загружаться для клиента. &lt;br&gt;Если параметр отсутствует, либо не соответствует формату, то по умолчанию считается pageView=DESKTOP. &lt;br&gt;Тип: ANS..20
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum PageView2
    {

        [System.Runtime.Serialization.EnumMember(Value = @"DESKTOP")]
        DESKTOP = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"MOBILE")]
        MOBILE = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum AgentType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"1")]
        _1 = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"2")]
        _2 = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"3")]
        _3 = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"4")]
        _4 = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"5")]
        _5 = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"6")]
        _6 = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"7")]
        _7 = 6,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum features
    {

        [System.Runtime.Serialization.EnumMember(Value = @"FIXED_BINDING")]
        FIXED_BINDING = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"BINDING_NOT_NEEDED")]
        BINDING_NOT_NEEDED = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"FIXED_BONUS_AMOUNT")]
        FIXED_BONUS_AMOUNT = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"FORCE_TDS")]
        FORCE_TDS = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"FORCE_SSL")]
        FORCE_SSL = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"FRAUD_FORCE_TDS")]
        FRAUD_FORCE_TDS = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"FRAUD_FORCE_SSL")]
        FRAUD_FORCE_SSL = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"PAYMENT_WAY_FORCE_TDS")]
        PAYMENT_WAY_FORCE_TDS = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"PAYMENT_WAY_FORCE_SSL")]
        PAYMENT_WAY_FORCE_SSL = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"AUTO_PAYMENT")]
        AUTO_PAYMENT = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"FORCE_NO_CVC")]
        FORCE_NO_CVC = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"FORCE_FULL_TDS")]
        FORCE_FULL_TDS = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"VERIFY")]
        VERIFY = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"SKIP_VERIFY")]
        SKIP_VERIFY = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"SKIP_PAYER_EMAIL_NOTIFY")]
        SKIP_PAYER_EMAIL_NOTIFY = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"SKIP_PAYER_PHONE_NOTIFY")]
        SKIP_PAYER_PHONE_NOTIFY = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"SKIP_PAYER_CREATE_NOTIFY")]
        SKIP_PAYER_CREATE_NOTIFY = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"FORCE_GENERATE_ORDERNUMBER")]
        FORCE_GENERATE_ORDERNUMBER = 17,

        [System.Runtime.Serialization.EnumMember(Value = @"ORDER_NUMBER_EXPLICIT_INDICATION")]
        ORDER_NUMBER_EXPLICIT_INDICATION = 18,

        [System.Runtime.Serialization.EnumMember(Value = @"PAY_BY_CLIENT")]
        PAY_BY_CLIENT = 19,

        [System.Runtime.Serialization.EnumMember(Value = @"WITHOUT_FROM_CARD")]
        WITHOUT_FROM_CARD = 20,

        [System.Runtime.Serialization.EnumMember(Value = @"WITHOUT_TO_CARD")]
        WITHOUT_TO_CARD = 21,

        [System.Runtime.Serialization.EnumMember(Value = @"REVERSE_AFTER_RECURRENT_INITIALIZE")]
        REVERSE_AFTER_RECURRENT_INITIALIZE = 22,

        [System.Runtime.Serialization.EnumMember(Value = @"NEW_TRANSPORT_CARD")]
        NEW_TRANSPORT_CARD = 23,

        [System.Runtime.Serialization.EnumMember(Value = @"SBOL_PAYMENT")]
        SBOL_PAYMENT = 24,

        [System.Runtime.Serialization.EnumMember(Value = @"SBOL_OTP_PAYMENT")]
        SBOL_OTP_PAYMENT = 25,

        [System.Runtime.Serialization.EnumMember(Value = @"FORCE_PSE")]
        FORCE_PSE = 26,

        [System.Runtime.Serialization.EnumMember(Value = @"FORCE_EFECTY")]
        FORCE_EFECTY = 27,

        [System.Runtime.Serialization.EnumMember(Value = @"FORCE_QR")]
        FORCE_QR = 28,

        [System.Runtime.Serialization.EnumMember(Value = @"FORCE_P2P_DEBIT")]
        FORCE_P2P_DEBIT = 29,

        [System.Runtime.Serialization.EnumMember(Value = @"FIXED_TIPS")]
        FIXED_TIPS = 30,

        [System.Runtime.Serialization.EnumMember(Value = @"BNPL")]
        BNPL = 31,

        [System.Runtime.Serialization.EnumMember(Value = @"FORCE_REDIRECT_TO_URL")]
        FORCE_REDIRECT_TO_URL = 32,

        [System.Runtime.Serialization.EnumMember(Value = @"FORCE_CREATE_BINDING")]
        FORCE_CREATE_BINDING = 33,

        [System.Runtime.Serialization.EnumMember(Value = @"FORCE_PAYMENT_WAY")]
        FORCE_PAYMENT_WAY = 34,

        [System.Runtime.Serialization.EnumMember(Value = @"SKIP_UNSUCCESSFUL_PAYMENT_CALLBACK")]
        SKIP_UNSUCCESSFUL_PAYMENT_CALLBACK = 35,

        [System.Runtime.Serialization.EnumMember(Value = @"OVERRIDE_CLIENT_ID")]
        OVERRIDE_CLIENT_ID = 36,

        [System.Runtime.Serialization.EnumMember(Value = @"RECURRENT_PAYMENT")]
        RECURRENT_PAYMENT = 37,

        [System.Runtime.Serialization.EnumMember(Value = @"ACS_IN_IFRAME")]
        ACS_IN_IFRAME = 38,

        [System.Runtime.Serialization.EnumMember(Value = @"SBP_BINDING")]
        SBP_BINDING = 39,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum AwardBonusPaymentOperation
    {

        [System.Runtime.Serialization.EnumMember(Value = @"PAYMENT")]
        PAYMENT = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"AWARD")]
        AWARD = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"REVERSE")]
        REVERSE = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"REFUND_PAYMENT")]
        REFUND_PAYMENT = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"REFUND_AWARD")]
        REFUND_AWARD = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"VERIFY")]
        VERIFY = 5,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum B2bPayloadApiDataQrcType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"STATIC")]
        STATIC = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"DYNAMIC")]
        DYNAMIC = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"SUBSCRIPTION")]
        SUBSCRIPTION = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum CardAuthInfoProductCategory
    {

        [System.Runtime.Serialization.EnumMember(Value = @"DEBIT")]
        DEBIT = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"CREDIT")]
        CREDIT = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"PREPAID")]
        PREPAID = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"NON_MASTERCARD")]
        NON_MASTERCARD = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"CHARGE")]
        CHARGE = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"DEFERRED_DEBIT")]
        DEFERRED_DEBIT = 5,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum CreateSbpTemplateRequestType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"SBP_QR")]
        SBP_QR = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"CASH_SBP_QR")]
        CASH_SBP_QR = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"B2B_SBP_QR")]
        B2B_SBP_QR = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum EcomTemplateAdditionParamMode
    {

        [System.Runtime.Serialization.EnumMember(Value = @"ADD")]
        ADD = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"REMOVE")]
        REMOVE = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum GetOrderStatusExtendedResponseAvsCode
    {

        [System.Runtime.Serialization.EnumMember(Value = @"A")]
        A = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"B")]
        B = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"C")]
        C = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"D")]
        D = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"E")]
        E = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"F")]
        F = 5,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum GetOrderStatusExtendedResponseTii
    {

        [System.Runtime.Serialization.EnumMember(Value = @"INITIAL")]
        INITIAL = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"INSTALLMENT_INITIAL")]
        INSTALLMENT_INITIAL = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"RECURRENT_INITIAL")]
        RECURRENT_INITIAL = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"FILE_CREDENTIAL")]
        FILE_CREDENTIAL = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"RECURRENT")]
        RECURRENT = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"UNSCHEDULED")]
        UNSCHEDULED = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"INSTALLMENT")]
        INSTALLMENT = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"INCREMENTAL_MIT")]
        INCREMENTAL_MIT = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"RESUBMISSION_MIT")]
        RESUBMISSION_MIT = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"DELAYED_CHARGES_MIT")]
        DELAYED_CHARGES_MIT = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"REAUTHORIZATION_MIT")]
        REAUTHORIZATION_MIT = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"NO_SHOW_MIT")]
        NO_SHOW_MIT = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"TKP_RESUBMISSION_MIT")]
        TKP_RESUBMISSION_MIT = 12,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum GetOrderStatusExtendedResponseUsedPsdIndicatorValue
    {

        [System.Runtime.Serialization.EnumMember(Value = @"LVP")]
        LVP = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"TRA")]
        TRA = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"SCA_REQUIRED")]
        SCA_REQUIRED = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum features2
    {

        [System.Runtime.Serialization.EnumMember(Value = @"FIXED_BINDING")]
        FIXED_BINDING = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"BINDING_NOT_NEEDED")]
        BINDING_NOT_NEEDED = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"FIXED_BONUS_AMOUNT")]
        FIXED_BONUS_AMOUNT = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"FORCE_TDS")]
        FORCE_TDS = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"FORCE_SSL")]
        FORCE_SSL = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"FRAUD_FORCE_TDS")]
        FRAUD_FORCE_TDS = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"FRAUD_FORCE_SSL")]
        FRAUD_FORCE_SSL = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"PAYMENT_WAY_FORCE_TDS")]
        PAYMENT_WAY_FORCE_TDS = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"PAYMENT_WAY_FORCE_SSL")]
        PAYMENT_WAY_FORCE_SSL = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"AUTO_PAYMENT")]
        AUTO_PAYMENT = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"FORCE_NO_CVC")]
        FORCE_NO_CVC = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"FORCE_FULL_TDS")]
        FORCE_FULL_TDS = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"VERIFY")]
        VERIFY = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"SKIP_VERIFY")]
        SKIP_VERIFY = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"SKIP_PAYER_EMAIL_NOTIFY")]
        SKIP_PAYER_EMAIL_NOTIFY = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"SKIP_PAYER_PHONE_NOTIFY")]
        SKIP_PAYER_PHONE_NOTIFY = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"SKIP_PAYER_CREATE_NOTIFY")]
        SKIP_PAYER_CREATE_NOTIFY = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"FORCE_GENERATE_ORDERNUMBER")]
        FORCE_GENERATE_ORDERNUMBER = 17,

        [System.Runtime.Serialization.EnumMember(Value = @"ORDER_NUMBER_EXPLICIT_INDICATION")]
        ORDER_NUMBER_EXPLICIT_INDICATION = 18,

        [System.Runtime.Serialization.EnumMember(Value = @"PAY_BY_CLIENT")]
        PAY_BY_CLIENT = 19,

        [System.Runtime.Serialization.EnumMember(Value = @"WITHOUT_FROM_CARD")]
        WITHOUT_FROM_CARD = 20,

        [System.Runtime.Serialization.EnumMember(Value = @"WITHOUT_TO_CARD")]
        WITHOUT_TO_CARD = 21,

        [System.Runtime.Serialization.EnumMember(Value = @"REVERSE_AFTER_RECURRENT_INITIALIZE")]
        REVERSE_AFTER_RECURRENT_INITIALIZE = 22,

        [System.Runtime.Serialization.EnumMember(Value = @"NEW_TRANSPORT_CARD")]
        NEW_TRANSPORT_CARD = 23,

        [System.Runtime.Serialization.EnumMember(Value = @"SBOL_PAYMENT")]
        SBOL_PAYMENT = 24,

        [System.Runtime.Serialization.EnumMember(Value = @"SBOL_OTP_PAYMENT")]
        SBOL_OTP_PAYMENT = 25,

        [System.Runtime.Serialization.EnumMember(Value = @"FORCE_PSE")]
        FORCE_PSE = 26,

        [System.Runtime.Serialization.EnumMember(Value = @"FORCE_EFECTY")]
        FORCE_EFECTY = 27,

        [System.Runtime.Serialization.EnumMember(Value = @"FORCE_QR")]
        FORCE_QR = 28,

        [System.Runtime.Serialization.EnumMember(Value = @"FORCE_P2P_DEBIT")]
        FORCE_P2P_DEBIT = 29,

        [System.Runtime.Serialization.EnumMember(Value = @"FIXED_TIPS")]
        FIXED_TIPS = 30,

        [System.Runtime.Serialization.EnumMember(Value = @"BNPL")]
        BNPL = 31,

        [System.Runtime.Serialization.EnumMember(Value = @"FORCE_REDIRECT_TO_URL")]
        FORCE_REDIRECT_TO_URL = 32,

        [System.Runtime.Serialization.EnumMember(Value = @"FORCE_CREATE_BINDING")]
        FORCE_CREATE_BINDING = 33,

        [System.Runtime.Serialization.EnumMember(Value = @"FORCE_PAYMENT_WAY")]
        FORCE_PAYMENT_WAY = 34,

        [System.Runtime.Serialization.EnumMember(Value = @"SKIP_UNSUCCESSFUL_PAYMENT_CALLBACK")]
        SKIP_UNSUCCESSFUL_PAYMENT_CALLBACK = 35,

        [System.Runtime.Serialization.EnumMember(Value = @"OVERRIDE_CLIENT_ID")]
        OVERRIDE_CLIENT_ID = 36,

        [System.Runtime.Serialization.EnumMember(Value = @"RECURRENT_PAYMENT")]
        RECURRENT_PAYMENT = 37,

        [System.Runtime.Serialization.EnumMember(Value = @"ACS_IN_IFRAME")]
        ACS_IN_IFRAME = 38,

        [System.Runtime.Serialization.EnumMember(Value = @"SBP_BINDING")]
        SBP_BINDING = 39,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum OfdItemTaxType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"NONE")]
        NONE = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"VAT_0")]
        VAT_0 = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"VAT_10")]
        VAT_10 = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"VAT_18")]
        VAT_18 = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"VAT_110")]
        VAT_110 = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"VAT_118")]
        VAT_118 = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"VAT_20")]
        VAT_20 = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"VAT_120")]
        VAT_120 = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"VAT_12")]
        VAT_12 = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"VAT_8")]
        VAT_8 = 9,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum PaymentAmountInfoPaymentState
    {

        [System.Runtime.Serialization.EnumMember(Value = @"CREATED")]
        CREATED = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"APPROVED")]
        APPROVED = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"DECLINED")]
        DECLINED = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"REVERSED")]
        REVERSED = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"DEPOSITED")]
        DEPOSITED = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"REFUNDED")]
        REFUNDED = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"PENDING")]
        PENDING = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"MULTIPLE_INTERMEDIATE_DEPOSITED")]
        MULTIPLE_INTERMEDIATE_DEPOSITED = 7,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum PaymentBonusPaymentOperation
    {

        [System.Runtime.Serialization.EnumMember(Value = @"PAYMENT")]
        PAYMENT = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"AWARD")]
        AWARD = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"REVERSE")]
        REVERSE = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"REFUND_PAYMENT")]
        REFUND_PAYMENT = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"REFUND_AWARD")]
        REFUND_AWARD = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"VERIFY")]
        VERIFY = 5,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ProcessingOperationOperationType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"PRE_AUTH")]
        PRE_AUTH = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"COMPLETION")]
        COMPLETION = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"REVERSAL_FOR_PRE_AUTH")]
        REVERSAL_FOR_PRE_AUTH = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"REVERSAL_FOR_COMPLETION")]
        REVERSAL_FOR_COMPLETION = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"REFUND")]
        REFUND = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"PURCHASE")]
        PURCHASE = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"REVERSAL_FOR_PURCHASE")]
        REVERSAL_FOR_PURCHASE = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"COMMUNICATION_REVERSAL")]
        COMMUNICATION_REVERSAL = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"REVERSAL_FOR_REFUND")]
        REVERSAL_FOR_REFUND = 8,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum SbpC2bGetQrApiResponseQrStatus
    {

        [System.Runtime.Serialization.EnumMember(Value = @"STARTED")]
        STARTED = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"CONFIRMED")]
        CONFIRMED = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"REJECTED")]
        REJECTED = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"REJECTED_BY_USER")]
        REJECTED_BY_USER = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"ACCEPTED")]
        ACCEPTED = 4,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum SbpC2bInfoStatus
    {

        [System.Runtime.Serialization.EnumMember(Value = @"STARTED")]
        STARTED = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"CONFIRMED")]
        CONFIRMED = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"REJECTED")]
        REJECTED = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"REJECTED_BY_USER")]
        REJECTED_BY_USER = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"ACCEPTED")]
        ACCEPTED = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"PENDING")]
        PENDING = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"AUTO_REFUNDED")]
        AUTO_REFUNDED = 6,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum SbpC2bQrStatusApiResponseQrStatus
    {

        [System.Runtime.Serialization.EnumMember(Value = @"STARTED")]
        STARTED = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"CONFIRMED")]
        CONFIRMED = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"REJECTED")]
        REJECTED = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"REJECTED_BY_USER")]
        REJECTED_BY_USER = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"ACCEPTED")]
        ACCEPTED = 4,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum SbpC2bQrStatusApiResponseQrType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"STATIC")]
        STATIC = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"DYNAMIC")]
        DYNAMIC = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum SbpC2bQrStatusApiResponseTransactionState
    {

        [System.Runtime.Serialization.EnumMember(Value = @"CREATED")]
        CREATED = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"DECLINED")]
        DECLINED = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"DEPOSITED")]
        DEPOSITED = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum SbpC2bQrStatusApiResponseTransactionStateExtension
    {

        [System.Runtime.Serialization.EnumMember(Value = @"SBP_C2B_STARTED")]
        SBP_C2B_STARTED = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"SBP_C2B_CONFIRMED")]
        SBP_C2B_CONFIRMED = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"SBP_C2B_PENDING")]
        SBP_C2B_PENDING = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum SbpTemplateDetailsResponseStatus
    {

        [System.Runtime.Serialization.EnumMember(Value = @"WAITING")]
        WAITING = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"ACTIVE")]
        ACTIVE = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"INACTIVE")]
        INACTIVE = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"EXPIRED")]
        EXPIRED = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"USED")]
        USED = 4,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum SbpTemplateDetailsResponseType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"SBP_QR")]
        SBP_QR = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"CASH_SBP_QR")]
        CASH_SBP_QR = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"B2B_SBP_QR")]
        B2B_SBP_QR = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum SingleClickUpdateTemplateStatus
    {

        [System.Runtime.Serialization.EnumMember(Value = @"ACTIVE")]
        ACTIVE = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"INACTIVE")]
        INACTIVE = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"DELETE")]
        DELETE = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum UpdateSbpTemplateRequestStatus
    {

        [System.Runtime.Serialization.EnumMember(Value = @"ACTIVE")]
        ACTIVE = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"INACTIVE")]
        INACTIVE = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"WAITING")]
        WAITING = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum features3
    {

        [System.Runtime.Serialization.EnumMember(Value = @"FIXED_BINDING")]
        FIXED_BINDING = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"BINDING_NOT_NEEDED")]
        BINDING_NOT_NEEDED = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"FIXED_BONUS_AMOUNT")]
        FIXED_BONUS_AMOUNT = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"FORCE_TDS")]
        FORCE_TDS = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"FORCE_SSL")]
        FORCE_SSL = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"FRAUD_FORCE_TDS")]
        FRAUD_FORCE_TDS = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"FRAUD_FORCE_SSL")]
        FRAUD_FORCE_SSL = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"PAYMENT_WAY_FORCE_TDS")]
        PAYMENT_WAY_FORCE_TDS = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"PAYMENT_WAY_FORCE_SSL")]
        PAYMENT_WAY_FORCE_SSL = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"AUTO_PAYMENT")]
        AUTO_PAYMENT = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"FORCE_NO_CVC")]
        FORCE_NO_CVC = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"FORCE_FULL_TDS")]
        FORCE_FULL_TDS = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"VERIFY")]
        VERIFY = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"SKIP_VERIFY")]
        SKIP_VERIFY = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"SKIP_PAYER_EMAIL_NOTIFY")]
        SKIP_PAYER_EMAIL_NOTIFY = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"SKIP_PAYER_PHONE_NOTIFY")]
        SKIP_PAYER_PHONE_NOTIFY = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"SKIP_PAYER_CREATE_NOTIFY")]
        SKIP_PAYER_CREATE_NOTIFY = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"FORCE_GENERATE_ORDERNUMBER")]
        FORCE_GENERATE_ORDERNUMBER = 17,

        [System.Runtime.Serialization.EnumMember(Value = @"ORDER_NUMBER_EXPLICIT_INDICATION")]
        ORDER_NUMBER_EXPLICIT_INDICATION = 18,

        [System.Runtime.Serialization.EnumMember(Value = @"PAY_BY_CLIENT")]
        PAY_BY_CLIENT = 19,

        [System.Runtime.Serialization.EnumMember(Value = @"WITHOUT_FROM_CARD")]
        WITHOUT_FROM_CARD = 20,

        [System.Runtime.Serialization.EnumMember(Value = @"WITHOUT_TO_CARD")]
        WITHOUT_TO_CARD = 21,

        [System.Runtime.Serialization.EnumMember(Value = @"REVERSE_AFTER_RECURRENT_INITIALIZE")]
        REVERSE_AFTER_RECURRENT_INITIALIZE = 22,

        [System.Runtime.Serialization.EnumMember(Value = @"NEW_TRANSPORT_CARD")]
        NEW_TRANSPORT_CARD = 23,

        [System.Runtime.Serialization.EnumMember(Value = @"SBOL_PAYMENT")]
        SBOL_PAYMENT = 24,

        [System.Runtime.Serialization.EnumMember(Value = @"SBOL_OTP_PAYMENT")]
        SBOL_OTP_PAYMENT = 25,

        [System.Runtime.Serialization.EnumMember(Value = @"FORCE_PSE")]
        FORCE_PSE = 26,

        [System.Runtime.Serialization.EnumMember(Value = @"FORCE_EFECTY")]
        FORCE_EFECTY = 27,

        [System.Runtime.Serialization.EnumMember(Value = @"FORCE_QR")]
        FORCE_QR = 28,

        [System.Runtime.Serialization.EnumMember(Value = @"FORCE_P2P_DEBIT")]
        FORCE_P2P_DEBIT = 29,

        [System.Runtime.Serialization.EnumMember(Value = @"FIXED_TIPS")]
        FIXED_TIPS = 30,

        [System.Runtime.Serialization.EnumMember(Value = @"BNPL")]
        BNPL = 31,

        [System.Runtime.Serialization.EnumMember(Value = @"FORCE_REDIRECT_TO_URL")]
        FORCE_REDIRECT_TO_URL = 32,

        [System.Runtime.Serialization.EnumMember(Value = @"FORCE_CREATE_BINDING")]
        FORCE_CREATE_BINDING = 33,

        [System.Runtime.Serialization.EnumMember(Value = @"FORCE_PAYMENT_WAY")]
        FORCE_PAYMENT_WAY = 34,

        [System.Runtime.Serialization.EnumMember(Value = @"SKIP_UNSUCCESSFUL_PAYMENT_CALLBACK")]
        SKIP_UNSUCCESSFUL_PAYMENT_CALLBACK = 35,

        [System.Runtime.Serialization.EnumMember(Value = @"OVERRIDE_CLIENT_ID")]
        OVERRIDE_CLIENT_ID = 36,

        [System.Runtime.Serialization.EnumMember(Value = @"RECURRENT_PAYMENT")]
        RECURRENT_PAYMENT = 37,

        [System.Runtime.Serialization.EnumMember(Value = @"ACS_IN_IFRAME")]
        ACS_IN_IFRAME = 38,

        [System.Runtime.Serialization.EnumMember(Value = @"SBP_BINDING")]
        SBP_BINDING = 39,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum features4
    {

        [System.Runtime.Serialization.EnumMember(Value = @"FIXED_BINDING")]
        FIXED_BINDING = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"BINDING_NOT_NEEDED")]
        BINDING_NOT_NEEDED = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"FIXED_BONUS_AMOUNT")]
        FIXED_BONUS_AMOUNT = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"FORCE_TDS")]
        FORCE_TDS = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"FORCE_SSL")]
        FORCE_SSL = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"FRAUD_FORCE_TDS")]
        FRAUD_FORCE_TDS = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"FRAUD_FORCE_SSL")]
        FRAUD_FORCE_SSL = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"PAYMENT_WAY_FORCE_TDS")]
        PAYMENT_WAY_FORCE_TDS = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"PAYMENT_WAY_FORCE_SSL")]
        PAYMENT_WAY_FORCE_SSL = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"AUTO_PAYMENT")]
        AUTO_PAYMENT = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"FORCE_NO_CVC")]
        FORCE_NO_CVC = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"FORCE_FULL_TDS")]
        FORCE_FULL_TDS = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"VERIFY")]
        VERIFY = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"SKIP_VERIFY")]
        SKIP_VERIFY = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"SKIP_PAYER_EMAIL_NOTIFY")]
        SKIP_PAYER_EMAIL_NOTIFY = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"SKIP_PAYER_PHONE_NOTIFY")]
        SKIP_PAYER_PHONE_NOTIFY = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"SKIP_PAYER_CREATE_NOTIFY")]
        SKIP_PAYER_CREATE_NOTIFY = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"FORCE_GENERATE_ORDERNUMBER")]
        FORCE_GENERATE_ORDERNUMBER = 17,

        [System.Runtime.Serialization.EnumMember(Value = @"ORDER_NUMBER_EXPLICIT_INDICATION")]
        ORDER_NUMBER_EXPLICIT_INDICATION = 18,

        [System.Runtime.Serialization.EnumMember(Value = @"PAY_BY_CLIENT")]
        PAY_BY_CLIENT = 19,

        [System.Runtime.Serialization.EnumMember(Value = @"WITHOUT_FROM_CARD")]
        WITHOUT_FROM_CARD = 20,

        [System.Runtime.Serialization.EnumMember(Value = @"WITHOUT_TO_CARD")]
        WITHOUT_TO_CARD = 21,

        [System.Runtime.Serialization.EnumMember(Value = @"REVERSE_AFTER_RECURRENT_INITIALIZE")]
        REVERSE_AFTER_RECURRENT_INITIALIZE = 22,

        [System.Runtime.Serialization.EnumMember(Value = @"NEW_TRANSPORT_CARD")]
        NEW_TRANSPORT_CARD = 23,

        [System.Runtime.Serialization.EnumMember(Value = @"SBOL_PAYMENT")]
        SBOL_PAYMENT = 24,

        [System.Runtime.Serialization.EnumMember(Value = @"SBOL_OTP_PAYMENT")]
        SBOL_OTP_PAYMENT = 25,

        [System.Runtime.Serialization.EnumMember(Value = @"FORCE_PSE")]
        FORCE_PSE = 26,

        [System.Runtime.Serialization.EnumMember(Value = @"FORCE_EFECTY")]
        FORCE_EFECTY = 27,

        [System.Runtime.Serialization.EnumMember(Value = @"FORCE_QR")]
        FORCE_QR = 28,

        [System.Runtime.Serialization.EnumMember(Value = @"FORCE_P2P_DEBIT")]
        FORCE_P2P_DEBIT = 29,

        [System.Runtime.Serialization.EnumMember(Value = @"FIXED_TIPS")]
        FIXED_TIPS = 30,

        [System.Runtime.Serialization.EnumMember(Value = @"BNPL")]
        BNPL = 31,

        [System.Runtime.Serialization.EnumMember(Value = @"FORCE_REDIRECT_TO_URL")]
        FORCE_REDIRECT_TO_URL = 32,

        [System.Runtime.Serialization.EnumMember(Value = @"FORCE_CREATE_BINDING")]
        FORCE_CREATE_BINDING = 33,

        [System.Runtime.Serialization.EnumMember(Value = @"FORCE_PAYMENT_WAY")]
        FORCE_PAYMENT_WAY = 34,

        [System.Runtime.Serialization.EnumMember(Value = @"SKIP_UNSUCCESSFUL_PAYMENT_CALLBACK")]
        SKIP_UNSUCCESSFUL_PAYMENT_CALLBACK = 35,

        [System.Runtime.Serialization.EnumMember(Value = @"OVERRIDE_CLIENT_ID")]
        OVERRIDE_CLIENT_ID = 36,

        [System.Runtime.Serialization.EnumMember(Value = @"RECURRENT_PAYMENT")]
        RECURRENT_PAYMENT = 37,

        [System.Runtime.Serialization.EnumMember(Value = @"ACS_IN_IFRAME")]
        ACS_IN_IFRAME = 38,

        [System.Runtime.Serialization.EnumMember(Value = @"SBP_BINDING")]
        SBP_BINDING = 39,

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FileResponse : System.IDisposable
    {
        private System.IDisposable? _client;
        private System.IDisposable? _response;

        public int StatusCode { get; private set; }

        public System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public System.IO.Stream Stream { get; private set; }

        public bool IsPartial
        {
            get { return StatusCode == 206; }
        }

        public FileResponse(int statusCode, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.IO.Stream stream, System.IDisposable? client, System.IDisposable? response)
        {
            StatusCode = statusCode;
            Headers = headers;
            Stream = stream;
            _client = client;
            _response = response;
        }

        public void Dispose()
        {
            Stream.Dispose();
            if (_response != null)
                _response.Dispose();
            if (_client != null)
                _client.Dispose();
        }
    }


    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AlfabankException : System.Exception
    {
        public int StatusCode { get; private set; }

        public string? Response { get; private set; }

        public System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public AlfabankException(string message, int statusCode, string? response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Exception? innerException)
            : base(message + "\n\nStatus: " + statusCode + "\nResponse: \n" + ((response == null) ? "(null)" : response.Substring(0, response.Length >= 512 ? 512 : response.Length)), innerException)
        {
            StatusCode = statusCode;
            Response = response;
            Headers = headers;
        }

        public override string ToString()
        {
            return string.Format("HTTP Response: \n\n{0}\n\n{1}", Response, base.ToString());
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AlfabankException<TResult> : AlfabankException
    {
        public TResult Result { get; private set; }

        public AlfabankException(string message, int statusCode, string? response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, TResult result, System.Exception? innerException)
            : base(message, statusCode, response, headers, innerException)
        {
            Result = result;
        }
    }

}

#pragma warning restore  108
#pragma warning restore  114
#pragma warning restore  472
#pragma warning restore  612
#pragma warning restore 1573
#pragma warning restore 1591
#pragma warning restore 8073
#pragma warning restore 3016
#pragma warning restore 8603
#pragma warning restore 8604
#pragma warning restore 8625